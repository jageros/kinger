// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/gopuppy/proto/pb"
)

//@ A2C_REGISTER_APP    req: AppInfo    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type A2C_REGISTER_APP_Meta struct {
}

func (m *A2C_REGISTER_APP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_A2C_REGISTER_APP
}

func (m *A2C_REGISTER_APP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AppInfo)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("A2C_REGISTER_APP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *A2C_REGISTER_APP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AppInfo{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *A2C_REGISTER_APP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *A2C_REGISTER_APP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ A2C_REGISTER_APP END ----------------------------------------

//@ GT2C_ON_CLIENT_ACCEPT    req: ClientProxy    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type GT2C_ON_CLIENT_ACCEPT_Meta struct {
}

func (m *GT2C_ON_CLIENT_ACCEPT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_GT2C_ON_CLIENT_ACCEPT
}

func (m *GT2C_ON_CLIENT_ACCEPT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ClientProxy)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("GT2C_ON_CLIENT_ACCEPT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *GT2C_ON_CLIENT_ACCEPT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ClientProxy{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *GT2C_ON_CLIENT_ACCEPT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *GT2C_ON_CLIENT_ACCEPT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ GT2C_ON_CLIENT_ACCEPT END ----------------------------------------

//@ GT2C_ON_CLIENT_CLOSE    req: PlayerClient
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type GT2C_ON_CLIENT_CLOSE_Meta struct {
}

func (m *GT2C_ON_CLIENT_CLOSE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_GT2C_ON_CLIENT_CLOSE
}

func (m *GT2C_ON_CLIENT_CLOSE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerClient)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("GT2C_ON_CLIENT_CLOSE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *GT2C_ON_CLIENT_CLOSE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerClient{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *GT2C_ON_CLIENT_CLOSE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *GT2C_ON_CLIENT_CLOSE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ GT2C_ON_CLIENT_CLOSE END ----------------------------------------

//@ GT2C_CLIENT_RPC_CALL    req: RpcCallArg    resp: RpcCallReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type GT2C_CLIENT_RPC_CALL_Meta struct {
}

func (m *GT2C_CLIENT_RPC_CALL_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_GT2C_CLIENT_RPC_CALL
}

func (m *GT2C_CLIENT_RPC_CALL_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RpcCallArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("GT2C_CLIENT_RPC_CALL_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *GT2C_CLIENT_RPC_CALL_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RpcCallArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *GT2C_CLIENT_RPC_CALL_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RpcCallReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("GT2C_CLIENT_RPC_CALL_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *GT2C_CLIENT_RPC_CALL_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RpcCallReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ GT2C_CLIENT_RPC_CALL END ----------------------------------------

//@ GT2C_CLIENT_RPC_PUSH    req: RpcCallArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type GT2C_CLIENT_RPC_PUSH_Meta struct {
}

func (m *GT2C_CLIENT_RPC_PUSH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_GT2C_CLIENT_RPC_PUSH
}

func (m *GT2C_CLIENT_RPC_PUSH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RpcCallArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("GT2C_CLIENT_RPC_PUSH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *GT2C_CLIENT_RPC_PUSH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RpcCallArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *GT2C_CLIENT_RPC_PUSH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *GT2C_CLIENT_RPC_PUSH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ GT2C_CLIENT_RPC_PUSH END ----------------------------------------

//@ C2GT_PUSH_CLIENT    req: RpcCallArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2GT_PUSH_CLIENT_Meta struct {
}

func (m *C2GT_PUSH_CLIENT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2GT_PUSH_CLIENT
}

func (m *C2GT_PUSH_CLIENT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RpcCallArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2GT_PUSH_CLIENT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2GT_PUSH_CLIENT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RpcCallArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2GT_PUSH_CLIENT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2GT_PUSH_CLIENT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2GT_PUSH_CLIENT END ----------------------------------------

//@ L2C_REPORT_RPC    req: RpcHandlers    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2C_REPORT_RPC_Meta struct {
}

func (m *L2C_REPORT_RPC_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2C_REPORT_RPC
}

func (m *L2C_REPORT_RPC_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RpcHandlers)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2C_REPORT_RPC_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2C_REPORT_RPC_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RpcHandlers{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2C_REPORT_RPC_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2C_REPORT_RPC_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2C_REPORT_RPC END ----------------------------------------

//@ G2C_PLAYER_LOGIN    req: PlayerClient    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2C_PLAYER_LOGIN_Meta struct {
}

func (m *G2C_PLAYER_LOGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2C_PLAYER_LOGIN
}

func (m *G2C_PLAYER_LOGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerClient)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2C_PLAYER_LOGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2C_PLAYER_LOGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerClient{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2C_PLAYER_LOGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2C_PLAYER_LOGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2C_PLAYER_LOGIN END ----------------------------------------

//@ C2L_KICK_OUT_PLAYER    req: PlayerClient    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2L_KICK_OUT_PLAYER_Meta struct {
}

func (m *C2L_KICK_OUT_PLAYER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2L_KICK_OUT_PLAYER
}

func (m *C2L_KICK_OUT_PLAYER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerClient)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2L_KICK_OUT_PLAYER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2L_KICK_OUT_PLAYER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerClient{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2L_KICK_OUT_PLAYER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2L_KICK_OUT_PLAYER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2L_KICK_OUT_PLAYER END ----------------------------------------

//@ PLAYER_LOGIN_DONE    req: PlayerLoginDone
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type PLAYER_LOGIN_DONE_Meta struct {
}

func (m *PLAYER_LOGIN_DONE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_PLAYER_LOGIN_DONE
}

func (m *PLAYER_LOGIN_DONE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerLoginDone)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("PLAYER_LOGIN_DONE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *PLAYER_LOGIN_DONE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerLoginDone{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *PLAYER_LOGIN_DONE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *PLAYER_LOGIN_DONE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ PLAYER_LOGIN_DONE END ----------------------------------------

//@ L2L_CALL_AGENT    req: RpcCallArg    resp: RpcCallReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2L_CALL_AGENT_Meta struct {
}

func (m *L2L_CALL_AGENT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2L_CALL_AGENT
}

func (m *L2L_CALL_AGENT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RpcCallArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2L_CALL_AGENT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2L_CALL_AGENT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RpcCallArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2L_CALL_AGENT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RpcCallReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2L_CALL_AGENT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *L2L_CALL_AGENT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RpcCallReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ L2L_CALL_AGENT END ----------------------------------------

//@ L2L_PUSH_AGENT    req: RpcCallArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2L_PUSH_AGENT_Meta struct {
}

func (m *L2L_PUSH_AGENT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2L_PUSH_AGENT
}

func (m *L2L_PUSH_AGENT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RpcCallArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2L_PUSH_AGENT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2L_PUSH_AGENT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RpcCallArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2L_PUSH_AGENT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2L_PUSH_AGENT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2L_PUSH_AGENT END ----------------------------------------

//@ L2CL_PUSH_CLIENT    req: RpcCallArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2CL_PUSH_CLIENT_Meta struct {
}

func (m *L2CL_PUSH_CLIENT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2CL_PUSH_CLIENT
}

func (m *L2CL_PUSH_CLIENT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RpcCallArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2CL_PUSH_CLIENT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2CL_PUSH_CLIENT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RpcCallArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2CL_PUSH_CLIENT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2CL_PUSH_CLIENT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2CL_PUSH_CLIENT END ----------------------------------------

//@ L2C_SET_DISPATCH    req: SetDispatchArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2C_SET_DISPATCH_Meta struct {
}

func (m *L2C_SET_DISPATCH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2C_SET_DISPATCH
}

func (m *L2C_SET_DISPATCH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SetDispatchArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2C_SET_DISPATCH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2C_SET_DISPATCH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SetDispatchArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2C_SET_DISPATCH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2C_SET_DISPATCH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2C_SET_DISPATCH END ----------------------------------------

//@ L2L_NO_PLAYER_RPC_CALL    req: NoPlayerRpcCallArg    resp: RpcCallReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2L_NO_PLAYER_RPC_CALL_Meta struct {
}

func (m *L2L_NO_PLAYER_RPC_CALL_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2L_NO_PLAYER_RPC_CALL
}

func (m *L2L_NO_PLAYER_RPC_CALL_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.NoPlayerRpcCallArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2L_NO_PLAYER_RPC_CALL_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2L_NO_PLAYER_RPC_CALL_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.NoPlayerRpcCallArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2L_NO_PLAYER_RPC_CALL_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RpcCallReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2L_NO_PLAYER_RPC_CALL_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *L2L_NO_PLAYER_RPC_CALL_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RpcCallReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ L2L_NO_PLAYER_RPC_CALL END ----------------------------------------

//@ L2L_NO_PLAYER_RPC_PUSH    req: NoPlayerRpcCallArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2L_NO_PLAYER_RPC_PUSH_Meta struct {
}

func (m *L2L_NO_PLAYER_RPC_PUSH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2L_NO_PLAYER_RPC_PUSH
}

func (m *L2L_NO_PLAYER_RPC_PUSH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.NoPlayerRpcCallArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2L_NO_PLAYER_RPC_PUSH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2L_NO_PLAYER_RPC_PUSH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.NoPlayerRpcCallArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2L_NO_PLAYER_RPC_PUSH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2L_NO_PLAYER_RPC_PUSH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2L_NO_PLAYER_RPC_PUSH END ----------------------------------------

//@ C2GT_BROADCAST_CLIENT    req: BroadcastClientArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2GT_BROADCAST_CLIENT_Meta struct {
}

func (m *C2GT_BROADCAST_CLIENT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2GT_BROADCAST_CLIENT
}

func (m *C2GT_BROADCAST_CLIENT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BroadcastClientArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2GT_BROADCAST_CLIENT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2GT_BROADCAST_CLIENT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BroadcastClientArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2GT_BROADCAST_CLIENT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2GT_BROADCAST_CLIENT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2GT_BROADCAST_CLIENT END ----------------------------------------

//@ C2L_RESTORE_AGENT    req: RestoreAgentArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2L_RESTORE_AGENT_Meta struct {
}

func (m *C2L_RESTORE_AGENT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2L_RESTORE_AGENT
}

func (m *C2L_RESTORE_AGENT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RestoreAgentArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2L_RESTORE_AGENT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2L_RESTORE_AGENT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RestoreAgentArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2L_RESTORE_AGENT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2L_RESTORE_AGENT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2L_RESTORE_AGENT END ----------------------------------------

//@ LOAD_PLAYER    req: TargetPlayer    resp: RpcCallReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type LOAD_PLAYER_Meta struct {
}

func (m *LOAD_PLAYER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_LOAD_PLAYER
}

func (m *LOAD_PLAYER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("LOAD_PLAYER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *LOAD_PLAYER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *LOAD_PLAYER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RpcCallReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("LOAD_PLAYER_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *LOAD_PLAYER_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RpcCallReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ LOAD_PLAYER END ----------------------------------------

//@ DEL_CLIENT_DISPATCH_INFO    req: TargetPlayer
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type DEL_CLIENT_DISPATCH_INFO_Meta struct {
}

func (m *DEL_CLIENT_DISPATCH_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_DEL_CLIENT_DISPATCH_INFO
}

func (m *DEL_CLIENT_DISPATCH_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("DEL_CLIENT_DISPATCH_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *DEL_CLIENT_DISPATCH_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *DEL_CLIENT_DISPATCH_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *DEL_CLIENT_DISPATCH_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ DEL_CLIENT_DISPATCH_INFO END ----------------------------------------

//@ C2GT_CLIENT_SET_FILTER    req: ClientSetFilterArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2GT_CLIENT_SET_FILTER_Meta struct {
}

func (m *C2GT_CLIENT_SET_FILTER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2GT_CLIENT_SET_FILTER
}

func (m *C2GT_CLIENT_SET_FILTER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ClientSetFilterArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2GT_CLIENT_SET_FILTER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2GT_CLIENT_SET_FILTER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ClientSetFilterArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2GT_CLIENT_SET_FILTER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2GT_CLIENT_SET_FILTER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2GT_CLIENT_SET_FILTER END ----------------------------------------

//@ C2GT_CLIENT_CLEAR_FILTER    req: PlayerClient
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2GT_CLIENT_CLEAR_FILTER_Meta struct {
}

func (m *C2GT_CLIENT_CLEAR_FILTER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2GT_CLIENT_CLEAR_FILTER
}

func (m *C2GT_CLIENT_CLEAR_FILTER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerClient)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2GT_CLIENT_CLEAR_FILTER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2GT_CLIENT_CLEAR_FILTER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerClient{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2GT_CLIENT_CLEAR_FILTER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2GT_CLIENT_CLEAR_FILTER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2GT_CLIENT_CLEAR_FILTER END ----------------------------------------

//@ L2C_MQ_PUBLISH    req: RmqMessage
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2C_MQ_PUBLISH_Meta struct {
}

func (m *L2C_MQ_PUBLISH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2C_MQ_PUBLISH
}

func (m *L2C_MQ_PUBLISH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RmqMessage)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2C_MQ_PUBLISH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2C_MQ_PUBLISH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RmqMessage{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2C_MQ_PUBLISH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2C_MQ_PUBLISH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2C_MQ_PUBLISH END ----------------------------------------

//@ L2C_MQ_ADD_CONSUMER    req: MqConsumerArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2C_MQ_ADD_CONSUMER_Meta struct {
}

func (m *L2C_MQ_ADD_CONSUMER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2C_MQ_ADD_CONSUMER
}

func (m *L2C_MQ_ADD_CONSUMER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MqConsumerArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2C_MQ_ADD_CONSUMER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2C_MQ_ADD_CONSUMER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MqConsumerArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2C_MQ_ADD_CONSUMER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2C_MQ_ADD_CONSUMER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2C_MQ_ADD_CONSUMER END ----------------------------------------

//@ L2C_MQ_REMOVE_CONSUMER    req: MqConsumerArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2C_MQ_REMOVE_CONSUMER_Meta struct {
}

func (m *L2C_MQ_REMOVE_CONSUMER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2C_MQ_REMOVE_CONSUMER
}

func (m *L2C_MQ_REMOVE_CONSUMER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MqConsumerArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2C_MQ_REMOVE_CONSUMER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2C_MQ_REMOVE_CONSUMER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MqConsumerArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2C_MQ_REMOVE_CONSUMER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2C_MQ_REMOVE_CONSUMER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2C_MQ_REMOVE_CONSUMER END ----------------------------------------

//@ C2L_MQ_CONSUME    req: RmqMessage
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2L_MQ_CONSUME_Meta struct {
}

func (m *C2L_MQ_CONSUME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2L_MQ_CONSUME
}

func (m *C2L_MQ_CONSUME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RmqMessage)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2L_MQ_CONSUME_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2L_MQ_CONSUME_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RmqMessage{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2L_MQ_CONSUME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2L_MQ_CONSUME_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2L_MQ_CONSUME END ----------------------------------------

//@ GT2C_ON_SNET_DISCONNECT    req: PlayerClient
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type GT2C_ON_SNET_DISCONNECT_Meta struct {
}

func (m *GT2C_ON_SNET_DISCONNECT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_GT2C_ON_SNET_DISCONNECT
}

func (m *GT2C_ON_SNET_DISCONNECT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerClient)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("GT2C_ON_SNET_DISCONNECT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *GT2C_ON_SNET_DISCONNECT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerClient{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *GT2C_ON_SNET_DISCONNECT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *GT2C_ON_SNET_DISCONNECT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ GT2C_ON_SNET_DISCONNECT END ----------------------------------------

//@ GT2C_ON_SNET_RECONNECT    req: PlayerClient
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type GT2C_ON_SNET_RECONNECT_Meta struct {
}

func (m *GT2C_ON_SNET_RECONNECT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_GT2C_ON_SNET_RECONNECT
}

func (m *GT2C_ON_SNET_RECONNECT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerClient)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("GT2C_ON_SNET_RECONNECT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *GT2C_ON_SNET_RECONNECT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerClient{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *GT2C_ON_SNET_RECONNECT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *GT2C_ON_SNET_RECONNECT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ GT2C_ON_SNET_RECONNECT END ----------------------------------------

//@ L2L_NO_PLAYER_BROADCAST   req: NoPlayerBroadcastArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2L_NO_PLAYER_BROADCAST_Meta struct {
}

func (m *L2L_NO_PLAYER_BROADCAST_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2L_NO_PLAYER_BROADCAST
}

func (m *L2L_NO_PLAYER_BROADCAST_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.NoPlayerBroadcastArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2L_NO_PLAYER_BROADCAST_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2L_NO_PLAYER_BROADCAST_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.NoPlayerBroadcastArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2L_NO_PLAYER_BROADCAST_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2L_NO_PLAYER_BROADCAST_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2L_NO_PLAYER_BROADCAST END ----------------------------------------

//@ L2C_BEGIN_HOT_FIX    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2C_BEGIN_HOT_FIX_Meta struct {
}

func (m *L2C_BEGIN_HOT_FIX_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2C_BEGIN_HOT_FIX
}

func (m *L2C_BEGIN_HOT_FIX_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2C_BEGIN_HOT_FIX_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *L2C_BEGIN_HOT_FIX_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2C_BEGIN_HOT_FIX_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2C_BEGIN_HOT_FIX END ----------------------------------------

//@ END_MONITOR_PLAYER    req: PlayerClient    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type END_MONITOR_PLAYER_Meta struct {
}

func (m *END_MONITOR_PLAYER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_END_MONITOR_PLAYER
}

func (m *END_MONITOR_PLAYER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerClient)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("END_MONITOR_PLAYER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *END_MONITOR_PLAYER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerClient{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *END_MONITOR_PLAYER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *END_MONITOR_PLAYER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ END_MONITOR_PLAYER END ----------------------------------------

//@ L2C_PLAYER_LOGOUT    req: PlayerClient
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2C_PLAYER_LOGOUT_Meta struct {
}

func (m *L2C_PLAYER_LOGOUT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2C_PLAYER_LOGOUT
}

func (m *L2C_PLAYER_LOGOUT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PlayerClient)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2C_PLAYER_LOGOUT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2C_PLAYER_LOGOUT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PlayerClient{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2C_PLAYER_LOGOUT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2C_PLAYER_LOGOUT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2C_PLAYER_LOGOUT END ----------------------------------------
