// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gopuppy.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		gopuppy.proto
		msgid.proto

	It has these top-level messages:
		AppInfo
		ClientID
		ClientProxy
		RpcCallArg
		RpcCallReply
		RpcHandler
		RpcHandlers
		PlayerClient
		SetDispatchArg
		NoPlayerRpcCallArg
		NoPlayerBroadcastArg
		BroadcastClientArg
		BroadcastClientFilter
		ClientSetFilterArg
		RestoreAgentArg
		TargetPlayer
		RmqMessage
		MqConsumerArg
		PlayerLoginDone
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BroadcastClientFilter_OpType int32

const (
	BroadcastClientFilter_EQ  BroadcastClientFilter_OpType = 0
	BroadcastClientFilter_NE  BroadcastClientFilter_OpType = 1
	BroadcastClientFilter_GT  BroadcastClientFilter_OpType = 2
	BroadcastClientFilter_LT  BroadcastClientFilter_OpType = 3
	BroadcastClientFilter_GTE BroadcastClientFilter_OpType = 4
	BroadcastClientFilter_LTE BroadcastClientFilter_OpType = 5
)

var BroadcastClientFilter_OpType_name = map[int32]string{
	0: "EQ",
	1: "NE",
	2: "GT",
	3: "LT",
	4: "GTE",
	5: "LTE",
}
var BroadcastClientFilter_OpType_value = map[string]int32{
	"EQ":  0,
	"NE":  1,
	"GT":  2,
	"LT":  3,
	"GTE": 4,
	"LTE": 5,
}

func (x BroadcastClientFilter_OpType) String() string {
	return proto.EnumName(BroadcastClientFilter_OpType_name, int32(x))
}
func (BroadcastClientFilter_OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGopuppy, []int{12, 0}
}

type AppInfo struct {
	AppID       uint32 `protobuf:"varint,1,opt,name=AppID,json=appID,proto3" json:"AppID,omitempty"`
	AppName     string `protobuf:"bytes,2,opt,name=AppName,json=appName,proto3" json:"AppName,omitempty"`
	Region      uint32 `protobuf:"varint,3,opt,name=Region,json=region,proto3" json:"Region,omitempty"`
	IsReconnect bool   `protobuf:"varint,4,opt,name=IsReconnect,json=isReconnect,proto3" json:"IsReconnect,omitempty"`
}

func (m *AppInfo) Reset()                    { *m = AppInfo{} }
func (m *AppInfo) String() string            { return proto.CompactTextString(m) }
func (*AppInfo) ProtoMessage()               {}
func (*AppInfo) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{0} }

func (m *AppInfo) GetAppID() uint32 {
	if m != nil {
		return m.AppID
	}
	return 0
}

func (m *AppInfo) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *AppInfo) GetRegion() uint32 {
	if m != nil {
		return m.Region
	}
	return 0
}

func (m *AppInfo) GetIsReconnect() bool {
	if m != nil {
		return m.IsReconnect
	}
	return false
}

type ClientID struct {
	GateID uint32 `protobuf:"varint,1,opt,name=GateID,json=gateID,proto3" json:"GateID,omitempty"`
	SesID  int64  `protobuf:"varint,2,opt,name=SesID,json=sesID,proto3" json:"SesID,omitempty"`
}

func (m *ClientID) Reset()                    { *m = ClientID{} }
func (m *ClientID) String() string            { return proto.CompactTextString(m) }
func (*ClientID) ProtoMessage()               {}
func (*ClientID) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{1} }

func (m *ClientID) GetGateID() uint32 {
	if m != nil {
		return m.GateID
	}
	return 0
}

func (m *ClientID) GetSesID() int64 {
	if m != nil {
		return m.SesID
	}
	return 0
}

type ClientProxy struct {
	GateID   uint32 `protobuf:"varint,1,opt,name=GateID,json=gateID,proto3" json:"GateID,omitempty"`
	ClientID uint64 `protobuf:"varint,2,opt,name=ClientID,json=clientID,proto3" json:"ClientID,omitempty"`
}

func (m *ClientProxy) Reset()                    { *m = ClientProxy{} }
func (m *ClientProxy) String() string            { return proto.CompactTextString(m) }
func (*ClientProxy) ProtoMessage()               {}
func (*ClientProxy) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{2} }

func (m *ClientProxy) GetGateID() uint32 {
	if m != nil {
		return m.GateID
	}
	return 0
}

func (m *ClientProxy) GetClientID() uint64 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

type RpcCallArg struct {
	Client  *PlayerClient `protobuf:"bytes,1,opt,name=Client,json=client" json:"Client,omitempty"`
	MsgID   int32         `protobuf:"varint,2,opt,name=MsgID,json=msgID,proto3" json:"MsgID,omitempty"`
	Payload []byte        `protobuf:"bytes,3,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *RpcCallArg) Reset()                    { *m = RpcCallArg{} }
func (m *RpcCallArg) String() string            { return proto.CompactTextString(m) }
func (*RpcCallArg) ProtoMessage()               {}
func (*RpcCallArg) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{3} }

func (m *RpcCallArg) GetClient() *PlayerClient {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *RpcCallArg) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *RpcCallArg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type RpcCallReply struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *RpcCallReply) Reset()                    { *m = RpcCallReply{} }
func (m *RpcCallReply) String() string            { return proto.CompactTextString(m) }
func (*RpcCallReply) ProtoMessage()               {}
func (*RpcCallReply) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{4} }

func (m *RpcCallReply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type RpcHandler struct {
	MsgID    int32 `protobuf:"varint,1,opt,name=MsgID,json=msgID,proto3" json:"MsgID,omitempty"`
	IsPlayer bool  `protobuf:"varint,2,opt,name=IsPlayer,json=isPlayer,proto3" json:"IsPlayer,omitempty"`
}

func (m *RpcHandler) Reset()                    { *m = RpcHandler{} }
func (m *RpcHandler) String() string            { return proto.CompactTextString(m) }
func (*RpcHandler) ProtoMessage()               {}
func (*RpcHandler) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{5} }

func (m *RpcHandler) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *RpcHandler) GetIsPlayer() bool {
	if m != nil {
		return m.IsPlayer
	}
	return false
}

type RpcHandlers struct {
	AppID    uint32        `protobuf:"varint,1,opt,name=AppID,json=appID,proto3" json:"AppID,omitempty"`
	AppName  string        `protobuf:"bytes,2,opt,name=AppName,json=appName,proto3" json:"AppName,omitempty"`
	Handlers []*RpcHandler `protobuf:"bytes,3,rep,name=Handlers,json=handlers" json:"Handlers,omitempty"`
}

func (m *RpcHandlers) Reset()                    { *m = RpcHandlers{} }
func (m *RpcHandlers) String() string            { return proto.CompactTextString(m) }
func (*RpcHandlers) ProtoMessage()               {}
func (*RpcHandlers) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{6} }

func (m *RpcHandlers) GetAppID() uint32 {
	if m != nil {
		return m.AppID
	}
	return 0
}

func (m *RpcHandlers) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *RpcHandlers) GetHandlers() []*RpcHandler {
	if m != nil {
		return m.Handlers
	}
	return nil
}

type PlayerClient struct {
	ClientID uint64 `protobuf:"varint,1,opt,name=ClientID,json=clientID,proto3" json:"ClientID,omitempty"`
	GateID   uint32 `protobuf:"varint,2,opt,name=GateID,json=gateID,proto3" json:"GateID,omitempty"`
	Uid      uint64 `protobuf:"varint,3,opt,name=Uid,json=uid,proto3" json:"Uid,omitempty"`
	Region   uint32 `protobuf:"varint,4,opt,name=Region,json=region,proto3" json:"Region,omitempty"`
	IP       string `protobuf:"bytes,5,opt,name=IP,json=iP,proto3" json:"IP,omitempty"`
}

func (m *PlayerClient) Reset()                    { *m = PlayerClient{} }
func (m *PlayerClient) String() string            { return proto.CompactTextString(m) }
func (*PlayerClient) ProtoMessage()               {}
func (*PlayerClient) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{7} }

func (m *PlayerClient) GetClientID() uint64 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *PlayerClient) GetGateID() uint32 {
	if m != nil {
		return m.GateID
	}
	return 0
}

func (m *PlayerClient) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PlayerClient) GetRegion() uint32 {
	if m != nil {
		return m.Region
	}
	return 0
}

func (m *PlayerClient) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type SetDispatchArg struct {
	Uid     uint64 `protobuf:"varint,1,opt,name=Uid,json=uid,proto3" json:"Uid,omitempty"`
	AppName string `protobuf:"bytes,2,opt,name=AppName,json=appName,proto3" json:"AppName,omitempty"`
	AppID   uint32 `protobuf:"varint,3,opt,name=AppID,json=appID,proto3" json:"AppID,omitempty"`
}

func (m *SetDispatchArg) Reset()                    { *m = SetDispatchArg{} }
func (m *SetDispatchArg) String() string            { return proto.CompactTextString(m) }
func (*SetDispatchArg) ProtoMessage()               {}
func (*SetDispatchArg) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{8} }

func (m *SetDispatchArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SetDispatchArg) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *SetDispatchArg) GetAppID() uint32 {
	if m != nil {
		return m.AppID
	}
	return 0
}

type NoPlayerRpcCallArg struct {
	AppName string `protobuf:"bytes,1,opt,name=AppName,json=appName,proto3" json:"AppName,omitempty"`
	AppID   uint32 `protobuf:"varint,2,opt,name=AppID,json=appID,proto3" json:"AppID,omitempty"`
	MsgID   int32  `protobuf:"varint,3,opt,name=MsgID,json=msgID,proto3" json:"MsgID,omitempty"`
	Payload []byte `protobuf:"bytes,4,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *NoPlayerRpcCallArg) Reset()                    { *m = NoPlayerRpcCallArg{} }
func (m *NoPlayerRpcCallArg) String() string            { return proto.CompactTextString(m) }
func (*NoPlayerRpcCallArg) ProtoMessage()               {}
func (*NoPlayerRpcCallArg) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{9} }

func (m *NoPlayerRpcCallArg) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *NoPlayerRpcCallArg) GetAppID() uint32 {
	if m != nil {
		return m.AppID
	}
	return 0
}

func (m *NoPlayerRpcCallArg) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NoPlayerRpcCallArg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type NoPlayerBroadcastArg struct {
	MsgID   int32  `protobuf:"varint,1,opt,name=MsgID,json=msgID,proto3" json:"MsgID,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *NoPlayerBroadcastArg) Reset()                    { *m = NoPlayerBroadcastArg{} }
func (m *NoPlayerBroadcastArg) String() string            { return proto.CompactTextString(m) }
func (*NoPlayerBroadcastArg) ProtoMessage()               {}
func (*NoPlayerBroadcastArg) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{10} }

func (m *NoPlayerBroadcastArg) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NoPlayerBroadcastArg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type BroadcastClientArg struct {
	MsgID   int32                  `protobuf:"varint,1,opt,name=MsgID,json=msgID,proto3" json:"MsgID,omitempty"`
	Payload []byte                 `protobuf:"bytes,2,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
	Filter  *BroadcastClientFilter `protobuf:"bytes,3,opt,name=Filter,json=filter" json:"Filter,omitempty"`
}

func (m *BroadcastClientArg) Reset()                    { *m = BroadcastClientArg{} }
func (m *BroadcastClientArg) String() string            { return proto.CompactTextString(m) }
func (*BroadcastClientArg) ProtoMessage()               {}
func (*BroadcastClientArg) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{11} }

func (m *BroadcastClientArg) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *BroadcastClientArg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BroadcastClientArg) GetFilter() *BroadcastClientFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type BroadcastClientFilter struct {
	OP  BroadcastClientFilter_OpType `protobuf:"varint,1,opt,name=OP,json=oP,proto3,enum=pb.BroadcastClientFilter_OpType" json:"OP,omitempty"`
	Key string                       `protobuf:"bytes,2,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	Val string                       `protobuf:"bytes,3,opt,name=Val,json=val,proto3" json:"Val,omitempty"`
}

func (m *BroadcastClientFilter) Reset()                    { *m = BroadcastClientFilter{} }
func (m *BroadcastClientFilter) String() string            { return proto.CompactTextString(m) }
func (*BroadcastClientFilter) ProtoMessage()               {}
func (*BroadcastClientFilter) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{12} }

func (m *BroadcastClientFilter) GetOP() BroadcastClientFilter_OpType {
	if m != nil {
		return m.OP
	}
	return BroadcastClientFilter_EQ
}

func (m *BroadcastClientFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *BroadcastClientFilter) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type ClientSetFilterArg struct {
	Uid      uint64                 `protobuf:"varint,1,opt,name=Uid,json=uid,proto3" json:"Uid,omitempty"`
	ClientID uint64                 `protobuf:"varint,2,opt,name=ClientID,json=clientID,proto3" json:"ClientID,omitempty"`
	Filter   *BroadcastClientFilter `protobuf:"bytes,3,opt,name=Filter,json=filter" json:"Filter,omitempty"`
}

func (m *ClientSetFilterArg) Reset()                    { *m = ClientSetFilterArg{} }
func (m *ClientSetFilterArg) String() string            { return proto.CompactTextString(m) }
func (*ClientSetFilterArg) ProtoMessage()               {}
func (*ClientSetFilterArg) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{13} }

func (m *ClientSetFilterArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ClientSetFilterArg) GetClientID() uint64 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *ClientSetFilterArg) GetFilter() *BroadcastClientFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type RestoreAgentArg struct {
	Clients []*PlayerClient `protobuf:"bytes,1,rep,name=Clients,json=clients" json:"Clients,omitempty"`
}

func (m *RestoreAgentArg) Reset()                    { *m = RestoreAgentArg{} }
func (m *RestoreAgentArg) String() string            { return proto.CompactTextString(m) }
func (*RestoreAgentArg) ProtoMessage()               {}
func (*RestoreAgentArg) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{14} }

func (m *RestoreAgentArg) GetClients() []*PlayerClient {
	if m != nil {
		return m.Clients
	}
	return nil
}

type TargetPlayer struct {
	Uid uint64 `protobuf:"varint,1,opt,name=Uid,json=uid,proto3" json:"Uid,omitempty"`
}

func (m *TargetPlayer) Reset()                    { *m = TargetPlayer{} }
func (m *TargetPlayer) String() string            { return proto.CompactTextString(m) }
func (*TargetPlayer) ProtoMessage()               {}
func (*TargetPlayer) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{15} }

func (m *TargetPlayer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type RmqMessage struct {
	Queue   string `protobuf:"bytes,1,opt,name=Queue,json=queue,proto3" json:"Queue,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *RmqMessage) Reset()                    { *m = RmqMessage{} }
func (m *RmqMessage) String() string            { return proto.CompactTextString(m) }
func (*RmqMessage) ProtoMessage()               {}
func (*RmqMessage) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{16} }

func (m *RmqMessage) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *RmqMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RmqMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type MqConsumerArg struct {
	Queue string `protobuf:"bytes,1,opt,name=Queue,json=queue,proto3" json:"Queue,omitempty"`
}

func (m *MqConsumerArg) Reset()                    { *m = MqConsumerArg{} }
func (m *MqConsumerArg) String() string            { return proto.CompactTextString(m) }
func (*MqConsumerArg) ProtoMessage()               {}
func (*MqConsumerArg) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{17} }

func (m *MqConsumerArg) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

type PlayerLoginDone struct {
	Client    *PlayerClient `protobuf:"bytes,1,opt,name=Client,json=client" json:"Client,omitempty"`
	BeMonitor bool          `protobuf:"varint,2,opt,name=BeMonitor,json=beMonitor,proto3" json:"BeMonitor,omitempty"`
}

func (m *PlayerLoginDone) Reset()                    { *m = PlayerLoginDone{} }
func (m *PlayerLoginDone) String() string            { return proto.CompactTextString(m) }
func (*PlayerLoginDone) ProtoMessage()               {}
func (*PlayerLoginDone) Descriptor() ([]byte, []int) { return fileDescriptorGopuppy, []int{18} }

func (m *PlayerLoginDone) GetClient() *PlayerClient {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *PlayerLoginDone) GetBeMonitor() bool {
	if m != nil {
		return m.BeMonitor
	}
	return false
}

func init() {
	proto.RegisterType((*AppInfo)(nil), "pb.AppInfo")
	proto.RegisterType((*ClientID)(nil), "pb.ClientID")
	proto.RegisterType((*ClientProxy)(nil), "pb.ClientProxy")
	proto.RegisterType((*RpcCallArg)(nil), "pb.RpcCallArg")
	proto.RegisterType((*RpcCallReply)(nil), "pb.RpcCallReply")
	proto.RegisterType((*RpcHandler)(nil), "pb.RpcHandler")
	proto.RegisterType((*RpcHandlers)(nil), "pb.RpcHandlers")
	proto.RegisterType((*PlayerClient)(nil), "pb.PlayerClient")
	proto.RegisterType((*SetDispatchArg)(nil), "pb.SetDispatchArg")
	proto.RegisterType((*NoPlayerRpcCallArg)(nil), "pb.NoPlayerRpcCallArg")
	proto.RegisterType((*NoPlayerBroadcastArg)(nil), "pb.NoPlayerBroadcastArg")
	proto.RegisterType((*BroadcastClientArg)(nil), "pb.BroadcastClientArg")
	proto.RegisterType((*BroadcastClientFilter)(nil), "pb.BroadcastClientFilter")
	proto.RegisterType((*ClientSetFilterArg)(nil), "pb.ClientSetFilterArg")
	proto.RegisterType((*RestoreAgentArg)(nil), "pb.RestoreAgentArg")
	proto.RegisterType((*TargetPlayer)(nil), "pb.TargetPlayer")
	proto.RegisterType((*RmqMessage)(nil), "pb.RmqMessage")
	proto.RegisterType((*MqConsumerArg)(nil), "pb.MqConsumerArg")
	proto.RegisterType((*PlayerLoginDone)(nil), "pb.PlayerLoginDone")
	proto.RegisterEnum("pb.BroadcastClientFilter_OpType", BroadcastClientFilter_OpType_name, BroadcastClientFilter_OpType_value)
}
func (m *AppInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.AppID))
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if m.Region != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Region))
	}
	if m.IsReconnect {
		dAtA[i] = 0x20
		i++
		if m.IsReconnect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ClientID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GateID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.GateID))
	}
	if m.SesID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.SesID))
	}
	return i, nil
}

func (m *ClientProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientProxy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GateID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.GateID))
	}
	if m.ClientID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.ClientID))
	}
	return i, nil
}

func (m *RpcCallArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcCallArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Client != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Client.Size()))
		n1, err := m.Client.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MsgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.MsgID))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *RpcCallReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcCallReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *RpcHandler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcHandler) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.MsgID))
	}
	if m.IsPlayer {
		dAtA[i] = 0x10
		i++
		if m.IsPlayer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RpcHandlers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcHandlers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.AppID))
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if len(m.Handlers) > 0 {
		for _, msg := range m.Handlers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGopuppy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerClient) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.ClientID))
	}
	if m.GateID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.GateID))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Uid))
	}
	if m.Region != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Region))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *SetDispatchArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDispatchArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Uid))
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if m.AppID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.AppID))
	}
	return i, nil
}

func (m *NoPlayerRpcCallArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoPlayerRpcCallArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if m.AppID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.AppID))
	}
	if m.MsgID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.MsgID))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *NoPlayerBroadcastArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoPlayerBroadcastArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.MsgID))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *BroadcastClientArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastClientArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.MsgID))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Filter != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Filter.Size()))
		n2, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *BroadcastClientFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastClientFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OP != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.OP))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Val) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	return i, nil
}

func (m *ClientSetFilterArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSetFilterArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Uid))
	}
	if m.ClientID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.ClientID))
	}
	if m.Filter != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Filter.Size()))
		n3, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RestoreAgentArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreAgentArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, msg := range m.Clients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGopuppy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TargetPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *RmqMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RmqMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Queue) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Type))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *MqConsumerArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MqConsumerArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Queue) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	return i, nil
}

func (m *PlayerLoginDone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerLoginDone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Client != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGopuppy(dAtA, i, uint64(m.Client.Size()))
		n4, err := m.Client.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.BeMonitor {
		dAtA[i] = 0x10
		i++
		if m.BeMonitor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintGopuppy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppInfo) Size() (n int) {
	var l int
	_ = l
	if m.AppID != 0 {
		n += 1 + sovGopuppy(uint64(m.AppID))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	if m.Region != 0 {
		n += 1 + sovGopuppy(uint64(m.Region))
	}
	if m.IsReconnect {
		n += 2
	}
	return n
}

func (m *ClientID) Size() (n int) {
	var l int
	_ = l
	if m.GateID != 0 {
		n += 1 + sovGopuppy(uint64(m.GateID))
	}
	if m.SesID != 0 {
		n += 1 + sovGopuppy(uint64(m.SesID))
	}
	return n
}

func (m *ClientProxy) Size() (n int) {
	var l int
	_ = l
	if m.GateID != 0 {
		n += 1 + sovGopuppy(uint64(m.GateID))
	}
	if m.ClientID != 0 {
		n += 1 + sovGopuppy(uint64(m.ClientID))
	}
	return n
}

func (m *RpcCallArg) Size() (n int) {
	var l int
	_ = l
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovGopuppy(uint64(l))
	}
	if m.MsgID != 0 {
		n += 1 + sovGopuppy(uint64(m.MsgID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *RpcCallReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *RpcHandler) Size() (n int) {
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovGopuppy(uint64(m.MsgID))
	}
	if m.IsPlayer {
		n += 2
	}
	return n
}

func (m *RpcHandlers) Size() (n int) {
	var l int
	_ = l
	if m.AppID != 0 {
		n += 1 + sovGopuppy(uint64(m.AppID))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	if len(m.Handlers) > 0 {
		for _, e := range m.Handlers {
			l = e.Size()
			n += 1 + l + sovGopuppy(uint64(l))
		}
	}
	return n
}

func (m *PlayerClient) Size() (n int) {
	var l int
	_ = l
	if m.ClientID != 0 {
		n += 1 + sovGopuppy(uint64(m.ClientID))
	}
	if m.GateID != 0 {
		n += 1 + sovGopuppy(uint64(m.GateID))
	}
	if m.Uid != 0 {
		n += 1 + sovGopuppy(uint64(m.Uid))
	}
	if m.Region != 0 {
		n += 1 + sovGopuppy(uint64(m.Region))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *SetDispatchArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovGopuppy(uint64(m.Uid))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	if m.AppID != 0 {
		n += 1 + sovGopuppy(uint64(m.AppID))
	}
	return n
}

func (m *NoPlayerRpcCallArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	if m.AppID != 0 {
		n += 1 + sovGopuppy(uint64(m.AppID))
	}
	if m.MsgID != 0 {
		n += 1 + sovGopuppy(uint64(m.MsgID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *NoPlayerBroadcastArg) Size() (n int) {
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovGopuppy(uint64(m.MsgID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *BroadcastClientArg) Size() (n int) {
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovGopuppy(uint64(m.MsgID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *BroadcastClientFilter) Size() (n int) {
	var l int
	_ = l
	if m.OP != 0 {
		n += 1 + sovGopuppy(uint64(m.OP))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *ClientSetFilterArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovGopuppy(uint64(m.Uid))
	}
	if m.ClientID != 0 {
		n += 1 + sovGopuppy(uint64(m.ClientID))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *RestoreAgentArg) Size() (n int) {
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovGopuppy(uint64(l))
		}
	}
	return n
}

func (m *TargetPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovGopuppy(uint64(m.Uid))
	}
	return n
}

func (m *RmqMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGopuppy(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *MqConsumerArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovGopuppy(uint64(l))
	}
	return n
}

func (m *PlayerLoginDone) Size() (n int) {
	var l int
	_ = l
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovGopuppy(uint64(l))
	}
	if m.BeMonitor {
		n += 2
	}
	return n
}

func sovGopuppy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGopuppy(x uint64) (n int) {
	return sovGopuppy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReconnect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReconnect = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateID", wireType)
			}
			m.GateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GateID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesID", wireType)
			}
			m.SesID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateID", wireType)
			}
			m.GateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GateID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			m.ClientID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcCallArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcCallArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcCallArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &PlayerClient{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcCallReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcCallReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcCallReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcHandler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcHandler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcHandler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPlayer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcHandlers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcHandlers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcHandlers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handlers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handlers = append(m.Handlers, &RpcHandler{})
			if err := m.Handlers[len(m.Handlers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			m.ClientID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateID", wireType)
			}
			m.GateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GateID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDispatchArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDispatchArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDispatchArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoPlayerRpcCallArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoPlayerRpcCallArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoPlayerRpcCallArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoPlayerBroadcastArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoPlayerBroadcastArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoPlayerBroadcastArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastClientArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastClientArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastClientArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &BroadcastClientFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastClientFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastClientFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastClientFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OP", wireType)
			}
			m.OP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OP |= (BroadcastClientFilter_OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSetFilterArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSetFilterArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSetFilterArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			m.ClientID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &BroadcastClientFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreAgentArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreAgentArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreAgentArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &PlayerClient{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RmqMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RmqMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RmqMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MqConsumerArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MqConsumerArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MqConsumerArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerLoginDone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLoginDone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLoginDone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGopuppy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &PlayerClient{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeMonitor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeMonitor = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGopuppy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGopuppy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGopuppy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGopuppy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGopuppy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGopuppy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGopuppy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGopuppy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGopuppy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGopuppy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gopuppy.proto", fileDescriptorGopuppy) }

var fileDescriptorGopuppy = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x6e, 0xda, 0x48,
	0x14, 0x8e, 0x7f, 0x31, 0x07, 0x42, 0x2c, 0x2b, 0xbb, 0xf2, 0x46, 0x2b, 0x84, 0x2c, 0xad, 0x84,
	0x72, 0x81, 0x76, 0xd9, 0x9b, 0xd5, 0x4a, 0xbb, 0x12, 0x09, 0x24, 0x8b, 0x36, 0x24, 0xce, 0x84,
	0x56, 0xea, 0xe5, 0x00, 0x13, 0xc7, 0xaa, 0xf1, 0x38, 0x1e, 0xd3, 0xd6, 0x52, 0x1f, 0xa4, 0xaf,
	0xd0, 0x37, 0xe9, 0x65, 0x1f, 0xa1, 0x4a, 0x5f, 0xa4, 0x9a, 0x19, 0x03, 0xa6, 0x81, 0x4a, 0xc9,
	0xd5, 0xf8, 0x8c, 0xcf, 0xf9, 0xbe, 0xe3, 0xef, 0x3b, 0x1c, 0x60, 0x3f, 0xa0, 0xc9, 0x22, 0x49,
	0xf2, 0x4e, 0x92, 0xd2, 0x8c, 0x3a, 0x6a, 0x32, 0xf1, 0x18, 0x54, 0x7a, 0x49, 0x32, 0x8c, 0x6f,
	0xa9, 0x73, 0x08, 0x06, 0x7f, 0xec, 0xbb, 0x4a, 0x4b, 0x69, 0xef, 0x23, 0x03, 0xf3, 0xc0, 0x71,
	0x45, 0xc2, 0x25, 0x9e, 0x13, 0x57, 0x6d, 0x29, 0xed, 0x2a, 0xaa, 0x60, 0x19, 0x3a, 0x3f, 0x83,
	0x89, 0x48, 0x10, 0xd2, 0xd8, 0xd5, 0x44, 0x81, 0x99, 0x8a, 0xc8, 0x69, 0x41, 0x6d, 0xc8, 0x10,
	0x99, 0xd2, 0x38, 0x26, 0xd3, 0xcc, 0xd5, 0x5b, 0x4a, 0xdb, 0x42, 0xb5, 0x70, 0x7d, 0xe5, 0xfd,
	0x05, 0xd6, 0x69, 0x14, 0x92, 0x38, 0x1b, 0xf6, 0x39, 0xca, 0x39, 0xce, 0xc8, 0x8a, 0xd6, 0x0c,
	0x44, 0xc4, 0xbb, 0xb9, 0x21, 0x6c, 0xd8, 0x17, 0xac, 0x1a, 0x32, 0x18, 0x0f, 0xbc, 0x1e, 0xd4,
	0x64, 0xa5, 0x9f, 0xd2, 0x77, 0xf9, 0xce, 0xe2, 0xa3, 0x35, 0x81, 0xa8, 0xd7, 0x91, 0x35, 0x2d,
	0x62, 0xef, 0x16, 0x00, 0x25, 0xd3, 0x53, 0x1c, 0x45, 0xbd, 0x34, 0x70, 0xda, 0x60, 0xca, 0x4c,
	0x81, 0x50, 0xeb, 0xda, 0x9d, 0x64, 0xd2, 0xf1, 0x23, 0x9c, 0x93, 0x54, 0xde, 0x23, 0x53, 0x56,
	0xf2, 0x86, 0x46, 0x2c, 0x28, 0x00, 0x0d, 0x64, 0xcc, 0x79, 0xc0, 0xe5, 0xf1, 0x71, 0x1e, 0x51,
	0x3c, 0x13, 0x2a, 0xd4, 0x51, 0x25, 0x91, 0xa1, 0xd7, 0x86, 0x7a, 0xc1, 0x83, 0x48, 0x12, 0xe5,
	0xe5, 0x4c, 0x65, 0x33, 0xf3, 0x5f, 0xd1, 0xd1, 0x7f, 0x38, 0x9e, 0x45, 0x24, 0x5d, 0xf3, 0x28,
	0x65, 0x9e, 0x23, 0xb0, 0x86, 0x4c, 0xf6, 0x25, 0x1a, 0xb0, 0x90, 0x15, 0x16, 0xb1, 0x17, 0x42,
	0x6d, 0x5d, 0xcf, 0x9e, 0xec, 0xe3, 0x31, 0x58, 0xcb, 0x5a, 0x57, 0x6b, 0x69, 0xed, 0x5a, 0xb7,
	0xc1, 0x45, 0x58, 0x43, 0x22, 0xeb, 0xae, 0x78, 0xef, 0xbd, 0x87, 0x7a, 0x59, 0x9c, 0x0d, 0xa1,
	0x95, 0x4d, 0xa1, 0x4b, 0xe6, 0xa8, 0x1b, 0xe6, 0xd8, 0xa0, 0xbd, 0x08, 0xa5, 0x5c, 0x3a, 0xd2,
	0x16, 0xe1, 0xac, 0x34, 0x49, 0xfa, 0xc6, 0x24, 0x35, 0x40, 0x1d, 0xfa, 0xae, 0x21, 0xda, 0x55,
	0x43, 0xdf, 0x43, 0xd0, 0xb8, 0x21, 0x59, 0x3f, 0x64, 0x09, 0xce, 0xa6, 0x77, 0xdc, 0xbe, 0x02,
	0x4b, 0x59, 0x63, 0xed, 0xfe, 0xce, 0x95, 0x2e, 0x5a, 0x49, 0x17, 0x2f, 0x03, 0xe7, 0x92, 0xca,
	0x6f, 0x2a, 0x8d, 0x45, 0x09, 0x45, 0xd9, 0x81, 0xa2, 0x96, 0xd5, 0x5d, 0x99, 0xa6, 0xed, 0x18,
	0x0e, 0x7d, 0xd3, 0xf2, 0x33, 0x38, 0x5c, 0xb2, 0x9e, 0xa4, 0x14, 0xcf, 0xa6, 0x98, 0x65, 0x9c,
	0x77, 0xbb, 0xf9, 0x25, 0x1c, 0x75, 0x13, 0xe7, 0x2d, 0x38, 0xab, 0x7a, 0x69, 0xc4, 0x33, 0x50,
	0x9c, 0x3f, 0xc0, 0x3c, 0x0b, 0xa3, 0x8c, 0xa4, 0xa2, 0xfd, 0x5a, 0xf7, 0x17, 0xee, 0xff, 0x77,
	0xb8, 0x32, 0x01, 0x99, 0xb7, 0xe2, 0xf4, 0x3e, 0x2a, 0xf0, 0xd3, 0xd6, 0x0c, 0xe7, 0x77, 0x50,
	0xaf, 0x7c, 0xc1, 0xdc, 0xe8, 0xb6, 0x76, 0x02, 0x75, 0xae, 0x92, 0x71, 0x9e, 0x10, 0xa4, 0x52,
	0x9f, 0x9b, 0xf8, 0x3f, 0xc9, 0x0b, 0xbb, 0xb4, 0xd7, 0x24, 0xe7, 0x37, 0x2f, 0x71, 0x24, 0xba,
	0xa9, 0x22, 0xed, 0x0d, 0x8e, 0xbc, 0xbf, 0xc1, 0x94, 0x15, 0x8e, 0x09, 0xea, 0xe0, 0xda, 0xde,
	0xe3, 0xe7, 0xe5, 0xc0, 0x56, 0xf8, 0x79, 0x3e, 0xb6, 0x55, 0x7e, 0x5e, 0x8c, 0x6d, 0xcd, 0xa9,
	0x80, 0x76, 0x3e, 0x1e, 0xd8, 0x3a, 0x7f, 0xb8, 0x18, 0x0f, 0x6c, 0xc3, 0x5b, 0x80, 0x23, 0xa9,
	0x6f, 0x48, 0xc1, 0xbe, 0x7d, 0x74, 0x7e, 0xb0, 0x35, 0x9e, 0x23, 0xd1, 0x3f, 0x70, 0x80, 0x08,
	0xcb, 0x68, 0x4a, 0x7a, 0x41, 0x61, 0xcc, 0x31, 0x54, 0x64, 0x2a, 0x73, 0x15, 0xf1, 0x4b, 0x7b,
	0xbc, 0x6e, 0x2a, 0x92, 0x92, 0x79, 0x2d, 0xa8, 0x8f, 0x71, 0x1a, 0x90, 0x4c, 0xbe, 0x7e, 0xdc,
	0xaf, 0xe7, 0x03, 0xa0, 0xf9, 0xfd, 0x88, 0x30, 0x86, 0x03, 0x31, 0x98, 0xd7, 0x0b, 0xb2, 0x58,
	0x0e, 0xac, 0x71, 0xcf, 0x03, 0xc7, 0x01, 0x9d, 0xab, 0x56, 0x2c, 0x2d, 0x3d, 0xe3, 0x0a, 0xee,
	0xde, 0x59, 0xbf, 0xc1, 0xfe, 0xe8, 0xfe, 0x94, 0xc6, 0x6c, 0x31, 0x97, 0x22, 0x6d, 0x05, 0xf5,
	0x5e, 0xc1, 0x81, 0x6c, 0xea, 0x82, 0x06, 0x61, 0xdc, 0xa7, 0x31, 0x79, 0xc2, 0x1e, 0xfd, 0x15,
	0xaa, 0x27, 0x64, 0x44, 0xe3, 0x30, 0xa3, 0xcb, 0x55, 0x56, 0x9d, 0x2c, 0x2f, 0x4e, 0xec, 0x4f,
	0x0f, 0x4d, 0xe5, 0xf3, 0x43, 0x53, 0xf9, 0xf2, 0xd0, 0x54, 0x3e, 0x7c, 0x6d, 0xee, 0x4d, 0x4c,
	0xf1, 0x67, 0xf5, 0xe7, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x6e, 0xf7, 0xcd, 0xbd, 0x06,
	0x00, 0x00,
}
