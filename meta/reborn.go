// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/proto/pb"
	"kinger/gopuppy/network/protoc"
)

//@ C2S_REFINE_CARD    req: RefineCardArg    resp: RefineCardReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_REFINE_CARD_Meta struct {
}

func (m *C2S_REFINE_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_REFINE_CARD
}

func (m *C2S_REFINE_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RefineCardArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REFINE_CARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_REFINE_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RefineCardArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_REFINE_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RefineCardReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REFINE_CARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_REFINE_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RefineCardReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_REFINE_CARD END ----------------------------------------

//@ C2S_REBORN    resp: RebornReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_REBORN_Meta struct {
}

func (m *C2S_REBORN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_REBORN
}

func (m *C2S_REBORN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_REBORN_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_REBORN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RebornReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REBORN_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_REBORN_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RebornReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_REBORN END ----------------------------------------

//@ C2S_BUY_REBORN_GOODS   req: BuyRebornGoodsArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_BUY_REBORN_GOODS_Meta struct {
}

func (m *C2S_BUY_REBORN_GOODS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_BUY_REBORN_GOODS
}

func (m *C2S_BUY_REBORN_GOODS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BuyRebornGoodsArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_BUY_REBORN_GOODS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_BUY_REBORN_GOODS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BuyRebornGoodsArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_BUY_REBORN_GOODS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_BUY_REBORN_GOODS_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_BUY_REBORN_GOODS END ----------------------------------------

//@ C2S_FETCH_REBORN_DATA    resp: RebornData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_REBORN_DATA_Meta struct {
}

func (m *C2S_FETCH_REBORN_DATA_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_REBORN_DATA
}

func (m *C2S_FETCH_REBORN_DATA_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_REBORN_DATA_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_REBORN_DATA_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RebornData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_REBORN_DATA_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_REBORN_DATA_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RebornData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_REBORN_DATA END ----------------------------------------

