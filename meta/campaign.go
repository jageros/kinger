// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/proto/pb"
)

//@ C2S_FETCH_CAMPAIGN_INFO    resp: CampaignInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CAMPAIGN_INFO_Meta struct {
}

func (m *C2S_FETCH_CAMPAIGN_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CAMPAIGN_INFO
}

func (m *C2S_FETCH_CAMPAIGN_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_CAMPAIGN_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_CAMPAIGN_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CAMPAIGN_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CAMPAIGN_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CAMPAIGN_INFO END ----------------------------------------

//@ C2S_CREATE_COUNTRY    req: CreateCountryArg    resp: ApplyCreateCountryData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CREATE_COUNTRY_Meta struct {
}

func (m *C2S_CREATE_COUNTRY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CREATE_COUNTRY
}

func (m *C2S_CREATE_COUNTRY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CreateCountryArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CREATE_COUNTRY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CREATE_COUNTRY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CreateCountryArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CREATE_COUNTRY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ApplyCreateCountryData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CREATE_COUNTRY_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_CREATE_COUNTRY_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ApplyCreateCountryData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_CREATE_COUNTRY END ----------------------------------------

//@ C2S_SETTLE_CITY    req: TargetCity    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SETTLE_CITY_Meta struct {
}

func (m *C2S_SETTLE_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SETTLE_CITY
}

func (m *C2S_SETTLE_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCity)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SETTLE_CITY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SETTLE_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCity{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SETTLE_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SETTLE_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_SETTLE_CITY END ----------------------------------------

//@ C2S_FETCH_CITY_DATA    req: TargetCity    resp: CityData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CITY_DATA_Meta struct {
}

func (m *C2S_FETCH_CITY_DATA_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CITY_DATA
}

func (m *C2S_FETCH_CITY_DATA_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCity)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_DATA_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_CITY_DATA_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCity{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_CITY_DATA_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CityData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_DATA_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CITY_DATA_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CityData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CITY_DATA END ----------------------------------------

//@ C2S_FETCH_APPLY_CREATE_COUNTRY_INFO    req: TargetCity    resp: ApplyCreateCountryData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_APPLY_CREATE_COUNTRY_INFO_Meta struct {
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_APPLY_CREATE_COUNTRY_INFO
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCity)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_APPLY_CREATE_COUNTRY_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCity{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ApplyCreateCountryData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_APPLY_CREATE_COUNTRY_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ApplyCreateCountryData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_APPLY_CREATE_COUNTRY_INFO END ----------------------------------------

//@ C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS    req: FetchApplyCreateCountryPlayersArg    resp: ApplyCreateCountryPlayers
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS_Meta struct {
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchApplyCreateCountryPlayersArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchApplyCreateCountryPlayersArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ApplyCreateCountryPlayers)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ApplyCreateCountryPlayers{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_APPLY_CREATE_COUNTRY_PLAYERS END ----------------------------------------

//@ C2S_FETCH_CAMPAIGN_MISSION_INFO    req: TargetCity    resp: CampaignMissionInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CAMPAIGN_MISSION_INFO_Meta struct {
}

func (m *C2S_FETCH_CAMPAIGN_MISSION_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CAMPAIGN_MISSION_INFO
}

func (m *C2S_FETCH_CAMPAIGN_MISSION_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCity)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CAMPAIGN_MISSION_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_CAMPAIGN_MISSION_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCity{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_CAMPAIGN_MISSION_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignMissionInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CAMPAIGN_MISSION_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CAMPAIGN_MISSION_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignMissionInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CAMPAIGN_MISSION_INFO END ----------------------------------------

//@ C2S_ACCEPT_CAMPAIGN_MISSION    req: AcceptCampaignMissionArg    resp: AcceptCampaignMissionReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ACCEPT_CAMPAIGN_MISSION_Meta struct {
}

func (m *C2S_ACCEPT_CAMPAIGN_MISSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ACCEPT_CAMPAIGN_MISSION
}

func (m *C2S_ACCEPT_CAMPAIGN_MISSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AcceptCampaignMissionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACCEPT_CAMPAIGN_MISSION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_ACCEPT_CAMPAIGN_MISSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AcceptCampaignMissionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_ACCEPT_CAMPAIGN_MISSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AcceptCampaignMissionReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACCEPT_CAMPAIGN_MISSION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_ACCEPT_CAMPAIGN_MISSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AcceptCampaignMissionReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_ACCEPT_CAMPAIGN_MISSION END ----------------------------------------

//@ C2S_CANCEL_CAMPAIGN_MISSION    resp: CampaignMissionInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CANCEL_CAMPAIGN_MISSION_Meta struct {
}

func (m *C2S_CANCEL_CAMPAIGN_MISSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CANCEL_CAMPAIGN_MISSION
}

func (m *C2S_CANCEL_CAMPAIGN_MISSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CANCEL_CAMPAIGN_MISSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_CANCEL_CAMPAIGN_MISSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignMissionInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CANCEL_CAMPAIGN_MISSION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_CANCEL_CAMPAIGN_MISSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignMissionInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_CANCEL_CAMPAIGN_MISSION END ----------------------------------------

//@ C2S_GET_CAMPAIGN_MISSION_REWARD    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GET_CAMPAIGN_MISSION_REWARD_Meta struct {
}

func (m *C2S_GET_CAMPAIGN_MISSION_REWARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GET_CAMPAIGN_MISSION_REWARD
}

func (m *C2S_GET_CAMPAIGN_MISSION_REWARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GET_CAMPAIGN_MISSION_REWARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_GET_CAMPAIGN_MISSION_REWARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GET_CAMPAIGN_MISSION_REWARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_GET_CAMPAIGN_MISSION_REWARD END ----------------------------------------

//@ C2S_CAMPAIGN_PUBLISH_MISSION    req: CampaignPublishMissionArg    resp: CampaignPublishMissionReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CAMPAIGN_PUBLISH_MISSION_Meta struct {
}

func (m *C2S_CAMPAIGN_PUBLISH_MISSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CAMPAIGN_PUBLISH_MISSION
}

func (m *C2S_CAMPAIGN_PUBLISH_MISSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignPublishMissionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CAMPAIGN_PUBLISH_MISSION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CAMPAIGN_PUBLISH_MISSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignPublishMissionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CAMPAIGN_PUBLISH_MISSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignPublishMissionReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CAMPAIGN_PUBLISH_MISSION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_CAMPAIGN_PUBLISH_MISSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignPublishMissionReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_CAMPAIGN_PUBLISH_MISSION END ----------------------------------------

//@ C2S_FETCH_CITY_PLAYERS    req: FetchCityPlayersArg    resp: CampaignPlayerList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CITY_PLAYERS_Meta struct {
}

func (m *C2S_FETCH_CITY_PLAYERS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CITY_PLAYERS
}

func (m *C2S_FETCH_CITY_PLAYERS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchCityPlayersArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_PLAYERS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_CITY_PLAYERS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchCityPlayersArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_CITY_PLAYERS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignPlayerList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_PLAYERS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CITY_PLAYERS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignPlayerList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CITY_PLAYERS END ----------------------------------------

//@ C2S_FETCH_IN_CITY_PLAYERS    req: FetchCityPlayersArg    resp: CampaignPlayerList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_IN_CITY_PLAYERS_Meta struct {
}

func (m *C2S_FETCH_IN_CITY_PLAYERS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_IN_CITY_PLAYERS
}

func (m *C2S_FETCH_IN_CITY_PLAYERS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchCityPlayersArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_IN_CITY_PLAYERS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_IN_CITY_PLAYERS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchCityPlayersArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_IN_CITY_PLAYERS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignPlayerList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_IN_CITY_PLAYERS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_IN_CITY_PLAYERS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignPlayerList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_IN_CITY_PLAYERS END ----------------------------------------

//@ C2S_SET_FORAGE_PRICE    req: SetForagePriceArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SET_FORAGE_PRICE_Meta struct {
}

func (m *C2S_SET_FORAGE_PRICE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SET_FORAGE_PRICE
}

func (m *C2S_SET_FORAGE_PRICE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SetForagePriceArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SET_FORAGE_PRICE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SET_FORAGE_PRICE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SetForagePriceArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SET_FORAGE_PRICE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SET_FORAGE_PRICE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_SET_FORAGE_PRICE END ----------------------------------------

//@ C2S_FETCH_FORAGE_PRICE    resp: FetchForagePriceReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_FORAGE_PRICE_Meta struct {
}

func (m *C2S_FETCH_FORAGE_PRICE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_FORAGE_PRICE
}

func (m *C2S_FETCH_FORAGE_PRICE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_FORAGE_PRICE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_FORAGE_PRICE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FetchForagePriceReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_FORAGE_PRICE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_FORAGE_PRICE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FetchForagePriceReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_FORAGE_PRICE END ----------------------------------------

//@ C2S_FETCH_CAMPAIGN_NOTICE    resp: CampaignNoticeInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CAMPAIGN_NOTICE_Meta struct {
}

func (m *C2S_FETCH_CAMPAIGN_NOTICE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CAMPAIGN_NOTICE
}

func (m *C2S_FETCH_CAMPAIGN_NOTICE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_CAMPAIGN_NOTICE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_CAMPAIGN_NOTICE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignNoticeInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CAMPAIGN_NOTICE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CAMPAIGN_NOTICE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignNoticeInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CAMPAIGN_NOTICE END ----------------------------------------

//@ C2S_FETCH_ALL_CITY_PLAYER_AMOUNT    resp: AllCityPlayerAmount
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_ALL_CITY_PLAYER_AMOUNT_Meta struct {
}

func (m *C2S_FETCH_ALL_CITY_PLAYER_AMOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_ALL_CITY_PLAYER_AMOUNT
}

func (m *C2S_FETCH_ALL_CITY_PLAYER_AMOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_ALL_CITY_PLAYER_AMOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_ALL_CITY_PLAYER_AMOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AllCityPlayerAmount)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_ALL_CITY_PLAYER_AMOUNT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_ALL_CITY_PLAYER_AMOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AllCityPlayerAmount{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_ALL_CITY_PLAYER_AMOUNT END ----------------------------------------

//@ C2S_FETCH_COUNTRY_JOB_PLAYERS    resp: CampaignPlayerList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_COUNTRY_JOB_PLAYERS_Meta struct {
}

func (m *C2S_FETCH_COUNTRY_JOB_PLAYERS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_COUNTRY_JOB_PLAYERS
}

func (m *C2S_FETCH_COUNTRY_JOB_PLAYERS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_COUNTRY_JOB_PLAYERS_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_COUNTRY_JOB_PLAYERS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignPlayerList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_COUNTRY_JOB_PLAYERS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_COUNTRY_JOB_PLAYERS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignPlayerList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_COUNTRY_JOB_PLAYERS END ----------------------------------------

//@ C2S_FETCH_COUNTRY_PLAYERS    req: FetchCountryPlayersArg    resp: CampaignPlayerList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_COUNTRY_PLAYERS_Meta struct {
}

func (m *C2S_FETCH_COUNTRY_PLAYERS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_COUNTRY_PLAYERS
}

func (m *C2S_FETCH_COUNTRY_PLAYERS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchCountryPlayersArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_COUNTRY_PLAYERS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_COUNTRY_PLAYERS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchCountryPlayersArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_COUNTRY_PLAYERS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignPlayerList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_COUNTRY_PLAYERS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_COUNTRY_PLAYERS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignPlayerList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_COUNTRY_PLAYERS END ----------------------------------------

//@ C2S_APPOINT_JOB    req: AppointJobArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_APPOINT_JOB_Meta struct {
}

func (m *C2S_APPOINT_JOB_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_APPOINT_JOB
}

func (m *C2S_APPOINT_JOB_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AppointJobArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_APPOINT_JOB_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_APPOINT_JOB_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AppointJobArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_APPOINT_JOB_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_APPOINT_JOB_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_APPOINT_JOB END ----------------------------------------

//@ C2S_RECALL_JOB    req: RecallJobArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_RECALL_JOB_Meta struct {
}

func (m *C2S_RECALL_JOB_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_RECALL_JOB
}

func (m *C2S_RECALL_JOB_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RecallJobArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_RECALL_JOB_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_RECALL_JOB_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RecallJobArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_RECALL_JOB_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_RECALL_JOB_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_RECALL_JOB END ----------------------------------------

//@ C2S_LEAVE_CAMPAIGN_SCENE
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_LEAVE_CAMPAIGN_SCENE_Meta struct {
}

func (m *C2S_LEAVE_CAMPAIGN_SCENE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_LEAVE_CAMPAIGN_SCENE
}

func (m *C2S_LEAVE_CAMPAIGN_SCENE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_LEAVE_CAMPAIGN_SCENE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_LEAVE_CAMPAIGN_SCENE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_LEAVE_CAMPAIGN_SCENE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_LEAVE_CAMPAIGN_SCENE END ----------------------------------------

//@ C2S_PATROL_CITY    req: TargetCity    resp: PatrolCityReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_PATROL_CITY_Meta struct {
}

func (m *C2S_PATROL_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_PATROL_CITY
}

func (m *C2S_PATROL_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCity)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_PATROL_CITY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_PATROL_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCity{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_PATROL_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.PatrolCityReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_PATROL_CITY_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_PATROL_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.PatrolCityReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_PATROL_CITY END ----------------------------------------

//@ C2S_CITY_CAPITAL_INJECTION    req: CityCapitalInjectionArg    resp: CityCapitalInjectionReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CITY_CAPITAL_INJECTION_Meta struct {
}

func (m *C2S_CITY_CAPITAL_INJECTION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CITY_CAPITAL_INJECTION
}

func (m *C2S_CITY_CAPITAL_INJECTION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CityCapitalInjectionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CITY_CAPITAL_INJECTION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CITY_CAPITAL_INJECTION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CityCapitalInjectionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CITY_CAPITAL_INJECTION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CityCapitalInjectionReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CITY_CAPITAL_INJECTION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_CITY_CAPITAL_INJECTION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CityCapitalInjectionReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_CITY_CAPITAL_INJECTION END ----------------------------------------

//@ C2S_BEGIN_ATTACK_CITY    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_BEGIN_ATTACK_CITY_Meta struct {
}

func (m *C2S_BEGIN_ATTACK_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_BEGIN_ATTACK_CITY
}

func (m *C2S_BEGIN_ATTACK_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_BEGIN_ATTACK_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_BEGIN_ATTACK_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_BEGIN_ATTACK_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_BEGIN_ATTACK_CITY END ----------------------------------------

//@ C2S_MOVE_CITY    req: MoveCityArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_MOVE_CITY_Meta struct {
}

func (m *C2S_MOVE_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_MOVE_CITY
}

func (m *C2S_MOVE_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MoveCityArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_MOVE_CITY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_MOVE_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MoveCityArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_MOVE_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_MOVE_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_MOVE_CITY END ----------------------------------------

//@ C2S_QUIT_COUNTRY    req: CampaignTargetPlayer    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_QUIT_COUNTRY_Meta struct {
}

func (m *C2S_QUIT_COUNTRY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_QUIT_COUNTRY
}

func (m *C2S_QUIT_COUNTRY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignTargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_QUIT_COUNTRY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_QUIT_COUNTRY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignTargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_QUIT_COUNTRY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_QUIT_COUNTRY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_QUIT_COUNTRY END ----------------------------------------

//@ C2S_KICK_OUT_CITY_PLAYER    req: CampaignTargetPlayer    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_KICK_OUT_CITY_PLAYER_Meta struct {
}

func (m *C2S_KICK_OUT_CITY_PLAYER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_KICK_OUT_CITY_PLAYER
}

func (m *C2S_KICK_OUT_CITY_PLAYER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignTargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_KICK_OUT_CITY_PLAYER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_KICK_OUT_CITY_PLAYER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignTargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_KICK_OUT_CITY_PLAYER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_KICK_OUT_CITY_PLAYER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_KICK_OUT_CITY_PLAYER END ----------------------------------------

//@ C2S_CANCEL_KICK_OUT_CITY_PLAYER   req: CampaignTargetPlayer    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CANCEL_KICK_OUT_CITY_PLAYER_Meta struct {
}

func (m *C2S_CANCEL_KICK_OUT_CITY_PLAYER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CANCEL_KICK_OUT_CITY_PLAYER
}

func (m *C2S_CANCEL_KICK_OUT_CITY_PLAYER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignTargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CANCEL_KICK_OUT_CITY_PLAYER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CANCEL_KICK_OUT_CITY_PLAYER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignTargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CANCEL_KICK_OUT_CITY_PLAYER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CANCEL_KICK_OUT_CITY_PLAYER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_CANCEL_KICK_OUT_CITY_PLAYER END ----------------------------------------

//@ C2S_FETCH_AUTOCEPHALY_INFO    resp: AutocephalyInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_AUTOCEPHALY_INFO_Meta struct {
}

func (m *C2S_FETCH_AUTOCEPHALY_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_AUTOCEPHALY_INFO
}

func (m *C2S_FETCH_AUTOCEPHALY_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_AUTOCEPHALY_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_AUTOCEPHALY_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AutocephalyInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_AUTOCEPHALY_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_AUTOCEPHALY_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AutocephalyInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_AUTOCEPHALY_INFO END ----------------------------------------

//@ C2S_AUTOCEPHALY    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_AUTOCEPHALY_Meta struct {
}

func (m *C2S_AUTOCEPHALY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_AUTOCEPHALY
}

func (m *C2S_AUTOCEPHALY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_AUTOCEPHALY_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_AUTOCEPHALY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_AUTOCEPHALY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_AUTOCEPHALY END ----------------------------------------

//@ C2S_VOTE_AUTOCEPHALY    req: VoteAutocephalyArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_VOTE_AUTOCEPHALY_Meta struct {
}

func (m *C2S_VOTE_AUTOCEPHALY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_VOTE_AUTOCEPHALY
}

func (m *C2S_VOTE_AUTOCEPHALY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.VoteAutocephalyArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_VOTE_AUTOCEPHALY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_VOTE_AUTOCEPHALY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.VoteAutocephalyArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_VOTE_AUTOCEPHALY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_VOTE_AUTOCEPHALY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_VOTE_AUTOCEPHALY END ----------------------------------------

//@ C2S_ACC_DEF_CITY_LOSE_LOADING    resp: AccDefCityLoseLoadingReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ACC_DEF_CITY_LOSE_LOADING_Meta struct {
}

func (m *C2S_ACC_DEF_CITY_LOSE_LOADING_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ACC_DEF_CITY_LOSE_LOADING
}

func (m *C2S_ACC_DEF_CITY_LOSE_LOADING_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_ACC_DEF_CITY_LOSE_LOADING_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_ACC_DEF_CITY_LOSE_LOADING_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccDefCityLoseLoadingReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACC_DEF_CITY_LOSE_LOADING_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_ACC_DEF_CITY_LOSE_LOADING_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccDefCityLoseLoadingReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_ACC_DEF_CITY_LOSE_LOADING END ----------------------------------------

//@ C2S_ESCAPED_FROM_JAIL    resp: TargetCity
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ESCAPED_FROM_JAIL_Meta struct {
}

func (m *C2S_ESCAPED_FROM_JAIL_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ESCAPED_FROM_JAIL
}

func (m *C2S_ESCAPED_FROM_JAIL_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_ESCAPED_FROM_JAIL_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_ESCAPED_FROM_JAIL_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.TargetCity)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ESCAPED_FROM_JAIL_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_ESCAPED_FROM_JAIL_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.TargetCity{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_ESCAPED_FROM_JAIL END ----------------------------------------

//@ C2S_CAMPAIGN_SURRENDER    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CAMPAIGN_SURRENDER_Meta struct {
}

func (m *C2S_CAMPAIGN_SURRENDER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CAMPAIGN_SURRENDER
}

func (m *C2S_CAMPAIGN_SURRENDER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CAMPAIGN_SURRENDER_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_CAMPAIGN_SURRENDER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CAMPAIGN_SURRENDER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_CAMPAIGN_SURRENDER END ----------------------------------------

//@ C2S_COUNTRY_MODIFY_NAME    req: CountryModifyNameArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_COUNTRY_MODIFY_NAME_Meta struct {
}

func (m *C2S_COUNTRY_MODIFY_NAME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_COUNTRY_MODIFY_NAME
}

func (m *C2S_COUNTRY_MODIFY_NAME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CountryModifyNameArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_COUNTRY_MODIFY_NAME_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_COUNTRY_MODIFY_NAME_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CountryModifyNameArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_COUNTRY_MODIFY_NAME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_COUNTRY_MODIFY_NAME_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_COUNTRY_MODIFY_NAME END ----------------------------------------

//@ C2S_CANCEL_PUBLISH_MISSION    req: CancelPublishMissionArg    resp: CancelPublishMissionReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CANCEL_PUBLISH_MISSION_Meta struct {
}

func (m *C2S_CANCEL_PUBLISH_MISSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CANCEL_PUBLISH_MISSION
}

func (m *C2S_CANCEL_PUBLISH_MISSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CancelPublishMissionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CANCEL_PUBLISH_MISSION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CANCEL_PUBLISH_MISSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CancelPublishMissionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CANCEL_PUBLISH_MISSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CancelPublishMissionReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CANCEL_PUBLISH_MISSION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_CANCEL_PUBLISH_MISSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CancelPublishMissionReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_CANCEL_PUBLISH_MISSION END ----------------------------------------

//@ C2S_COUNTRY_MODIFY_FLAG    req: CountryModifyFlagArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_COUNTRY_MODIFY_FLAG_Meta struct {
}

func (m *C2S_COUNTRY_MODIFY_FLAG_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_COUNTRY_MODIFY_FLAG
}

func (m *C2S_COUNTRY_MODIFY_FLAG_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CountryModifyFlagArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_COUNTRY_MODIFY_FLAG_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_COUNTRY_MODIFY_FLAG_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CountryModifyFlagArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_COUNTRY_MODIFY_FLAG_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_COUNTRY_MODIFY_FLAG_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_COUNTRY_MODIFY_FLAG END ----------------------------------------

//@ C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY    req: FetchCityCapitalInjectionArg    resp: CityCapitalInjectionHistory
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY_Meta struct {
}

func (m *C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY
}

func (m *C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchCityCapitalInjectionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchCityCapitalInjectionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CityCapitalInjectionHistory)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CityCapitalInjectionHistory{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CITY_CAPITAL_INJECTION_HISTORY END ----------------------------------------

//@ C2S_UPDATE_CITY_NOTICE    req: CityNotice
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_CITY_NOTICE_Meta struct {
}

func (m *C2S_UPDATE_CITY_NOTICE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_CITY_NOTICE
}

func (m *C2S_UPDATE_CITY_NOTICE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CityNotice)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_CITY_NOTICE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_CITY_NOTICE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CityNotice{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_CITY_NOTICE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_CITY_NOTICE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_CITY_NOTICE END ----------------------------------------

//@ C2S_FETCH_CITY_NOTICE    req: TargetCity    resp: CityNotice
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CITY_NOTICE_Meta struct {
}

func (m *C2S_FETCH_CITY_NOTICE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CITY_NOTICE
}

func (m *C2S_FETCH_CITY_NOTICE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCity)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_NOTICE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_CITY_NOTICE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCity{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_CITY_NOTICE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CityNotice)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_NOTICE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CITY_NOTICE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CityNotice{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CITY_NOTICE END ----------------------------------------

//@ C2S_PUBLISH_MILITARY_ORDERS    req: PublishMilitaryOrderArg    resp: PublishMilitaryOrderReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_PUBLISH_MILITARY_ORDERS_Meta struct {
}

func (m *C2S_PUBLISH_MILITARY_ORDERS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_PUBLISH_MILITARY_ORDERS
}

func (m *C2S_PUBLISH_MILITARY_ORDERS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PublishMilitaryOrderArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_PUBLISH_MILITARY_ORDERS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_PUBLISH_MILITARY_ORDERS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PublishMilitaryOrderArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_PUBLISH_MILITARY_ORDERS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.PublishMilitaryOrderReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_PUBLISH_MILITARY_ORDERS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_PUBLISH_MILITARY_ORDERS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.PublishMilitaryOrderReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_PUBLISH_MILITARY_ORDERS END ----------------------------------------

//@ C2S_FETCH_MILITARY_ORDERS    req: TargetCity    resp: MilitaryOrderInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_MILITARY_ORDERS_Meta struct {
}

func (m *C2S_FETCH_MILITARY_ORDERS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_MILITARY_ORDERS
}

func (m *C2S_FETCH_MILITARY_ORDERS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCity)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_MILITARY_ORDERS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_MILITARY_ORDERS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCity{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_MILITARY_ORDERS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.MilitaryOrderInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_MILITARY_ORDERS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_MILITARY_ORDERS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.MilitaryOrderInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_MILITARY_ORDERS END ----------------------------------------

//@ C2S_ACCEPT_MILITARY_ORDER    req: AcceptMilitaryOrderArg    resp: AcceptMilitaryOrderReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ACCEPT_MILITARY_ORDER_Meta struct {
}

func (m *C2S_ACCEPT_MILITARY_ORDER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ACCEPT_MILITARY_ORDER
}

func (m *C2S_ACCEPT_MILITARY_ORDER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AcceptMilitaryOrderArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACCEPT_MILITARY_ORDER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_ACCEPT_MILITARY_ORDER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AcceptMilitaryOrderArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_ACCEPT_MILITARY_ORDER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AcceptMilitaryOrderReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACCEPT_MILITARY_ORDER_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_ACCEPT_MILITARY_ORDER_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AcceptMilitaryOrderReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_ACCEPT_MILITARY_ORDER END ----------------------------------------

//@ C2S_CANCEL_MILITARY_ORDER    req: TargetMilitaryOrder    resp: CancelMilitaryOrderReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CANCEL_MILITARY_ORDER_Meta struct {
}

func (m *C2S_CANCEL_MILITARY_ORDER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CANCEL_MILITARY_ORDER
}

func (m *C2S_CANCEL_MILITARY_ORDER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetMilitaryOrder)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CANCEL_MILITARY_ORDER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CANCEL_MILITARY_ORDER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetMilitaryOrder{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CANCEL_MILITARY_ORDER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CancelMilitaryOrderReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CANCEL_MILITARY_ORDER_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_CANCEL_MILITARY_ORDER_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CancelMilitaryOrderReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_CANCEL_MILITARY_ORDER END ----------------------------------------

//@ C2S_DEF_CITY    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_DEF_CITY_Meta struct {
}

func (m *C2S_DEF_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_DEF_CITY
}

func (m *C2S_DEF_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_DEF_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_DEF_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_DEF_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_DEF_CITY END ----------------------------------------

//@ C2S_CANCEL_DEF_CITY    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CANCEL_DEF_CITY_Meta struct {
}

func (m *C2S_CANCEL_DEF_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CANCEL_DEF_CITY
}

func (m *C2S_CANCEL_DEF_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CANCEL_DEF_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_CANCEL_DEF_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CANCEL_DEF_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_CANCEL_DEF_CITY END ----------------------------------------

//@ C2S_MY_TEAM_MARCH    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_MY_TEAM_MARCH_Meta struct {
}

func (m *C2S_MY_TEAM_MARCH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_MY_TEAM_MARCH
}

func (m *C2S_MY_TEAM_MARCH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_MY_TEAM_MARCH_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_MY_TEAM_MARCH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_MY_TEAM_MARCH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_MY_TEAM_MARCH END ----------------------------------------

//@ C2S_MY_TEAM_RETREAT    resp: TeamRetreat
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_MY_TEAM_RETREAT_Meta struct {
}

func (m *C2S_MY_TEAM_RETREAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_MY_TEAM_RETREAT
}

func (m *C2S_MY_TEAM_RETREAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_MY_TEAM_RETREAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_MY_TEAM_RETREAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.TeamRetreat)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_MY_TEAM_RETREAT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_MY_TEAM_RETREAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.TeamRetreat{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_MY_TEAM_RETREAT END ----------------------------------------

//@ C2S_CAMPAIGN_BACK_CITY    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CAMPAIGN_BACK_CITY_Meta struct {
}

func (m *C2S_CAMPAIGN_BACK_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CAMPAIGN_BACK_CITY
}

func (m *C2S_CAMPAIGN_BACK_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CAMPAIGN_BACK_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_CAMPAIGN_BACK_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CAMPAIGN_BACK_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_CAMPAIGN_BACK_CITY END ----------------------------------------

//@ C2S_FETCH_CITY_CAPTIVES    req: FetchCityPlayersArg    resp: CampaignPlayerList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CITY_CAPTIVES_Meta struct {
}

func (m *C2S_FETCH_CITY_CAPTIVES_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CITY_CAPTIVES
}

func (m *C2S_FETCH_CITY_CAPTIVES_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchCityPlayersArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_CAPTIVES_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_CITY_CAPTIVES_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchCityPlayersArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_CITY_CAPTIVES_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignPlayerList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CITY_CAPTIVES_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CITY_CAPTIVES_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignPlayerList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CITY_CAPTIVES END ----------------------------------------

//@ C2S_SURRENDER_CITY    req: SurrenderCityArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SURRENDER_CITY_Meta struct {
}

func (m *C2S_SURRENDER_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SURRENDER_CITY
}

func (m *C2S_SURRENDER_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SurrenderCityArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SURRENDER_CITY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SURRENDER_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SurrenderCityArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SURRENDER_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SURRENDER_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_SURRENDER_CITY END ----------------------------------------

//@ C2S_CAMPAIGN_BUY_GOODS    req: CampaignBuyGoodsArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CAMPAIGN_BUY_GOODS_Meta struct {
}

func (m *C2S_CAMPAIGN_BUY_GOODS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CAMPAIGN_BUY_GOODS
}

func (m *C2S_CAMPAIGN_BUY_GOODS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignBuyGoodsArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CAMPAIGN_BUY_GOODS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CAMPAIGN_BUY_GOODS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignBuyGoodsArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CAMPAIGN_BUY_GOODS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CAMPAIGN_BUY_GOODS_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_CAMPAIGN_BUY_GOODS END ----------------------------------------

//@ C2S_FETCH_CONTRIBUTION    resp: ContributionReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CONTRIBUTION_Meta struct {
}

func (m *C2S_FETCH_CONTRIBUTION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CONTRIBUTION
}

func (m *C2S_FETCH_CONTRIBUTION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_CONTRIBUTION_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_CONTRIBUTION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ContributionReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CONTRIBUTION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CONTRIBUTION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ContributionReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CONTRIBUTION END ----------------------------------------

//@ S2C_COUNTRY_CREATED    req: CountryCreatedArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_COUNTRY_CREATED_Meta struct {
}

func (m *S2C_COUNTRY_CREATED_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_COUNTRY_CREATED
}

func (m *S2C_COUNTRY_CREATED_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CountryCreatedArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_COUNTRY_CREATED_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_COUNTRY_CREATED_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CountryCreatedArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_COUNTRY_CREATED_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_COUNTRY_CREATED_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_COUNTRY_CREATED END ----------------------------------------

//@ S2C_UPDATE_FORAGE    req: UpdateForageArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_FORAGE_Meta struct {
}

func (m *S2C_UPDATE_FORAGE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_FORAGE
}

func (m *S2C_UPDATE_FORAGE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateForageArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_FORAGE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_FORAGE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateForageArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_FORAGE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_FORAGE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_FORAGE END ----------------------------------------

//@ S2C_CAMPAIGN_NOTIFY_RED_DOT    req: CampaignNotifyRedDotArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_CAMPAIGN_NOTIFY_RED_DOT_Meta struct {
}

func (m *S2C_CAMPAIGN_NOTIFY_RED_DOT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_CAMPAIGN_NOTIFY_RED_DOT
}

func (m *S2C_CAMPAIGN_NOTIFY_RED_DOT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignNotifyRedDotArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_CAMPAIGN_NOTIFY_RED_DOT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_CAMPAIGN_NOTIFY_RED_DOT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignNotifyRedDotArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_CAMPAIGN_NOTIFY_RED_DOT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_CAMPAIGN_NOTIFY_RED_DOT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_CAMPAIGN_NOTIFY_RED_DOT END ----------------------------------------

//@ S2C_SYNC_CITY_DEFENSE    req: SyncCityDefenseArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SYNC_CITY_DEFENSE_Meta struct {
}

func (m *S2C_SYNC_CITY_DEFENSE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SYNC_CITY_DEFENSE
}

func (m *S2C_SYNC_CITY_DEFENSE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SyncCityDefenseArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_SYNC_CITY_DEFENSE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_SYNC_CITY_DEFENSE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SyncCityDefenseArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_SYNC_CITY_DEFENSE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SYNC_CITY_DEFENSE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SYNC_CITY_DEFENSE END ----------------------------------------

//@ S2C_CAMPAIGN_UPDATE_JOB    req: CampaignUpdateJobArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_CAMPAIGN_UPDATE_JOB_Meta struct {
}

func (m *S2C_CAMPAIGN_UPDATE_JOB_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_CAMPAIGN_UPDATE_JOB
}

func (m *S2C_CAMPAIGN_UPDATE_JOB_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignUpdateJobArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_CAMPAIGN_UPDATE_JOB_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_CAMPAIGN_UPDATE_JOB_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignUpdateJobArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_CAMPAIGN_UPDATE_JOB_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_CAMPAIGN_UPDATE_JOB_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_CAMPAIGN_UPDATE_JOB END ----------------------------------------

//@ S2C_UPDATE_MY_CITY    req: UpdateMyCityArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_MY_CITY_Meta struct {
}

func (m *S2C_UPDATE_MY_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_MY_CITY
}

func (m *S2C_UPDATE_MY_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateMyCityArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_MY_CITY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_MY_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateMyCityArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_MY_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_MY_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_MY_CITY END ----------------------------------------

//@ S2C_UPDATE_MY_COUNTRY    req: UpdateMyCountryArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_MY_COUNTRY_Meta struct {
}

func (m *S2C_UPDATE_MY_COUNTRY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_MY_COUNTRY
}

func (m *S2C_UPDATE_MY_COUNTRY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateMyCountryArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_MY_COUNTRY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_MY_COUNTRY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateMyCountryArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_MY_COUNTRY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_MY_COUNTRY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_MY_COUNTRY END ----------------------------------------

//@ S2C_UPDATE_COUNTRY_NAME    req: UpdateCountryNameArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_COUNTRY_NAME_Meta struct {
}

func (m *S2C_UPDATE_COUNTRY_NAME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_COUNTRY_NAME
}

func (m *S2C_UPDATE_COUNTRY_NAME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateCountryNameArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_COUNTRY_NAME_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_COUNTRY_NAME_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateCountryNameArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_COUNTRY_NAME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_COUNTRY_NAME_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_COUNTRY_NAME END ----------------------------------------

//@ S2C_COUNTRY_DESTORYED    req: CountryDestoryed
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_COUNTRY_DESTORYED_Meta struct {
}

func (m *S2C_COUNTRY_DESTORYED_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_COUNTRY_DESTORYED
}

func (m *S2C_COUNTRY_DESTORYED_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CountryDestoryed)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_COUNTRY_DESTORYED_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_COUNTRY_DESTORYED_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CountryDestoryed{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_COUNTRY_DESTORYED_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_COUNTRY_DESTORYED_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_COUNTRY_DESTORYED END ----------------------------------------

//@ S2C_UPDATE_COUNTRY_FLAG    req: UpdateCountryFlagArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_COUNTRY_FLAG_Meta struct {
}

func (m *S2C_UPDATE_COUNTRY_FLAG_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_COUNTRY_FLAG
}

func (m *S2C_UPDATE_COUNTRY_FLAG_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateCountryFlagArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_COUNTRY_FLAG_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_COUNTRY_FLAG_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateCountryFlagArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_COUNTRY_FLAG_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_COUNTRY_FLAG_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_COUNTRY_FLAG END ----------------------------------------

//@ S2C_UPDATE_CONTRIBUTION    req: UpdateContributionArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_CONTRIBUTION_Meta struct {
}

func (m *S2C_UPDATE_CONTRIBUTION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_CONTRIBUTION
}

func (m *S2C_UPDATE_CONTRIBUTION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateContributionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_CONTRIBUTION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_CONTRIBUTION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateContributionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_CONTRIBUTION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_CONTRIBUTION_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_CONTRIBUTION END ----------------------------------------

//@ S2C_SYNC_CITY_PLYAER_AMOUNT    req: SyncCityPlayerAmount
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SYNC_CITY_PLYAER_AMOUNT_Meta struct {
}

func (m *S2C_SYNC_CITY_PLYAER_AMOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SYNC_CITY_PLYAER_AMOUNT
}

func (m *S2C_SYNC_CITY_PLYAER_AMOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SyncCityPlayerAmount)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_SYNC_CITY_PLYAER_AMOUNT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_SYNC_CITY_PLYAER_AMOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SyncCityPlayerAmount{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_SYNC_CITY_PLYAER_AMOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SYNC_CITY_PLYAER_AMOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SYNC_CITY_PLYAER_AMOUNT END ----------------------------------------

//@ S2C_UPDATE_CAMPAIGN_TEAMS    req: CampaignTeams
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_CAMPAIGN_TEAMS_Meta struct {
}

func (m *S2C_UPDATE_CAMPAIGN_TEAMS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_CAMPAIGN_TEAMS
}

func (m *S2C_UPDATE_CAMPAIGN_TEAMS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignTeams)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_CAMPAIGN_TEAMS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_CAMPAIGN_TEAMS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignTeams{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_CAMPAIGN_TEAMS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_CAMPAIGN_TEAMS_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_CAMPAIGN_TEAMS END ----------------------------------------

//@ S2C_UPDATE_CAMPAIGN_STATE    req: CampaignState
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_CAMPAIGN_STATE_Meta struct {
}

func (m *S2C_UPDATE_CAMPAIGN_STATE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_CAMPAIGN_STATE
}

func (m *S2C_UPDATE_CAMPAIGN_STATE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignState)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_CAMPAIGN_STATE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_CAMPAIGN_STATE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignState{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_CAMPAIGN_STATE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_CAMPAIGN_STATE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_CAMPAIGN_STATE END ----------------------------------------

//@ S2C_UPDATE_CITY_STATE    req: UpdateCityStateArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_CITY_STATE_Meta struct {
}

func (m *S2C_UPDATE_CITY_STATE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_CITY_STATE
}

func (m *S2C_UPDATE_CITY_STATE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateCityStateArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_CITY_STATE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_CITY_STATE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateCityStateArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_CITY_STATE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_CITY_STATE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_CITY_STATE END ----------------------------------------

//@ S2C_UPDATE_CAMPAIGN_PLAYER_STATE    req: CampaignPlayerState
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_CAMPAIGN_PLAYER_STATE_Meta struct {
}

func (m *S2C_UPDATE_CAMPAIGN_PLAYER_STATE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_CAMPAIGN_PLAYER_STATE
}

func (m *S2C_UPDATE_CAMPAIGN_PLAYER_STATE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignPlayerState)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_CAMPAIGN_PLAYER_STATE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_CAMPAIGN_PLAYER_STATE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignPlayerState{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_CAMPAIGN_PLAYER_STATE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_CAMPAIGN_PLAYER_STATE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_CAMPAIGN_PLAYER_STATE END ----------------------------------------

//@ S2C_UPDATE_MY_TEAM_STATE    req: UpdateMyTeamStateArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_MY_TEAM_STATE_Meta struct {
}

func (m *S2C_UPDATE_MY_TEAM_STATE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_MY_TEAM_STATE
}

func (m *S2C_UPDATE_MY_TEAM_STATE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateMyTeamStateArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_MY_TEAM_STATE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_MY_TEAM_STATE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateMyTeamStateArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_MY_TEAM_STATE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_MY_TEAM_STATE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_MY_TEAM_STATE END ----------------------------------------

//@ S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS    req: CampaignSupportCard
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS_Meta struct {
}

func (m *S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS
}

func (m *S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignSupportCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignSupportCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_CAMPAIGN_SUPPORT_CARDS END ----------------------------------------

//@ S2C_UPDATE_CITY_COUNTRY    req: UpdateCityCountryArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_CITY_COUNTRY_Meta struct {
}

func (m *S2C_UPDATE_CITY_COUNTRY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_CITY_COUNTRY
}

func (m *S2C_UPDATE_CITY_COUNTRY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateCityCountryArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_CITY_COUNTRY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_CITY_COUNTRY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateCityCountryArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_CITY_COUNTRY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_CITY_COUNTRY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_CITY_COUNTRY END ----------------------------------------

//@ S2C_SYNC_DEF_CITY_PLAYER_AMOUNT    req: CitysDefPlayerAmount
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SYNC_DEF_CITY_PLAYER_AMOUNT_Meta struct {
}

func (m *S2C_SYNC_DEF_CITY_PLAYER_AMOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SYNC_DEF_CITY_PLAYER_AMOUNT
}

func (m *S2C_SYNC_DEF_CITY_PLAYER_AMOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CitysDefPlayerAmount)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_SYNC_DEF_CITY_PLAYER_AMOUNT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_SYNC_DEF_CITY_PLAYER_AMOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CitysDefPlayerAmount{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_SYNC_DEF_CITY_PLAYER_AMOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SYNC_DEF_CITY_PLAYER_AMOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SYNC_DEF_CITY_PLAYER_AMOUNT END ----------------------------------------

//@ G2CA_SETTLE_CITY    req: GSettleCityArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_SETTLE_CITY_Meta struct {
}

func (m *G2CA_SETTLE_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_SETTLE_CITY
}

func (m *G2CA_SETTLE_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GSettleCityArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_SETTLE_CITY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_SETTLE_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GSettleCityArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_SETTLE_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_SETTLE_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2CA_SETTLE_CITY END ----------------------------------------

//@ G2CA_CREATE_COUNTRY    req: CreateCountryArg    resp: ApplyCreateCountryData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_CREATE_COUNTRY_Meta struct {
}

func (m *G2CA_CREATE_COUNTRY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_CREATE_COUNTRY
}

func (m *G2CA_CREATE_COUNTRY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CreateCountryArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_CREATE_COUNTRY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_CREATE_COUNTRY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CreateCountryArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_CREATE_COUNTRY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ApplyCreateCountryData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_CREATE_COUNTRY_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_CREATE_COUNTRY_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ApplyCreateCountryData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_CREATE_COUNTRY END ----------------------------------------

//@ G2CA_ACCEPT_CAMPAIGN_MISSION    req: AcceptCampaignMissionArg    resp: GAcceptCampaignMissionReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_ACCEPT_CAMPAIGN_MISSION_Meta struct {
}

func (m *G2CA_ACCEPT_CAMPAIGN_MISSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_ACCEPT_CAMPAIGN_MISSION
}

func (m *G2CA_ACCEPT_CAMPAIGN_MISSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AcceptCampaignMissionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_ACCEPT_CAMPAIGN_MISSION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_ACCEPT_CAMPAIGN_MISSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AcceptCampaignMissionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_ACCEPT_CAMPAIGN_MISSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GAcceptCampaignMissionReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_ACCEPT_CAMPAIGN_MISSION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_ACCEPT_CAMPAIGN_MISSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GAcceptCampaignMissionReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_ACCEPT_CAMPAIGN_MISSION END ----------------------------------------

//@ G2CA_CANCEL_CAMPAIGN_MISSION    resp: CampaignMissionInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_CANCEL_CAMPAIGN_MISSION_Meta struct {
}

func (m *G2CA_CANCEL_CAMPAIGN_MISSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_CANCEL_CAMPAIGN_MISSION
}

func (m *G2CA_CANCEL_CAMPAIGN_MISSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_CANCEL_CAMPAIGN_MISSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *G2CA_CANCEL_CAMPAIGN_MISSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignMissionInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_CANCEL_CAMPAIGN_MISSION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_CANCEL_CAMPAIGN_MISSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignMissionInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_CANCEL_CAMPAIGN_MISSION END ----------------------------------------

//@ G2CA_GET_CAMPAIGN_MISSION_REWARD    resp: GGetCampaignMissionRewardReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_GET_CAMPAIGN_MISSION_REWARD_Meta struct {
}

func (m *G2CA_GET_CAMPAIGN_MISSION_REWARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_GET_CAMPAIGN_MISSION_REWARD
}

func (m *G2CA_GET_CAMPAIGN_MISSION_REWARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_GET_CAMPAIGN_MISSION_REWARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *G2CA_GET_CAMPAIGN_MISSION_REWARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GGetCampaignMissionRewardReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_GET_CAMPAIGN_MISSION_REWARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_GET_CAMPAIGN_MISSION_REWARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GGetCampaignMissionRewardReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_GET_CAMPAIGN_MISSION_REWARD END ----------------------------------------

//@ G2CA_FETCH_CAMPAIGN_INFO    req: CampaignSimplePlayer    resp: CampaignInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_FETCH_CAMPAIGN_INFO_Meta struct {
}

func (m *G2CA_FETCH_CAMPAIGN_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_FETCH_CAMPAIGN_INFO
}

func (m *G2CA_FETCH_CAMPAIGN_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignSimplePlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_FETCH_CAMPAIGN_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_FETCH_CAMPAIGN_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignSimplePlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_FETCH_CAMPAIGN_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CampaignInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_FETCH_CAMPAIGN_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_FETCH_CAMPAIGN_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CampaignInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_FETCH_CAMPAIGN_INFO END ----------------------------------------

//@ G2CA_CITY_CAPITAL_INJECTION    req: CityCapitalInjectionArg    resp: CityCapitalInjectionReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_CITY_CAPITAL_INJECTION_Meta struct {
}

func (m *G2CA_CITY_CAPITAL_INJECTION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_CITY_CAPITAL_INJECTION
}

func (m *G2CA_CITY_CAPITAL_INJECTION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CityCapitalInjectionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_CITY_CAPITAL_INJECTION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_CITY_CAPITAL_INJECTION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CityCapitalInjectionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_CITY_CAPITAL_INJECTION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CityCapitalInjectionReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_CITY_CAPITAL_INJECTION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_CITY_CAPITAL_INJECTION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CityCapitalInjectionReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_CITY_CAPITAL_INJECTION END ----------------------------------------

//@ G2CA_GET_MY_COUNTRY    resp: GetMyCountryReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_GET_MY_COUNTRY_Meta struct {
}

func (m *G2CA_GET_MY_COUNTRY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_GET_MY_COUNTRY
}

func (m *G2CA_GET_MY_COUNTRY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_GET_MY_COUNTRY_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *G2CA_GET_MY_COUNTRY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GetMyCountryReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_GET_MY_COUNTRY_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_GET_MY_COUNTRY_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GetMyCountryReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_GET_MY_COUNTRY END ----------------------------------------

//@ G2CA_MOVE_CITY    req: TargetCity    resp: MoveCityRelpy
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_MOVE_CITY_Meta struct {
}

func (m *G2CA_MOVE_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_MOVE_CITY
}

func (m *G2CA_MOVE_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCity)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_MOVE_CITY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_MOVE_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCity{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_MOVE_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.MoveCityRelpy)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_MOVE_CITY_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_MOVE_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.MoveCityRelpy{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_MOVE_CITY END ----------------------------------------

//@ G2CA_COUNTRY_MODIFY_NAME    req: CountryModifyNameArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_COUNTRY_MODIFY_NAME_Meta struct {
}

func (m *G2CA_COUNTRY_MODIFY_NAME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_COUNTRY_MODIFY_NAME
}

func (m *G2CA_COUNTRY_MODIFY_NAME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CountryModifyNameArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_COUNTRY_MODIFY_NAME_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_COUNTRY_MODIFY_NAME_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CountryModifyNameArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_COUNTRY_MODIFY_NAME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_COUNTRY_MODIFY_NAME_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2CA_COUNTRY_MODIFY_NAME END ----------------------------------------

//@ G2CA_CAMPAIGN_ON_BATTLE_END    req: CampaignBattleEnd
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_CAMPAIGN_ON_BATTLE_END_Meta struct {
}

func (m *G2CA_CAMPAIGN_ON_BATTLE_END_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_CAMPAIGN_ON_BATTLE_END
}

func (m *G2CA_CAMPAIGN_ON_BATTLE_END_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignBattleEnd)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_CAMPAIGN_ON_BATTLE_END_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_CAMPAIGN_ON_BATTLE_END_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignBattleEnd{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_CAMPAIGN_ON_BATTLE_END_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_CAMPAIGN_ON_BATTLE_END_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2CA_CAMPAIGN_ON_BATTLE_END END ----------------------------------------

//@ G2CA_DEF_CITY    req: FighterData    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_DEF_CITY_Meta struct {
}

func (m *G2CA_DEF_CITY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_DEF_CITY
}

func (m *G2CA_DEF_CITY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FighterData)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_DEF_CITY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_DEF_CITY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FighterData{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_DEF_CITY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_DEF_CITY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2CA_DEF_CITY END ----------------------------------------

//@ G2CA_FETCH_CAMPAIGN_PLAYER_INFO    resp: GCampaignPlayerInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_FETCH_CAMPAIGN_PLAYER_INFO_Meta struct {
}

func (m *G2CA_FETCH_CAMPAIGN_PLAYER_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_FETCH_CAMPAIGN_PLAYER_INFO
}

func (m *G2CA_FETCH_CAMPAIGN_PLAYER_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_FETCH_CAMPAIGN_PLAYER_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *G2CA_FETCH_CAMPAIGN_PLAYER_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GCampaignPlayerInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_FETCH_CAMPAIGN_PLAYER_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_FETCH_CAMPAIGN_PLAYER_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GCampaignPlayerInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_FETCH_CAMPAIGN_PLAYER_INFO END ----------------------------------------

//@ G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO    req: TargetPlayer    resp: GCampaignPlayerInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO_Meta struct {
}

func (m *G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO
}

func (m *G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GCampaignPlayerInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GCampaignPlayerInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_FETCH_CAMPAIGN_TARGET_PLAYER_INFO END ----------------------------------------

//@ CA2G_UPDATE_CAMPAIGN_PLAYER_INFO    req: GCampaignPlayerInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type CA2G_UPDATE_CAMPAIGN_PLAYER_INFO_Meta struct {
}

func (m *CA2G_UPDATE_CAMPAIGN_PLAYER_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_CA2G_UPDATE_CAMPAIGN_PLAYER_INFO
}

func (m *CA2G_UPDATE_CAMPAIGN_PLAYER_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GCampaignPlayerInfo)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("CA2G_UPDATE_CAMPAIGN_PLAYER_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *CA2G_UPDATE_CAMPAIGN_PLAYER_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GCampaignPlayerInfo{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *CA2G_UPDATE_CAMPAIGN_PLAYER_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *CA2G_UPDATE_CAMPAIGN_PLAYER_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ CA2G_UPDATE_CAMPAIGN_PLAYER_INFO END ----------------------------------------

//@ CA2G_CAMPAIGN_NOTICE_NOTIFY    req: CampaignNotice
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type CA2G_CAMPAIGN_NOTICE_NOTIFY_Meta struct {
}

func (m *CA2G_CAMPAIGN_NOTICE_NOTIFY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_CA2G_CAMPAIGN_NOTICE_NOTIFY
}

func (m *CA2G_CAMPAIGN_NOTICE_NOTIFY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CampaignNotice)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("CA2G_CAMPAIGN_NOTICE_NOTIFY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *CA2G_CAMPAIGN_NOTICE_NOTIFY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CampaignNotice{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *CA2G_CAMPAIGN_NOTICE_NOTIFY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *CA2G_CAMPAIGN_NOTICE_NOTIFY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ CA2G_CAMPAIGN_NOTICE_NOTIFY END ----------------------------------------

//@ G2CA_ACCEPT_MILITARY_ORDER    req: AcceptMilitaryOrderArg    resp: AcceptMilitaryOrderReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_ACCEPT_MILITARY_ORDER_Meta struct {
}

func (m *G2CA_ACCEPT_MILITARY_ORDER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_ACCEPT_MILITARY_ORDER
}

func (m *G2CA_ACCEPT_MILITARY_ORDER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AcceptMilitaryOrderArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_ACCEPT_MILITARY_ORDER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_ACCEPT_MILITARY_ORDER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AcceptMilitaryOrderArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_ACCEPT_MILITARY_ORDER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AcceptMilitaryOrderReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_ACCEPT_MILITARY_ORDER_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_ACCEPT_MILITARY_ORDER_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AcceptMilitaryOrderReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_ACCEPT_MILITARY_ORDER END ----------------------------------------

//@ G2CA_GM_COMMAND    req: GmCommand    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_GM_COMMAND_Meta struct {
}

func (m *G2CA_GM_COMMAND_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_GM_COMMAND
}

func (m *G2CA_GM_COMMAND_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GmCommand)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_GM_COMMAND_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_GM_COMMAND_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GmCommand{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_GM_COMMAND_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_GM_COMMAND_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2CA_GM_COMMAND END ----------------------------------------

//@ G2CA_ESCAPED_FROM_JAIL    resp: TargetCity
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_ESCAPED_FROM_JAIL_Meta struct {
}

func (m *G2CA_ESCAPED_FROM_JAIL_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_ESCAPED_FROM_JAIL
}

func (m *G2CA_ESCAPED_FROM_JAIL_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_ESCAPED_FROM_JAIL_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *G2CA_ESCAPED_FROM_JAIL_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.TargetCity)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_ESCAPED_FROM_JAIL_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_ESCAPED_FROM_JAIL_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.TargetCity{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_ESCAPED_FROM_JAIL END ----------------------------------------

//@ G2CA_GET_CAMPAIGN_INFO    resp: GCampaignInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_GET_CAMPAIGN_INFO_Meta struct {
}

func (m *G2CA_GET_CAMPAIGN_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_GET_CAMPAIGN_INFO
}

func (m *G2CA_GET_CAMPAIGN_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_GET_CAMPAIGN_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *G2CA_GET_CAMPAIGN_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GCampaignInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_GET_CAMPAIGN_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2CA_GET_CAMPAIGN_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GCampaignInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2CA_GET_CAMPAIGN_INFO END ----------------------------------------

//@ CA2G_UPDATE_CAMPAIGN_INFO    req: GCampaignInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type CA2G_UPDATE_CAMPAIGN_INFO_Meta struct {
}

func (m *CA2G_UPDATE_CAMPAIGN_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_CA2G_UPDATE_CAMPAIGN_INFO
}

func (m *CA2G_UPDATE_CAMPAIGN_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GCampaignInfo)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("CA2G_UPDATE_CAMPAIGN_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *CA2G_UPDATE_CAMPAIGN_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GCampaignInfo{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *CA2G_UPDATE_CAMPAIGN_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *CA2G_UPDATE_CAMPAIGN_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ CA2G_UPDATE_CAMPAIGN_INFO END ----------------------------------------

//@ G2CA_IS_IN_CAMPAIGN_MATCH    req: TargetPlayer    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_IS_IN_CAMPAIGN_MATCH_Meta struct {
}

func (m *G2CA_IS_IN_CAMPAIGN_MATCH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_IS_IN_CAMPAIGN_MATCH
}

func (m *G2CA_IS_IN_CAMPAIGN_MATCH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_IS_IN_CAMPAIGN_MATCH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_IS_IN_CAMPAIGN_MATCH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_IS_IN_CAMPAIGN_MATCH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_IS_IN_CAMPAIGN_MATCH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2CA_IS_IN_CAMPAIGN_MATCH END ----------------------------------------

//@ G2CA_MODIFY_CONTRIBUTION    req: ModifyContributionArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2CA_MODIFY_CONTRIBUTION_Meta struct {
}

func (m *G2CA_MODIFY_CONTRIBUTION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2CA_MODIFY_CONTRIBUTION
}

func (m *G2CA_MODIFY_CONTRIBUTION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ModifyContributionArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2CA_MODIFY_CONTRIBUTION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2CA_MODIFY_CONTRIBUTION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ModifyContributionArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2CA_MODIFY_CONTRIBUTION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2CA_MODIFY_CONTRIBUTION_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2CA_MODIFY_CONTRIBUTION END ----------------------------------------
