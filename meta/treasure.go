// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/proto/pb"
	"kinger/gopuppy/network/protoc"
)

//@ C2S_GET_TREASURES    resp: GetTreasuresReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GET_TREASURES_Meta struct {
}

func (m *C2S_GET_TREASURES_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GET_TREASURES
}

func (m *C2S_GET_TREASURES_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GET_TREASURES_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_GET_TREASURES_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GetTreasuresReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GET_TREASURES_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_GET_TREASURES_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GetTreasuresReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_GET_TREASURES END ----------------------------------------

//@ C2S_OPEN_TREASURE    req: OpenTreasureArg    resp: OpenTreasureReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_OPEN_TREASURE_Meta struct {
}

func (m *C2S_OPEN_TREASURE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_OPEN_TREASURE
}

func (m *C2S_OPEN_TREASURE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.OpenTreasureArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_OPEN_TREASURE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_OPEN_TREASURE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.OpenTreasureArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_OPEN_TREASURE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.OpenTreasureReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_OPEN_TREASURE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_OPEN_TREASURE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.OpenTreasureReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_OPEN_TREASURE END ----------------------------------------

//@ C2S_ACTIVATE_REWARD_TREASURE    req: ActivateRewardTreasureArg    resp: ActivateRewardTreasureReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ACTIVATE_REWARD_TREASURE_Meta struct {
}

func (m *C2S_ACTIVATE_REWARD_TREASURE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ACTIVATE_REWARD_TREASURE
}

func (m *C2S_ACTIVATE_REWARD_TREASURE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ActivateRewardTreasureArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACTIVATE_REWARD_TREASURE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_ACTIVATE_REWARD_TREASURE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ActivateRewardTreasureArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_ACTIVATE_REWARD_TREASURE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ActivateRewardTreasureReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACTIVATE_REWARD_TREASURE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_ACTIVATE_REWARD_TREASURE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ActivateRewardTreasureReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_ACTIVATE_REWARD_TREASURE END ----------------------------------------

//@ C2S_JADE_ACC_TREASURE    req: TargetTreasure    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_JADE_ACC_TREASURE_Meta struct {
}

func (m *C2S_JADE_ACC_TREASURE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_JADE_ACC_TREASURE
}

func (m *C2S_JADE_ACC_TREASURE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetTreasure)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_JADE_ACC_TREASURE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_JADE_ACC_TREASURE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetTreasure{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_JADE_ACC_TREASURE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_JADE_ACC_TREASURE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_JADE_ACC_TREASURE END ----------------------------------------

//@ S2C_GAIN_TREASURE    req: GainTreasure
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_GAIN_TREASURE_Meta struct {
}

func (m *S2C_GAIN_TREASURE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_GAIN_TREASURE
}

func (m *S2C_GAIN_TREASURE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GainTreasure)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_GAIN_TREASURE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_GAIN_TREASURE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GainTreasure{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_GAIN_TREASURE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_GAIN_TREASURE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_GAIN_TREASURE END ----------------------------------------

//@ S2C_UPDATE_DAILY_TREASURE    req: DailyTreasure
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_DAILY_TREASURE_Meta struct {
}

func (m *S2C_UPDATE_DAILY_TREASURE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_DAILY_TREASURE
}

func (m *S2C_UPDATE_DAILY_TREASURE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.DailyTreasure)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_DAILY_TREASURE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_DAILY_TREASURE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.DailyTreasure{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_DAILY_TREASURE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_DAILY_TREASURE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_DAILY_TREASURE END ----------------------------------------

