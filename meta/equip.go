// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/proto/pb"
	"kinger/gopuppy/network/protoc"
)

//@ C2S_FETCH_EQUIP    resp: EquipData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_EQUIP_Meta struct {
}

func (m *C2S_FETCH_EQUIP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_EQUIP
}

func (m *C2S_FETCH_EQUIP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_EQUIP_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_EQUIP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.EquipData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_EQUIP_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_EQUIP_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.EquipData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_EQUIP END ----------------------------------------

//@ C2S_WEAR_EQUIP    req: Equip    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_WEAR_EQUIP_Meta struct {
}

func (m *C2S_WEAR_EQUIP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_WEAR_EQUIP
}

func (m *C2S_WEAR_EQUIP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.Equip)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_WEAR_EQUIP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_WEAR_EQUIP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.Equip{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_WEAR_EQUIP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_WEAR_EQUIP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_WEAR_EQUIP END ----------------------------------------

//@ C2S_DE_EQUIP    req: TargetEquip    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_DE_EQUIP_Meta struct {
}

func (m *C2S_DE_EQUIP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_DE_EQUIP
}

func (m *C2S_DE_EQUIP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetEquip)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_DE_EQUIP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_DE_EQUIP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetEquip{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_DE_EQUIP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_DE_EQUIP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_DE_EQUIP END ----------------------------------------

//@ C2S_FETCH_EQUIP_BACK_INFO req: TargetEquip resp: EquipBackInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_EQUIP_BACK_INFO_Meta struct {
}

func (m *C2S_FETCH_EQUIP_BACK_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_EQUIP_BACK_INFO
}

func (m *C2S_FETCH_EQUIP_BACK_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetEquip)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_EQUIP_BACK_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_EQUIP_BACK_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetEquip{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_EQUIP_BACK_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.EquipBackInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_EQUIP_BACK_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_EQUIP_BACK_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.EquipBackInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_EQUIP_BACK_INFO END ----------------------------------------

//@ C2S_BACK_EQUIP   req: TargetEquip resp: ReturnResData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_BACK_EQUIP_Meta struct {
}

func (m *C2S_BACK_EQUIP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_BACK_EQUIP
}

func (m *C2S_BACK_EQUIP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetEquip)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_BACK_EQUIP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_BACK_EQUIP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetEquip{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_BACK_EQUIP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ReturnResData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_BACK_EQUIP_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_BACK_EQUIP_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ReturnResData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_BACK_EQUIP END ----------------------------------------

//@ S2C_ADD_EQUIP    req: TargetEquip
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_ADD_EQUIP_Meta struct {
}

func (m *S2C_ADD_EQUIP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_ADD_EQUIP
}

func (m *S2C_ADD_EQUIP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetEquip)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_ADD_EQUIP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_ADD_EQUIP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetEquip{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_ADD_EQUIP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ADD_EQUIP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_ADD_EQUIP END ----------------------------------------

