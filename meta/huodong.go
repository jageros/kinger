// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/proto/pb"
	"kinger/gopuppy/network/protoc"
)

//@ C2S_FETCH_HUODONG_DETAIL    req: TargetHuodong    resp: HuodongDetail
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_HUODONG_DETAIL_Meta struct {
}

func (m *C2S_FETCH_HUODONG_DETAIL_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_HUODONG_DETAIL
}

func (m *C2S_FETCH_HUODONG_DETAIL_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetHuodong)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_HUODONG_DETAIL_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_HUODONG_DETAIL_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetHuodong{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_HUODONG_DETAIL_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.HuodongDetail)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_HUODONG_DETAIL_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_HUODONG_DETAIL_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.HuodongDetail{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_HUODONG_DETAIL END ----------------------------------------

//@ C2S_HUODONG_EXCHANGE    req: HuodongExchangeArg    resp: HuodongExchangeReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_HUODONG_EXCHANGE_Meta struct {
}

func (m *C2S_HUODONG_EXCHANGE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_HUODONG_EXCHANGE
}

func (m *C2S_HUODONG_EXCHANGE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.HuodongExchangeArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_HUODONG_EXCHANGE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_HUODONG_EXCHANGE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.HuodongExchangeArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_HUODONG_EXCHANGE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.HuodongExchangeReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_HUODONG_EXCHANGE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_HUODONG_EXCHANGE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.HuodongExchangeReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_HUODONG_EXCHANGE END ----------------------------------------

//@ C2S_SPRING_SKIN_LOTTERY    resp: OpenTreasureReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SPRING_SKIN_LOTTERY_Meta struct {
}

func (m *C2S_SPRING_SKIN_LOTTERY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SPRING_SKIN_LOTTERY
}

func (m *C2S_SPRING_SKIN_LOTTERY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SPRING_SKIN_LOTTERY_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_SPRING_SKIN_LOTTERY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.OpenTreasureReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SPRING_SKIN_LOTTERY_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_SPRING_SKIN_LOTTERY_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.OpenTreasureReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_SPRING_SKIN_LOTTERY END ----------------------------------------

//@ C2S_GET_SPRING_SKIN    req: GetSpringSkinArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GET_SPRING_SKIN_Meta struct {
}

func (m *C2S_GET_SPRING_SKIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GET_SPRING_SKIN
}

func (m *C2S_GET_SPRING_SKIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GetSpringSkinArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GET_SPRING_SKIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_GET_SPRING_SKIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GetSpringSkinArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_GET_SPRING_SKIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GET_SPRING_SKIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_GET_SPRING_SKIN END ----------------------------------------

//@ S2C_HUODONG_BEGIN    req: HuodongData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_HUODONG_BEGIN_Meta struct {
}

func (m *S2C_HUODONG_BEGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_HUODONG_BEGIN
}

func (m *S2C_HUODONG_BEGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.HuodongData)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_HUODONG_BEGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_HUODONG_BEGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.HuodongData{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_HUODONG_BEGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_HUODONG_BEGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_HUODONG_BEGIN END ----------------------------------------

//@ S2C_HUODONG_END    req: TargetHuodong
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_HUODONG_END_Meta struct {
}

func (m *S2C_HUODONG_END_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_HUODONG_END
}

func (m *S2C_HUODONG_END_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetHuodong)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_HUODONG_END_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_HUODONG_END_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetHuodong{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_HUODONG_END_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_HUODONG_END_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_HUODONG_END END ----------------------------------------

//@ G2G_ON_HUODONG_EVENT    req: HuodongEvent
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_ON_HUODONG_EVENT_Meta struct {
}

func (m *G2G_ON_HUODONG_EVENT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_ON_HUODONG_EVENT
}

func (m *G2G_ON_HUODONG_EVENT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.HuodongEvent)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_ON_HUODONG_EVENT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_ON_HUODONG_EVENT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.HuodongEvent{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_ON_HUODONG_EVENT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2G_ON_HUODONG_EVENT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2G_ON_HUODONG_EVENT END ----------------------------------------

