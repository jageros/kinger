// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/proto/pb"
)

//@ C2S_LOGIN    req: LoginArg    resp: LoginReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_LOGIN_Meta struct {
}

func (m *C2S_LOGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_LOGIN
}

func (m *C2S_LOGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.LoginArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LOGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_LOGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.LoginArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_LOGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.LoginReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LOGIN_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_LOGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.LoginReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_LOGIN END ----------------------------------------

//@ C2S_EXCHANGE_RESOURCE    req: Resource
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_EXCHANGE_RESOURCE_Meta struct {
}

func (m *C2S_EXCHANGE_RESOURCE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_EXCHANGE_RESOURCE
}

func (m *C2S_EXCHANGE_RESOURCE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.Resource)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_EXCHANGE_RESOURCE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_EXCHANGE_RESOURCE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.Resource{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_EXCHANGE_RESOURCE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_EXCHANGE_RESOURCE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_EXCHANGE_RESOURCE END ----------------------------------------

//@ C2S_ACCOUNT_LOGIN    req: AccountLoginArg    resp: AccountArchives
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ACCOUNT_LOGIN_Meta struct {
}

func (m *C2S_ACCOUNT_LOGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ACCOUNT_LOGIN
}

func (m *C2S_ACCOUNT_LOGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AccountLoginArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACCOUNT_LOGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_ACCOUNT_LOGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AccountLoginArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_ACCOUNT_LOGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccountArchives)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ACCOUNT_LOGIN_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_ACCOUNT_LOGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccountArchives{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_ACCOUNT_LOGIN END ----------------------------------------

//@ C2S_DEL_ARCHIVES    req: DelArchiveArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_DEL_ARCHIVES_Meta struct {
}

func (m *C2S_DEL_ARCHIVES_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_DEL_ARCHIVES
}

func (m *C2S_DEL_ARCHIVES_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.DelArchiveArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_DEL_ARCHIVES_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_DEL_ARCHIVES_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.DelArchiveArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_DEL_ARCHIVES_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_DEL_ARCHIVES_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_DEL_ARCHIVES END ----------------------------------------

//@ C2S_PLAYER_LOGOUT    resp: AccountArchives
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_PLAYER_LOGOUT_Meta struct {
}

func (m *C2S_PLAYER_LOGOUT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_PLAYER_LOGOUT
}

func (m *C2S_PLAYER_LOGOUT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_PLAYER_LOGOUT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_PLAYER_LOGOUT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccountArchives)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_PLAYER_LOGOUT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_PLAYER_LOGOUT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccountArchives{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_PLAYER_LOGOUT END ----------------------------------------

//@ C2S_FINISH_GUIDE    req: FinishGuide
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FINISH_GUIDE_Meta struct {
}

func (m *C2S_FINISH_GUIDE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FINISH_GUIDE
}

func (m *C2S_FINISH_GUIDE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FinishGuide)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FINISH_GUIDE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FINISH_GUIDE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FinishGuide{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FINISH_GUIDE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FINISH_GUIDE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_FINISH_GUIDE END ----------------------------------------

//@ C2S_FETCH_GUIDE    resp: AllFinishGuide
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_GUIDE_Meta struct {
}

func (m *C2S_FETCH_GUIDE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_GUIDE
}

func (m *C2S_FETCH_GUIDE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_GUIDE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_GUIDE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AllFinishGuide)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_GUIDE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_GUIDE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AllFinishGuide{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_GUIDE END ----------------------------------------

//@ C2S_PING    resp: Pong
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_PING_Meta struct {
}

func (m *C2S_PING_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_PING
}

func (m *C2S_PING_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_PING_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_PING_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.Pong)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_PING_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_PING_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.Pong{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_PING END ----------------------------------------

//@ C2S_REGISTER_ACCOUNT    req: RegisterAccount    resp: AccountArchives
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_REGISTER_ACCOUNT_Meta struct {
}

func (m *C2S_REGISTER_ACCOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_REGISTER_ACCOUNT
}

func (m *C2S_REGISTER_ACCOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RegisterAccount)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REGISTER_ACCOUNT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_REGISTER_ACCOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RegisterAccount{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_REGISTER_ACCOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccountArchives)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REGISTER_ACCOUNT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_REGISTER_ACCOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccountArchives{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_REGISTER_ACCOUNT END ----------------------------------------

//@ C2S_MODIFY_NAME    req: ModifyNameArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_MODIFY_NAME_Meta struct {
}

func (m *C2S_MODIFY_NAME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_MODIFY_NAME
}

func (m *C2S_MODIFY_NAME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ModifyNameArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_MODIFY_NAME_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_MODIFY_NAME_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ModifyNameArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_MODIFY_NAME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_MODIFY_NAME_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_MODIFY_NAME END ----------------------------------------

//@ C2S_SDK_ACCOUNT_LOGIN    req: AccountLoginArg    resp: AccountArchives
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SDK_ACCOUNT_LOGIN_Meta struct {
}

func (m *C2S_SDK_ACCOUNT_LOGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SDK_ACCOUNT_LOGIN
}

func (m *C2S_SDK_ACCOUNT_LOGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AccountLoginArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SDK_ACCOUNT_LOGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SDK_ACCOUNT_LOGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AccountLoginArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SDK_ACCOUNT_LOGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccountArchives)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SDK_ACCOUNT_LOGIN_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_SDK_ACCOUNT_LOGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccountArchives{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_SDK_ACCOUNT_LOGIN END ----------------------------------------

//@ C2S_FETCH_VERSION    resp: Version
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_VERSION_Meta struct {
}

func (m *C2S_FETCH_VERSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_VERSION
}

func (m *C2S_FETCH_VERSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_VERSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_VERSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.Version)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_VERSION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_VERSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.Version{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_VERSION END ----------------------------------------

//@ C2S_UPDATE_SDK_USER_INFO    req: SdkUserInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_SDK_USER_INFO_Meta struct {
}

func (m *C2S_UPDATE_SDK_USER_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_SDK_USER_INFO
}

func (m *C2S_UPDATE_SDK_USER_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SdkUserInfo)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_SDK_USER_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_SDK_USER_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SdkUserInfo{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_SDK_USER_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_SDK_USER_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_SDK_USER_INFO END ----------------------------------------

//@ C2S_RECORD_CUR_GUIDE_GROUP    req: GuideGroup
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_RECORD_CUR_GUIDE_GROUP_Meta struct {
}

func (m *C2S_RECORD_CUR_GUIDE_GROUP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_RECORD_CUR_GUIDE_GROUP
}

func (m *C2S_RECORD_CUR_GUIDE_GROUP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GuideGroup)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_RECORD_CUR_GUIDE_GROUP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_RECORD_CUR_GUIDE_GROUP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GuideGroup{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_RECORD_CUR_GUIDE_GROUP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_RECORD_CUR_GUIDE_GROUP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_RECORD_CUR_GUIDE_GROUP END ----------------------------------------

//@ C2S_FETCH_CUR_GUIDE_GROUP    resp: GuideGroup
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CUR_GUIDE_GROUP_Meta struct {
}

func (m *C2S_FETCH_CUR_GUIDE_GROUP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CUR_GUIDE_GROUP
}

func (m *C2S_FETCH_CUR_GUIDE_GROUP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_CUR_GUIDE_GROUP_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_CUR_GUIDE_GROUP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GuideGroup)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CUR_GUIDE_GROUP_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CUR_GUIDE_GROUP_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GuideGroup{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CUR_GUIDE_GROUP END ----------------------------------------

//@ C2S_UPDATE_HEADIMG    req: UpdateHeadImgArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_HEADIMG_Meta struct {
}

func (m *C2S_UPDATE_HEADIMG_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_HEADIMG
}

func (m *C2S_UPDATE_HEADIMG_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateHeadImgArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_HEADIMG_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_HEADIMG_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateHeadImgArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_HEADIMG_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_HEADIMG_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_HEADIMG END ----------------------------------------

//@ C2S_UPDATE_NAME    req: UpdateNameArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_NAME_Meta struct {
}

func (m *C2S_UPDATE_NAME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_NAME
}

func (m *C2S_UPDATE_NAME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateNameArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_NAME_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_NAME_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateNameArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_NAME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_NAME_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_NAME END ----------------------------------------

//@ C2S_TOURIST_REGISTER_ACCOUNT    req: TouristRegisterAccountArg    resp: TouristRegisterAccountRelpy
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_TOURIST_REGISTER_ACCOUNT_Meta struct {
}

func (m *C2S_TOURIST_REGISTER_ACCOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_TOURIST_REGISTER_ACCOUNT
}

func (m *C2S_TOURIST_REGISTER_ACCOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TouristRegisterAccountArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_TOURIST_REGISTER_ACCOUNT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_TOURIST_REGISTER_ACCOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TouristRegisterAccountArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_TOURIST_REGISTER_ACCOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.TouristRegisterAccountRelpy)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_TOURIST_REGISTER_ACCOUNT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_TOURIST_REGISTER_ACCOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.TouristRegisterAccountRelpy{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_TOURIST_REGISTER_ACCOUNT END ----------------------------------------

//@ C2S_TOURIST_BIND_ACCOUNT    req: TouristBindAccountArg    resp: AccountArchives
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_TOURIST_BIND_ACCOUNT_Meta struct {
}

func (m *C2S_TOURIST_BIND_ACCOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_TOURIST_BIND_ACCOUNT
}

func (m *C2S_TOURIST_BIND_ACCOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TouristBindAccountArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_TOURIST_BIND_ACCOUNT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_TOURIST_BIND_ACCOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TouristBindAccountArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_TOURIST_BIND_ACCOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccountArchives)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_TOURIST_BIND_ACCOUNT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_TOURIST_BIND_ACCOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccountArchives{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_TOURIST_BIND_ACCOUNT END ----------------------------------------

//@ C2S_FETCH_HEAD_FRAME    resp: FetchHeadFrameReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_HEAD_FRAME_Meta struct {
}

func (m *C2S_FETCH_HEAD_FRAME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_HEAD_FRAME
}

func (m *C2S_FETCH_HEAD_FRAME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_HEAD_FRAME_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_HEAD_FRAME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FetchHeadFrameReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_HEAD_FRAME_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_HEAD_FRAME_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FetchHeadFrameReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_HEAD_FRAME END ----------------------------------------

//@ C2S_UPDATE_HEAD_FRAME    req: UpdateHeadFrameArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_HEAD_FRAME_Meta struct {
}

func (m *C2S_UPDATE_HEAD_FRAME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_HEAD_FRAME
}

func (m *C2S_UPDATE_HEAD_FRAME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateHeadFrameArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_HEAD_FRAME_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_HEAD_FRAME_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateHeadFrameArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_HEAD_FRAME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_HEAD_FRAME_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_HEAD_FRAME END ----------------------------------------

//@ C2S_GET_FBADVERT_REWARD    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GET_FBADVERT_REWARD_Meta struct {
}

func (m *C2S_GET_FBADVERT_REWARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GET_FBADVERT_REWARD
}

func (m *C2S_GET_FBADVERT_REWARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GET_FBADVERT_REWARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_GET_FBADVERT_REWARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GET_FBADVERT_REWARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_GET_FBADVERT_REWARD END ----------------------------------------

//@ C2S_FETCH_HEAD    resp: HeadData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_HEAD_Meta struct {
}

func (m *C2S_FETCH_HEAD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_HEAD
}

func (m *C2S_FETCH_HEAD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_HEAD_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_HEAD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.HeadData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_HEAD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_HEAD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.HeadData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_HEAD END ----------------------------------------

//@ C2S_FETCH_EMOJI    resp: EmojiData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_EMOJI_Meta struct {
}

func (m *C2S_FETCH_EMOJI_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_EMOJI
}

func (m *C2S_FETCH_EMOJI_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_EMOJI_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_EMOJI_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.EmojiData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_EMOJI_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_EMOJI_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.EmojiData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_EMOJI END ----------------------------------------

//@ C2S_FETCH_VIP_REMAIN_TIME    resp: VipRemainTime
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_VIP_REMAIN_TIME_Meta struct {
}

func (m *C2S_FETCH_VIP_REMAIN_TIME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_VIP_REMAIN_TIME
}

func (m *C2S_FETCH_VIP_REMAIN_TIME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_VIP_REMAIN_TIME_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_VIP_REMAIN_TIME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.VipRemainTime)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_VIP_REMAIN_TIME_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_VIP_REMAIN_TIME_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.VipRemainTime{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_VIP_REMAIN_TIME END ----------------------------------------

//@ C2S_FETCH_CHAT_POP    resp: FetchChatPopReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CHAT_POP_Meta struct {
}

func (m *C2S_FETCH_CHAT_POP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CHAT_POP
}

func (m *C2S_FETCH_CHAT_POP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_CHAT_POP_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_CHAT_POP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FetchChatPopReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CHAT_POP_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CHAT_POP_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FetchChatPopReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CHAT_POP END ----------------------------------------

//@ C2S_UPDATE_CHAT_POP    req: UpdateChatPopArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_CHAT_POP_Meta struct {
}

func (m *C2S_UPDATE_CHAT_POP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_CHAT_POP
}

func (m *C2S_UPDATE_CHAT_POP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateChatPopArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_CHAT_POP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_CHAT_POP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateChatPopArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_CHAT_POP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_CHAT_POP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_CHAT_POP END ----------------------------------------

//@ C2S_ON_LOGIN_NOTICE_SHOW    req: OnLoginNoticeShowArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ON_LOGIN_NOTICE_SHOW_Meta struct {
}

func (m *C2S_ON_LOGIN_NOTICE_SHOW_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ON_LOGIN_NOTICE_SHOW
}

func (m *C2S_ON_LOGIN_NOTICE_SHOW_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.OnLoginNoticeShowArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ON_LOGIN_NOTICE_SHOW_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_ON_LOGIN_NOTICE_SHOW_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.OnLoginNoticeShowArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_ON_LOGIN_NOTICE_SHOW_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_ON_LOGIN_NOTICE_SHOW_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_ON_LOGIN_NOTICE_SHOW END ----------------------------------------

//@ C2S_FIRE233_BIND_ACCOUNT    req: RegisterAccount    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FIRE233_BIND_ACCOUNT_Meta struct {
}

func (m *C2S_FIRE233_BIND_ACCOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FIRE233_BIND_ACCOUNT
}

func (m *C2S_FIRE233_BIND_ACCOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RegisterAccount)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FIRE233_BIND_ACCOUNT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FIRE233_BIND_ACCOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RegisterAccount{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FIRE233_BIND_ACCOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FIRE233_BIND_ACCOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_FIRE233_BIND_ACCOUNT END ----------------------------------------

//@ C2S_FETCH_FIRE233_BIND_ACCOUNT    resp: RegisterAccount
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_FIRE233_BIND_ACCOUNT_Meta struct {
}

func (m *C2S_FETCH_FIRE233_BIND_ACCOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_FIRE233_BIND_ACCOUNT
}

func (m *C2S_FETCH_FIRE233_BIND_ACCOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_FIRE233_BIND_ACCOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_FIRE233_BIND_ACCOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RegisterAccount)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_FIRE233_BIND_ACCOUNT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_FIRE233_BIND_ACCOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RegisterAccount{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_FIRE233_BIND_ACCOUNT END ----------------------------------------

//@ C2S_FETCH_ACCOUNT_CODE    resp: AccountCode
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_ACCOUNT_CODE_Meta struct {
}

func (m *C2S_FETCH_ACCOUNT_CODE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_ACCOUNT_CODE
}

func (m *C2S_FETCH_ACCOUNT_CODE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_ACCOUNT_CODE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_ACCOUNT_CODE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccountCode)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_ACCOUNT_CODE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_ACCOUNT_CODE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccountCode{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_ACCOUNT_CODE END ----------------------------------------

//@ C2S_GEN_ACCOUNT_CODE    resp: AccountCode
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GEN_ACCOUNT_CODE_Meta struct {
}

func (m *C2S_GEN_ACCOUNT_CODE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GEN_ACCOUNT_CODE
}

func (m *C2S_GEN_ACCOUNT_CODE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GEN_ACCOUNT_CODE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_GEN_ACCOUNT_CODE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccountCode)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GEN_ACCOUNT_CODE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_GEN_ACCOUNT_CODE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccountCode{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_GEN_ACCOUNT_CODE END ----------------------------------------

//@ C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO    req: AccountCode    resp: AccountCodePlayerInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO_Meta struct {
}

func (m *C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO
}

func (m *C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AccountCode)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AccountCode{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AccountCodePlayerInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AccountCodePlayerInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_ACCOUNT_CODE_PLAYER_INFO END ----------------------------------------

//@ C2S_BIND_ACCOUNT_CODE    req: AccountCode    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_BIND_ACCOUNT_CODE_Meta struct {
}

func (m *C2S_BIND_ACCOUNT_CODE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_BIND_ACCOUNT_CODE
}

func (m *C2S_BIND_ACCOUNT_CODE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AccountCode)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_BIND_ACCOUNT_CODE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_BIND_ACCOUNT_CODE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AccountCode{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_BIND_ACCOUNT_CODE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_BIND_ACCOUNT_CODE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_BIND_ACCOUNT_CODE END ----------------------------------------

//@ C2S_ADULT_CERTIFICATION    req: AdultCertificationArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ADULT_CERTIFICATION_Meta struct {
}

func (m *C2S_ADULT_CERTIFICATION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ADULT_CERTIFICATION
}

func (m *C2S_ADULT_CERTIFICATION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AdultCertificationArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ADULT_CERTIFICATION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_ADULT_CERTIFICATION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AdultCertificationArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_ADULT_CERTIFICATION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_ADULT_CERTIFICATION_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_ADULT_CERTIFICATION END ----------------------------------------

//@ C2S_UPDATE_COUNTRY_FLAG    req: UpdateNationalFlagArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_COUNTRY_FLAG_Meta struct {
}

func (m *C2S_UPDATE_COUNTRY_FLAG_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_COUNTRY_FLAG
}

func (m *C2S_UPDATE_COUNTRY_FLAG_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateNationalFlagArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_COUNTRY_FLAG_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_COUNTRY_FLAG_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateNationalFlagArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_COUNTRY_FLAG_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_COUNTRY_FLAG_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_COUNTRY_FLAG END ----------------------------------------

//@ C2S_FETCH_UPDATE_COUNTRY_FLAG_CD    resp: UpdateCountryFlagRemainTime
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_UPDATE_COUNTRY_FLAG_CD_Meta struct {
}

func (m *C2S_FETCH_UPDATE_COUNTRY_FLAG_CD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_UPDATE_COUNTRY_FLAG_CD
}

func (m *C2S_FETCH_UPDATE_COUNTRY_FLAG_CD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_UPDATE_COUNTRY_FLAG_CD_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_UPDATE_COUNTRY_FLAG_CD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.UpdateCountryFlagRemainTime)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_UPDATE_COUNTRY_FLAG_CD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_UPDATE_COUNTRY_FLAG_CD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.UpdateCountryFlagRemainTime{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_UPDATE_COUNTRY_FLAG_CD END ----------------------------------------

//@ S2C_SYNC_RESOURCE    req: ResourceModify
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SYNC_RESOURCE_Meta struct {
}

func (m *S2C_SYNC_RESOURCE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SYNC_RESOURCE
}

func (m *S2C_SYNC_RESOURCE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ResourceModify)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_SYNC_RESOURCE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_SYNC_RESOURCE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ResourceModify{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_SYNC_RESOURCE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SYNC_RESOURCE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SYNC_RESOURCE END ----------------------------------------

//@ S2C_KICK_OUT    req: KickOut
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_KICK_OUT_Meta struct {
}

func (m *S2C_KICK_OUT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_KICK_OUT
}

func (m *S2C_KICK_OUT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.KickOut)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_KICK_OUT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_KICK_OUT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.KickOut{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_KICK_OUT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_KICK_OUT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_KICK_OUT END ----------------------------------------

//@ S2C_UPDATE_VERSION    req: Version
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_VERSION_Meta struct {
}

func (m *S2C_UPDATE_VERSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_VERSION
}

func (m *S2C_UPDATE_VERSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.Version)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_VERSION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_VERSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.Version{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_VERSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_VERSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_VERSION END ----------------------------------------

//@ S2C_ON_CROSS_DAY
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_ON_CROSS_DAY_Meta struct {
}

func (m *S2C_ON_CROSS_DAY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_ON_CROSS_DAY
}

func (m *S2C_ON_CROSS_DAY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ON_CROSS_DAY_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_ON_CROSS_DAY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ON_CROSS_DAY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_ON_CROSS_DAY END ----------------------------------------

//@ S2C_TELL_ME    req: TellMe
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_TELL_ME_Meta struct {
}

func (m *S2C_TELL_ME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_TELL_ME
}

func (m *S2C_TELL_ME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TellMe)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_TELL_ME_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_TELL_ME_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TellMe{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_TELL_ME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_TELL_ME_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_TELL_ME END ----------------------------------------

//@ S2C_UNLOCK_EMOJI    req: UnlockEmojiArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UNLOCK_EMOJI_Meta struct {
}

func (m *S2C_UNLOCK_EMOJI_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UNLOCK_EMOJI
}

func (m *S2C_UNLOCK_EMOJI_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UnlockEmojiArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UNLOCK_EMOJI_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UNLOCK_EMOJI_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UnlockEmojiArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UNLOCK_EMOJI_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UNLOCK_EMOJI_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UNLOCK_EMOJI END ----------------------------------------

//@ S2C_ADD_VIP    req: VipRemainTime
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_ADD_VIP_Meta struct {
}

func (m *S2C_ADD_VIP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_ADD_VIP
}

func (m *S2C_ADD_VIP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.VipRemainTime)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_ADD_VIP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_ADD_VIP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.VipRemainTime{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_ADD_VIP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ADD_VIP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_ADD_VIP END ----------------------------------------

//@ S2C_VIP_TIMEOUT
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_VIP_TIMEOUT_Meta struct {
}

func (m *S2C_VIP_TIMEOUT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_VIP_TIMEOUT
}

func (m *S2C_VIP_TIMEOUT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_VIP_TIMEOUT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_VIP_TIMEOUT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_VIP_TIMEOUT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_VIP_TIMEOUT END ----------------------------------------

//@ S2C_ADD_MIN_VIP    req: MinVipRemainTime
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_ADD_MIN_VIP_Meta struct {
}

func (m *S2C_ADD_MIN_VIP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_ADD_MIN_VIP
}

func (m *S2C_ADD_MIN_VIP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MinVipRemainTime)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_ADD_MIN_VIP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_ADD_MIN_VIP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MinVipRemainTime{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_ADD_MIN_VIP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ADD_MIN_VIP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_ADD_MIN_VIP END ----------------------------------------

//@ S2C_MIN_VIP_TIMEOUT
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_MIN_VIP_TIMEOUT_Meta struct {
}

func (m *S2C_MIN_VIP_TIMEOUT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_MIN_VIP_TIMEOUT
}

func (m *S2C_MIN_VIP_TIMEOUT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_MIN_VIP_TIMEOUT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_MIN_VIP_TIMEOUT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_MIN_VIP_TIMEOUT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_MIN_VIP_TIMEOUT END ----------------------------------------

//@ S2C_ADD_NEWBIE_VIP    req: VipRemainTime
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_ADD_NEWBIE_VIP_Meta struct {
}

func (m *S2C_ADD_NEWBIE_VIP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_ADD_NEWBIE_VIP
}

func (m *S2C_ADD_NEWBIE_VIP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.VipRemainTime)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_ADD_NEWBIE_VIP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_ADD_NEWBIE_VIP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.VipRemainTime{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_ADD_NEWBIE_VIP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ADD_NEWBIE_VIP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_ADD_NEWBIE_VIP END ----------------------------------------

//@ S2C_NEWBIE_VIP_TIMEOUT
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_NEWBIE_VIP_TIMEOUT_Meta struct {
}

func (m *S2C_NEWBIE_VIP_TIMEOUT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_NEWBIE_VIP_TIMEOUT
}

func (m *S2C_NEWBIE_VIP_TIMEOUT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_NEWBIE_VIP_TIMEOUT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_NEWBIE_VIP_TIMEOUT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_NEWBIE_VIP_TIMEOUT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_NEWBIE_VIP_TIMEOUT END ----------------------------------------

//@ S2C_ON_SERVER_STATUS_UPDATE    req: ServerStatus
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_ON_SERVER_STATUS_UPDATE_Meta struct {
}

func (m *S2C_ON_SERVER_STATUS_UPDATE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_ON_SERVER_STATUS_UPDATE
}

func (m *S2C_ON_SERVER_STATUS_UPDATE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ServerStatus)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_ON_SERVER_STATUS_UPDATE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_ON_SERVER_STATUS_UPDATE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ServerStatus{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_ON_SERVER_STATUS_UPDATE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ON_SERVER_STATUS_UPDATE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_ON_SERVER_STATUS_UPDATE END ----------------------------------------

//@ G2G_LOAD_PLAYER    req: LoadPlayerArg    resp: SimplePlayerInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_LOAD_PLAYER_Meta struct {
}

func (m *G2G_LOAD_PLAYER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_LOAD_PLAYER
}

func (m *G2G_LOAD_PLAYER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.LoadPlayerArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_LOAD_PLAYER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_LOAD_PLAYER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.LoadPlayerArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_LOAD_PLAYER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.SimplePlayerInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_LOAD_PLAYER_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2G_LOAD_PLAYER_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.SimplePlayerInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2G_LOAD_PLAYER END ----------------------------------------

//@ L2L_UPDATE_SIMPLE_PLAYER    req: UpdateSimplePlayerArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2L_UPDATE_SIMPLE_PLAYER_Meta struct {
}

func (m *L2L_UPDATE_SIMPLE_PLAYER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2L_UPDATE_SIMPLE_PLAYER
}

func (m *L2L_UPDATE_SIMPLE_PLAYER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateSimplePlayerArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2L_UPDATE_SIMPLE_PLAYER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2L_UPDATE_SIMPLE_PLAYER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateSimplePlayerArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2L_UPDATE_SIMPLE_PLAYER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2L_UPDATE_SIMPLE_PLAYER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2L_UPDATE_SIMPLE_PLAYER END ----------------------------------------

//@ G2G_ON_BIND_ACCOUNT    req: OnBindAccountArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_ON_BIND_ACCOUNT_Meta struct {
}

func (m *G2G_ON_BIND_ACCOUNT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_ON_BIND_ACCOUNT
}

func (m *G2G_ON_BIND_ACCOUNT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.OnBindAccountArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_ON_BIND_ACCOUNT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_ON_BIND_ACCOUNT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.OnBindAccountArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_ON_BIND_ACCOUNT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2G_ON_BIND_ACCOUNT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2G_ON_BIND_ACCOUNT END ----------------------------------------
