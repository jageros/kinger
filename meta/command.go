// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/proto/pb"
	"kinger/gopuppy/network/protoc"
)

//@ C2S_GM_COMMAND    req: GmCommand    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GM_COMMAND_Meta struct {
}

func (m *C2S_GM_COMMAND_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GM_COMMAND
}

func (m *C2S_GM_COMMAND_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GmCommand)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GM_COMMAND_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_GM_COMMAND_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GmCommand{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_GM_COMMAND_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GM_COMMAND_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_GM_COMMAND END ----------------------------------------

//@ C2S_EXCHANGE_GIFT_CODE    req: ExchangeCodeArg    resp: ExchangeCodeReward
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_EXCHANGE_GIFT_CODE_Meta struct {
}

func (m *C2S_EXCHANGE_GIFT_CODE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_EXCHANGE_GIFT_CODE
}

func (m *C2S_EXCHANGE_GIFT_CODE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ExchangeCodeArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_EXCHANGE_GIFT_CODE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_EXCHANGE_GIFT_CODE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ExchangeCodeArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_EXCHANGE_GIFT_CODE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ExchangeCodeReward)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_EXCHANGE_GIFT_CODE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_EXCHANGE_GIFT_CODE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ExchangeCodeReward{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_EXCHANGE_GIFT_CODE END ----------------------------------------

