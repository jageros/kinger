// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/proto/pb"
)

//@ C2S_FETCH_FRIEND_LIST    resp: FriendList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_FRIEND_LIST_Meta struct {
}

func (m *C2S_FETCH_FRIEND_LIST_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_FRIEND_LIST
}

func (m *C2S_FETCH_FRIEND_LIST_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_FRIEND_LIST_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_FRIEND_LIST_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FriendList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_FRIEND_LIST_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_FRIEND_LIST_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FriendList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_FRIEND_LIST END ----------------------------------------

//@ C2S_FETCH_PLAYER_INFO    req: TargetPlayer    resp: PlayerInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_PLAYER_INFO_Meta struct {
}

func (m *C2S_FETCH_PLAYER_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_PLAYER_INFO
}

func (m *C2S_FETCH_PLAYER_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_PLAYER_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_PLAYER_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_PLAYER_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.PlayerInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_PLAYER_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_PLAYER_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.PlayerInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_PLAYER_INFO END ----------------------------------------

//@ C2S_ADD_FRIEND_APPLY    req: TargetPlayer    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_ADD_FRIEND_APPLY_Meta struct {
}

func (m *C2S_ADD_FRIEND_APPLY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_ADD_FRIEND_APPLY
}

func (m *C2S_ADD_FRIEND_APPLY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_ADD_FRIEND_APPLY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_ADD_FRIEND_APPLY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_ADD_FRIEND_APPLY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_ADD_FRIEND_APPLY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_ADD_FRIEND_APPLY END ----------------------------------------

//@ C2S_FETCH_FRIEND_APPLY_LIST    resp: FriendApplyList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_FRIEND_APPLY_LIST_Meta struct {
}

func (m *C2S_FETCH_FRIEND_APPLY_LIST_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_FRIEND_APPLY_LIST
}

func (m *C2S_FETCH_FRIEND_APPLY_LIST_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_FRIEND_APPLY_LIST_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_FRIEND_APPLY_LIST_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FriendApplyList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_FRIEND_APPLY_LIST_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_FRIEND_APPLY_LIST_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FriendApplyList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_FRIEND_APPLY_LIST END ----------------------------------------

//@ C2S_REPLY_AFRIEND_APPLY    req: ReplyFriendApplyArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_REPLY_AFRIEND_APPLY_Meta struct {
}

func (m *C2S_REPLY_AFRIEND_APPLY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_REPLY_AFRIEND_APPLY
}

func (m *C2S_REPLY_AFRIEND_APPLY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ReplyFriendApplyArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REPLY_AFRIEND_APPLY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_REPLY_AFRIEND_APPLY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ReplyFriendApplyArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_REPLY_AFRIEND_APPLY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_REPLY_AFRIEND_APPLY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_REPLY_AFRIEND_APPLY END ----------------------------------------

//@ C2S_DEL_FRIEND    req: TargetPlayer    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_DEL_FRIEND_Meta struct {
}

func (m *C2S_DEL_FRIEND_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_DEL_FRIEND
}

func (m *C2S_DEL_FRIEND_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_DEL_FRIEND_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_DEL_FRIEND_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_DEL_FRIEND_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_DEL_FRIEND_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_DEL_FRIEND END ----------------------------------------

//@ C2S_FETCH_PRIVATE_CHAT    req: FetchPrivateChatArg    resp: PrivateChatList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_PRIVATE_CHAT_Meta struct {
}

func (m *C2S_FETCH_PRIVATE_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_PRIVATE_CHAT
}

func (m *C2S_FETCH_PRIVATE_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchPrivateChatArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_PRIVATE_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_PRIVATE_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchPrivateChatArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_PRIVATE_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.PrivateChatList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_PRIVATE_CHAT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_PRIVATE_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.PrivateChatList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_PRIVATE_CHAT END ----------------------------------------

//@ C2S_SEND_PRIVATE_CHAT    req: SendPrivateChatArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SEND_PRIVATE_CHAT_Meta struct {
}

func (m *C2S_SEND_PRIVATE_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SEND_PRIVATE_CHAT
}

func (m *C2S_SEND_PRIVATE_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SendPrivateChatArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SEND_PRIVATE_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SEND_PRIVATE_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SendPrivateChatArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SEND_PRIVATE_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SEND_PRIVATE_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_SEND_PRIVATE_CHAT END ----------------------------------------

//@ C2S_SUBSCRIBE_CHAT    req: TargetChatChannel    resp: ChatList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SUBSCRIBE_CHAT_Meta struct {
}

func (m *C2S_SUBSCRIBE_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SUBSCRIBE_CHAT
}

func (m *C2S_SUBSCRIBE_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetChatChannel)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SUBSCRIBE_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SUBSCRIBE_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetChatChannel{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SUBSCRIBE_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ChatList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SUBSCRIBE_CHAT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_SUBSCRIBE_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ChatList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_SUBSCRIBE_CHAT END ----------------------------------------

//@ C2S_UNSUBSCRIBE_CHAT    req: TargetChatChannel
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UNSUBSCRIBE_CHAT_Meta struct {
}

func (m *C2S_UNSUBSCRIBE_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UNSUBSCRIBE_CHAT
}

func (m *C2S_UNSUBSCRIBE_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetChatChannel)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UNSUBSCRIBE_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UNSUBSCRIBE_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetChatChannel{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UNSUBSCRIBE_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UNSUBSCRIBE_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UNSUBSCRIBE_CHAT END ----------------------------------------

//@ C2S_SEND_CHAT    req: SendChatArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SEND_CHAT_Meta struct {
}

func (m *C2S_SEND_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SEND_CHAT
}

func (m *C2S_SEND_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SendChatArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SEND_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SEND_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SendChatArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SEND_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SEND_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_SEND_CHAT END ----------------------------------------

//@ C2S_INVITE_BATTLE    req: TargetPlayer    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_INVITE_BATTLE_Meta struct {
}

func (m *C2S_INVITE_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_INVITE_BATTLE
}

func (m *C2S_INVITE_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_INVITE_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_INVITE_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_INVITE_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_INVITE_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_INVITE_BATTLE END ----------------------------------------

//@ G2G_INVITE_BATTLE    req: BeInviteBattleArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_INVITE_BATTLE_Meta struct {
}

func (m *G2G_INVITE_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_INVITE_BATTLE
}

func (m *G2G_INVITE_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BeInviteBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_INVITE_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_INVITE_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BeInviteBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_INVITE_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2G_INVITE_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2G_INVITE_BATTLE END ----------------------------------------

//@ C2S_CANCEL_INVITE_BATTLE    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CANCEL_INVITE_BATTLE_Meta struct {
}

func (m *C2S_CANCEL_INVITE_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CANCEL_INVITE_BATTLE
}

func (m *C2S_CANCEL_INVITE_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CANCEL_INVITE_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_CANCEL_INVITE_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_CANCEL_INVITE_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_CANCEL_INVITE_BATTLE END ----------------------------------------

//@ C2S_REPLY_INVITE_BATTLE    req: ReplyInviteBattleArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_REPLY_INVITE_BATTLE_Meta struct {
}

func (m *C2S_REPLY_INVITE_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_REPLY_INVITE_BATTLE
}

func (m *C2S_REPLY_INVITE_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ReplyInviteBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REPLY_INVITE_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_REPLY_INVITE_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ReplyInviteBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_REPLY_INVITE_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_REPLY_INVITE_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_REPLY_INVITE_BATTLE END ----------------------------------------

//@ C2S_FETCH_WX_INVITE_FRIENDS    resp: WxInviteFriendsReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_WX_INVITE_FRIENDS_Meta struct {
}

func (m *C2S_FETCH_WX_INVITE_FRIENDS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_WX_INVITE_FRIENDS
}

func (m *C2S_FETCH_WX_INVITE_FRIENDS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_WX_INVITE_FRIENDS_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_WX_INVITE_FRIENDS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.WxInviteFriendsReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_WX_INVITE_FRIENDS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_WX_INVITE_FRIENDS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.WxInviteFriendsReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_WX_INVITE_FRIENDS END ----------------------------------------

//@ C2S_GET_WX_INVITE_REWARD    req: GetWxInviteRewardArg    resp: GetWxInviteRewardReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GET_WX_INVITE_REWARD_Meta struct {
}

func (m *C2S_GET_WX_INVITE_REWARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GET_WX_INVITE_REWARD
}

func (m *C2S_GET_WX_INVITE_REWARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GetWxInviteRewardArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GET_WX_INVITE_REWARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_GET_WX_INVITE_REWARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GetWxInviteRewardArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_GET_WX_INVITE_REWARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.GetWxInviteRewardReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GET_WX_INVITE_REWARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_GET_WX_INVITE_REWARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.GetWxInviteRewardReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_GET_WX_INVITE_REWARD END ----------------------------------------

//@ S2C_FRIEND_APPLY_NOTIFY    req: FriendApplyNotifyArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_FRIEND_APPLY_NOTIFY_Meta struct {
}

func (m *S2C_FRIEND_APPLY_NOTIFY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_FRIEND_APPLY_NOTIFY
}

func (m *S2C_FRIEND_APPLY_NOTIFY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FriendApplyNotifyArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_FRIEND_APPLY_NOTIFY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_FRIEND_APPLY_NOTIFY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FriendApplyNotifyArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_FRIEND_APPLY_NOTIFY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_FRIEND_APPLY_NOTIFY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_FRIEND_APPLY_NOTIFY END ----------------------------------------

//@ S2C_FRIEND_APPLY_RESULT    req: FriendApplyResult
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_FRIEND_APPLY_RESULT_Meta struct {
}

func (m *S2C_FRIEND_APPLY_RESULT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_FRIEND_APPLY_RESULT
}

func (m *S2C_FRIEND_APPLY_RESULT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FriendApplyResult)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_FRIEND_APPLY_RESULT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_FRIEND_APPLY_RESULT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FriendApplyResult{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_FRIEND_APPLY_RESULT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_FRIEND_APPLY_RESULT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_FRIEND_APPLY_RESULT END ----------------------------------------

//@ S2C_PRIVATE_CHAT_NOTIFY    req: PrivateChatItem
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_PRIVATE_CHAT_NOTIFY_Meta struct {
}

func (m *S2C_PRIVATE_CHAT_NOTIFY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_PRIVATE_CHAT_NOTIFY
}

func (m *S2C_PRIVATE_CHAT_NOTIFY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PrivateChatItem)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_PRIVATE_CHAT_NOTIFY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_PRIVATE_CHAT_NOTIFY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PrivateChatItem{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_PRIVATE_CHAT_NOTIFY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_PRIVATE_CHAT_NOTIFY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_PRIVATE_CHAT_NOTIFY END ----------------------------------------

//@ S2C_CHAT_NOTIFY    req: ChatNotify
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_CHAT_NOTIFY_Meta struct {
}

func (m *S2C_CHAT_NOTIFY_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_CHAT_NOTIFY
}

func (m *S2C_CHAT_NOTIFY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ChatNotify)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_CHAT_NOTIFY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_CHAT_NOTIFY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ChatNotify{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_CHAT_NOTIFY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_CHAT_NOTIFY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_CHAT_NOTIFY END ----------------------------------------

//@ S2C_BE_INVITE_BATTLE    req: BeInviteBattleArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_BE_INVITE_BATTLE_Meta struct {
}

func (m *S2C_BE_INVITE_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_BE_INVITE_BATTLE
}

func (m *S2C_BE_INVITE_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BeInviteBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_BE_INVITE_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_BE_INVITE_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BeInviteBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_BE_INVITE_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_BE_INVITE_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_BE_INVITE_BATTLE END ----------------------------------------

//@ S2C_INVITE_BATTLE_RESULT    req: InviteBattleResult
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_INVITE_BATTLE_RESULT_Meta struct {
}

func (m *S2C_INVITE_BATTLE_RESULT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_INVITE_BATTLE_RESULT
}

func (m *S2C_INVITE_BATTLE_RESULT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.InviteBattleResult)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_INVITE_BATTLE_RESULT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_INVITE_BATTLE_RESULT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.InviteBattleResult{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_INVITE_BATTLE_RESULT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_INVITE_BATTLE_RESULT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_INVITE_BATTLE_RESULT END ----------------------------------------

//@ S2C_BE_DEL_FRIEND    req: TargetPlayer
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_BE_DEL_FRIEND_Meta struct {
}

func (m *S2C_BE_DEL_FRIEND_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_BE_DEL_FRIEND
}

func (m *S2C_BE_DEL_FRIEND_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetPlayer)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_BE_DEL_FRIEND_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_BE_DEL_FRIEND_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetPlayer{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_BE_DEL_FRIEND_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_BE_DEL_FRIEND_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_BE_DEL_FRIEND END ----------------------------------------

//@ S2C_WX_INVITE_SHOW_RED_DOT
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_WX_INVITE_SHOW_RED_DOT_Meta struct {
}

func (m *S2C_WX_INVITE_SHOW_RED_DOT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_WX_INVITE_SHOW_RED_DOT
}

func (m *S2C_WX_INVITE_SHOW_RED_DOT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_WX_INVITE_SHOW_RED_DOT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_WX_INVITE_SHOW_RED_DOT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_WX_INVITE_SHOW_RED_DOT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_WX_INVITE_SHOW_RED_DOT END ----------------------------------------

//@ S2C_ON_UNSUBSCRIBE_CHAT    req: TargetChatChannel
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_ON_UNSUBSCRIBE_CHAT_Meta struct {
}

func (m *S2C_ON_UNSUBSCRIBE_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_ON_UNSUBSCRIBE_CHAT
}

func (m *S2C_ON_UNSUBSCRIBE_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetChatChannel)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_ON_UNSUBSCRIBE_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_ON_UNSUBSCRIBE_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetChatChannel{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_ON_UNSUBSCRIBE_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ON_UNSUBSCRIBE_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_ON_UNSUBSCRIBE_CHAT END ----------------------------------------

//@ L2CA_SEND_CHAT    req: CSendChatArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2CA_SEND_CHAT_Meta struct {
}

func (m *L2CA_SEND_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2CA_SEND_CHAT
}

func (m *L2CA_SEND_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CSendChatArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2CA_SEND_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2CA_SEND_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CSendChatArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2CA_SEND_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2CA_SEND_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2CA_SEND_CHAT END ----------------------------------------

//@ G2G_REPLY_INVITE_BATTLE    req: G2GReplyInviteBattleArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_REPLY_INVITE_BATTLE_Meta struct {
}

func (m *G2G_REPLY_INVITE_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_REPLY_INVITE_BATTLE
}

func (m *G2G_REPLY_INVITE_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.G2GReplyInviteBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_REPLY_INVITE_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_REPLY_INVITE_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.G2GReplyInviteBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_REPLY_INVITE_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2G_REPLY_INVITE_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2G_REPLY_INVITE_BATTLE END ----------------------------------------

//@ L2CA_SUBSCRIBE_CHAT    req: SubscribeChatArg    resp: ChatItemList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2CA_SUBSCRIBE_CHAT_Meta struct {
}

func (m *L2CA_SUBSCRIBE_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2CA_SUBSCRIBE_CHAT
}

func (m *L2CA_SUBSCRIBE_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SubscribeChatArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2CA_SUBSCRIBE_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2CA_SUBSCRIBE_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SubscribeChatArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2CA_SUBSCRIBE_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.ChatItemList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2CA_SUBSCRIBE_CHAT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *L2CA_SUBSCRIBE_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.ChatItemList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ L2CA_SUBSCRIBE_CHAT END ----------------------------------------

//@ L2CA_FORBID_CHAT    req: ForbidChatArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2CA_FORBID_CHAT_Meta struct {
}

func (m *L2CA_FORBID_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2CA_FORBID_CHAT
}

func (m *L2CA_FORBID_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ForbidChatArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2CA_FORBID_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2CA_FORBID_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ForbidChatArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2CA_FORBID_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2CA_FORBID_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2CA_FORBID_CHAT END ----------------------------------------

//@ G2G_ON_SEND_ADVERT_CHAT    req: OnSendAdvertChatArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_ON_SEND_ADVERT_CHAT_Meta struct {
}

func (m *G2G_ON_SEND_ADVERT_CHAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_ON_SEND_ADVERT_CHAT
}

func (m *G2G_ON_SEND_ADVERT_CHAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.OnSendAdvertChatArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_ON_SEND_ADVERT_CHAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_ON_SEND_ADVERT_CHAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.OnSendAdvertChatArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_ON_SEND_ADVERT_CHAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2G_ON_SEND_ADVERT_CHAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2G_ON_SEND_ADVERT_CHAT END ----------------------------------------

//@ G2G_ON_FORBID_OR_UNBLOCK_IP req: IpAddrArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_ON_FORBID_OR_UNBLOCK_IP_Meta struct {
}

func (m *G2G_ON_FORBID_OR_UNBLOCK_IP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_ON_FORBID_OR_UNBLOCK_IP
}

func (m *G2G_ON_FORBID_OR_UNBLOCK_IP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.IpAddrArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_ON_FORBID_OR_UNBLOCK_IP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_ON_FORBID_OR_UNBLOCK_IP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.IpAddrArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_ON_FORBID_OR_UNBLOCK_IP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2G_ON_FORBID_OR_UNBLOCK_IP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2G_ON_FORBID_OR_UNBLOCK_IP END ----------------------------------------

//@ G2G_ON_IMPORT_DIRTY_WORDS   req: ImportWordArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_ON_IMPORT_DIRTY_WORDS_Meta struct {
}

func (m *G2G_ON_IMPORT_DIRTY_WORDS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_ON_IMPORT_DIRTY_WORDS
}

func (m *G2G_ON_IMPORT_DIRTY_WORDS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ImportWordArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_ON_IMPORT_DIRTY_WORDS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_ON_IMPORT_DIRTY_WORDS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ImportWordArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_ON_IMPORT_DIRTY_WORDS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2G_ON_IMPORT_DIRTY_WORDS_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2G_ON_IMPORT_DIRTY_WORDS END ----------------------------------------
