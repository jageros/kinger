// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/proto/pb"
)

//@ S2C_READY_FIGHT    req: FightDesk
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_READY_FIGHT_Meta struct {
}

func (m *S2C_READY_FIGHT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_READY_FIGHT
}

func (m *S2C_READY_FIGHT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FightDesk)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_READY_FIGHT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_READY_FIGHT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FightDesk{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_READY_FIGHT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_READY_FIGHT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_READY_FIGHT END ----------------------------------------

//@ S2C_FIGHT_BOUT_BEGIN    req: FightBoutBegin
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_FIGHT_BOUT_BEGIN_Meta struct {
}

func (m *S2C_FIGHT_BOUT_BEGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_FIGHT_BOUT_BEGIN
}

func (m *S2C_FIGHT_BOUT_BEGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FightBoutBegin)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_FIGHT_BOUT_BEGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_FIGHT_BOUT_BEGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FightBoutBegin{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_FIGHT_BOUT_BEGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_FIGHT_BOUT_BEGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_FIGHT_BOUT_BEGIN END ----------------------------------------

//@ S2C_FIGHT_BOUT_RESULT    req: FightBoutResult
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_FIGHT_BOUT_RESULT_Meta struct {
}

func (m *S2C_FIGHT_BOUT_RESULT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_FIGHT_BOUT_RESULT
}

func (m *S2C_FIGHT_BOUT_RESULT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FightBoutResult)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_FIGHT_BOUT_RESULT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_FIGHT_BOUT_RESULT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FightBoutResult{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_FIGHT_BOUT_RESULT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_FIGHT_BOUT_RESULT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_FIGHT_BOUT_RESULT END ----------------------------------------

//@ S2C_FIGHT_BOUT_TIMEOUT    req: FightBoutResult
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_FIGHT_BOUT_TIMEOUT_Meta struct {
}

func (m *S2C_FIGHT_BOUT_TIMEOUT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_FIGHT_BOUT_TIMEOUT
}

func (m *S2C_FIGHT_BOUT_TIMEOUT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FightBoutResult)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_FIGHT_BOUT_TIMEOUT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_FIGHT_BOUT_TIMEOUT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FightBoutResult{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_FIGHT_BOUT_TIMEOUT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_FIGHT_BOUT_TIMEOUT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_FIGHT_BOUT_TIMEOUT END ----------------------------------------

//@ S2C_BATTLE_END    req: BattleResult
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_BATTLE_END_Meta struct {
}

func (m *S2C_BATTLE_END_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_BATTLE_END
}

func (m *S2C_BATTLE_END_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BattleResult)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_BATTLE_END_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_BATTLE_END_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BattleResult{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_BATTLE_END_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_BATTLE_END_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_BATTLE_END END ----------------------------------------

//@ S2C_UPDATE_FIGHT_CARD    req: Card
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_FIGHT_CARD_Meta struct {
}

func (m *S2C_UPDATE_FIGHT_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_FIGHT_CARD
}

func (m *S2C_UPDATE_FIGHT_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.Card)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_FIGHT_CARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_FIGHT_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.Card{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_FIGHT_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_FIGHT_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_FIGHT_CARD END ----------------------------------------

//@ S2C_SYNC_EMOJI    req: SendEmojiArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SYNC_EMOJI_Meta struct {
}

func (m *S2C_SYNC_EMOJI_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SYNC_EMOJI
}

func (m *S2C_SYNC_EMOJI_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SendEmojiArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_SYNC_EMOJI_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_SYNC_EMOJI_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SendEmojiArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_SYNC_EMOJI_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SYNC_EMOJI_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SYNC_EMOJI END ----------------------------------------

//@ S2C_READY_LEVEL_FIGHT    req: LevelBattle
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_READY_LEVEL_FIGHT_Meta struct {
}

func (m *S2C_READY_LEVEL_FIGHT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_READY_LEVEL_FIGHT
}

func (m *S2C_READY_LEVEL_FIGHT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.LevelBattle)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_READY_LEVEL_FIGHT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_READY_LEVEL_FIGHT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.LevelBattle{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_READY_LEVEL_FIGHT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_READY_LEVEL_FIGHT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_READY_LEVEL_FIGHT END ----------------------------------------

//@ S2C_BEGIN_SEASON_BATTLE    req: SeasonBattle
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_BEGIN_SEASON_BATTLE_Meta struct {
}

func (m *S2C_BEGIN_SEASON_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_BEGIN_SEASON_BATTLE
}

func (m *S2C_BEGIN_SEASON_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SeasonBattle)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_BEGIN_SEASON_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_BEGIN_SEASON_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SeasonBattle{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_BEGIN_SEASON_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_BEGIN_SEASON_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_BEGIN_SEASON_BATTLE END ----------------------------------------

//@ S2C_SEASON_BATTLE_BEGIN    req: SeasonBattleBegin
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SEASON_BATTLE_BEGIN_Meta struct {
}

func (m *S2C_SEASON_BATTLE_BEGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SEASON_BATTLE_BEGIN
}

func (m *S2C_SEASON_BATTLE_BEGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SeasonBattleBegin)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_SEASON_BATTLE_BEGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_SEASON_BATTLE_BEGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SeasonBattleBegin{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_SEASON_BATTLE_BEGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SEASON_BATTLE_BEGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SEASON_BATTLE_BEGIN END ----------------------------------------

//@ C2S_FIGHT_BOUT_READY_DONE
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FIGHT_BOUT_READY_DONE_Meta struct {
}

func (m *C2S_FIGHT_BOUT_READY_DONE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FIGHT_BOUT_READY_DONE
}

func (m *C2S_FIGHT_BOUT_READY_DONE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FIGHT_BOUT_READY_DONE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FIGHT_BOUT_READY_DONE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FIGHT_BOUT_READY_DONE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_FIGHT_BOUT_READY_DONE END ----------------------------------------

//@ C2S_FIGHT_BOUT_CMD    req: FightBoutCmd    resp: FightBoutResult
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FIGHT_BOUT_CMD_Meta struct {
}

func (m *C2S_FIGHT_BOUT_CMD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FIGHT_BOUT_CMD
}

func (m *C2S_FIGHT_BOUT_CMD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FightBoutCmd)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FIGHT_BOUT_CMD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FIGHT_BOUT_CMD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FightBoutCmd{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FIGHT_BOUT_CMD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FightBoutResult)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FIGHT_BOUT_CMD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FIGHT_BOUT_CMD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FightBoutResult{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FIGHT_BOUT_CMD END ----------------------------------------

//@ C2S_FIGHT_SURRENDER    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FIGHT_SURRENDER_Meta struct {
}

func (m *C2S_FIGHT_SURRENDER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FIGHT_SURRENDER
}

func (m *C2S_FIGHT_SURRENDER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FIGHT_SURRENDER_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FIGHT_SURRENDER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FIGHT_SURRENDER_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_FIGHT_SURRENDER END ----------------------------------------

//@ C2S_FIGHT_GM_WIN
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FIGHT_GM_WIN_Meta struct {
}

func (m *C2S_FIGHT_GM_WIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FIGHT_GM_WIN
}

func (m *C2S_FIGHT_GM_WIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FIGHT_GM_WIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FIGHT_GM_WIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FIGHT_GM_WIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_FIGHT_GM_WIN END ----------------------------------------

//@ C2S_LOAD_FIGHT    req: C2SLoadFightArg    resp: RestoredFightDesk
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_LOAD_FIGHT_Meta struct {
}

func (m *C2S_LOAD_FIGHT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_LOAD_FIGHT
}

func (m *C2S_LOAD_FIGHT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.C2SLoadFightArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LOAD_FIGHT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_LOAD_FIGHT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.C2SLoadFightArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_LOAD_FIGHT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RestoredFightDesk)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LOAD_FIGHT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_LOAD_FIGHT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RestoredFightDesk{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_LOAD_FIGHT END ----------------------------------------

//@ C2S_GET_BATTLE_VIDEO    resp: VideoBattleData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GET_BATTLE_VIDEO_Meta struct {
}

func (m *C2S_GET_BATTLE_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GET_BATTLE_VIDEO
}

func (m *C2S_GET_BATTLE_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_GET_BATTLE_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_GET_BATTLE_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.VideoBattleData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GET_BATTLE_VIDEO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_GET_BATTLE_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.VideoBattleData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_GET_BATTLE_VIDEO END ----------------------------------------

//@ C2S_SEND_EMOJI    req: SendEmojiArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SEND_EMOJI_Meta struct {
}

func (m *C2S_SEND_EMOJI_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SEND_EMOJI
}

func (m *C2S_SEND_EMOJI_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SendEmojiArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SEND_EMOJI_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SEND_EMOJI_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SendEmojiArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SEND_EMOJI_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SEND_EMOJI_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_SEND_EMOJI END ----------------------------------------

//@ C2S_SEASON_BATTLE_READY_DONE    req: SeasonBattleReady    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SEASON_BATTLE_READY_DONE_Meta struct {
}

func (m *C2S_SEASON_BATTLE_READY_DONE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SEASON_BATTLE_READY_DONE
}

func (m *C2S_SEASON_BATTLE_READY_DONE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SeasonBattleReady)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SEASON_BATTLE_READY_DONE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SEASON_BATTLE_READY_DONE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SeasonBattleReady{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SEASON_BATTLE_READY_DONE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SEASON_BATTLE_READY_DONE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_SEASON_BATTLE_READY_DONE END ----------------------------------------

//@ C2S_LOG_BATTLE    req: LogBattleArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_LOG_BATTLE_Meta struct {
}

func (m *C2S_LOG_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_LOG_BATTLE
}

func (m *C2S_LOG_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.LogBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LOG_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_LOG_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.LogBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_LOG_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_LOG_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_LOG_BATTLE END ----------------------------------------

//@ M2B_BEGIN_BATTLE    req: BeginBattleArg    resp: FightDesk
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type M2B_BEGIN_BATTLE_Meta struct {
}

func (m *M2B_BEGIN_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_M2B_BEGIN_BATTLE
}

func (m *M2B_BEGIN_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BeginBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("M2B_BEGIN_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *M2B_BEGIN_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BeginBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *M2B_BEGIN_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FightDesk)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("M2B_BEGIN_BATTLE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *M2B_BEGIN_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FightDesk{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ M2B_BEGIN_BATTLE END ----------------------------------------

//@ L2B_BEGIN_LEVEL_BATTLE    req: BeginLevelBattleArg    resp: LevelBattle
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2B_BEGIN_LEVEL_BATTLE_Meta struct {
}

func (m *L2B_BEGIN_LEVEL_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2B_BEGIN_LEVEL_BATTLE
}

func (m *L2B_BEGIN_LEVEL_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BeginLevelBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2B_BEGIN_LEVEL_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2B_BEGIN_LEVEL_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BeginLevelBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2B_BEGIN_LEVEL_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.LevelBattle)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2B_BEGIN_LEVEL_BATTLE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *L2B_BEGIN_LEVEL_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.LevelBattle{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ L2B_BEGIN_LEVEL_BATTLE END ----------------------------------------

//@ L2B_BEGIN_LEVEL_HELP_BATTLE    req: BeginLevelBattleArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2B_BEGIN_LEVEL_HELP_BATTLE_Meta struct {
}

func (m *L2B_BEGIN_LEVEL_HELP_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2B_BEGIN_LEVEL_HELP_BATTLE
}

func (m *L2B_BEGIN_LEVEL_HELP_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BeginLevelBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2B_BEGIN_LEVEL_HELP_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2B_BEGIN_LEVEL_HELP_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BeginLevelBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2B_BEGIN_LEVEL_HELP_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *L2B_BEGIN_LEVEL_HELP_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ L2B_BEGIN_LEVEL_HELP_BATTLE END ----------------------------------------

//@ G2B_LOAD_BATTLE    req: LoadBattleArg    resp: RestoredFightDesk
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2B_LOAD_BATTLE_Meta struct {
}

func (m *G2B_LOAD_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2B_LOAD_BATTLE
}

func (m *G2B_LOAD_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.LoadBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2B_LOAD_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2B_LOAD_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.LoadBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2B_LOAD_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RestoredFightDesk)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2B_LOAD_BATTLE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2B_LOAD_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RestoredFightDesk{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2B_LOAD_BATTLE END ----------------------------------------

//@ G2B_CANCEL_BATTLE    req: CancelBattleArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2B_CANCEL_BATTLE_Meta struct {
}

func (m *G2B_CANCEL_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2B_CANCEL_BATTLE
}

func (m *G2B_CANCEL_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CancelBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2B_CANCEL_BATTLE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2B_CANCEL_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CancelBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2B_CANCEL_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2B_CANCEL_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2B_CANCEL_BATTLE END ----------------------------------------

//@ G2B_IS_BATTLE_ALIVE    req: CancelBattleArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2B_IS_BATTLE_ALIVE_Meta struct {
}

func (m *G2B_IS_BATTLE_ALIVE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2B_IS_BATTLE_ALIVE
}

func (m *G2B_IS_BATTLE_ALIVE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CancelBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2B_IS_BATTLE_ALIVE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2B_IS_BATTLE_ALIVE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CancelBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2B_IS_BATTLE_ALIVE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2B_IS_BATTLE_ALIVE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2B_IS_BATTLE_ALIVE END ----------------------------------------

//@ B2L_ON_ROBOT_BATTLE_END    req: OnRobotBattleEndArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type B2L_ON_ROBOT_BATTLE_END_Meta struct {
}

func (m *B2L_ON_ROBOT_BATTLE_END_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_B2L_ON_ROBOT_BATTLE_END
}

func (m *B2L_ON_ROBOT_BATTLE_END_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.OnRobotBattleEndArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("B2L_ON_ROBOT_BATTLE_END_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *B2L_ON_ROBOT_BATTLE_END_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.OnRobotBattleEndArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *B2L_ON_ROBOT_BATTLE_END_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *B2L_ON_ROBOT_BATTLE_END_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ B2L_ON_ROBOT_BATTLE_END END ----------------------------------------
