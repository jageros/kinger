// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/proto/pb"
)

//@ C2S_FETCH_VIDEO_LIST    resp: VideoList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_VIDEO_LIST_Meta struct {
}

func (m *C2S_FETCH_VIDEO_LIST_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_VIDEO_LIST
}

func (m *C2S_FETCH_VIDEO_LIST_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_VIDEO_LIST_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_VIDEO_LIST_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.VideoList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_VIDEO_LIST_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_VIDEO_LIST_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.VideoList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_VIDEO_LIST END ----------------------------------------

//@ C2S_WATCH_VIDEO    req: WatchVideoArg    resp: WatchVideoResp
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_WATCH_VIDEO_Meta struct {
}

func (m *C2S_WATCH_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_WATCH_VIDEO
}

func (m *C2S_WATCH_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.WatchVideoArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_WATCH_VIDEO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_WATCH_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.WatchVideoArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_WATCH_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.WatchVideoResp)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_WATCH_VIDEO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_WATCH_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.WatchVideoResp{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_WATCH_VIDEO END ----------------------------------------

//@ C2S_FETCH_SELF_VIDEO_LIST    req: FetchSelfVideoListArg    resp: VideoList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_SELF_VIDEO_LIST_Meta struct {
}

func (m *C2S_FETCH_SELF_VIDEO_LIST_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_SELF_VIDEO_LIST
}

func (m *C2S_FETCH_SELF_VIDEO_LIST_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchSelfVideoListArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_SELF_VIDEO_LIST_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_SELF_VIDEO_LIST_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchSelfVideoListArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_SELF_VIDEO_LIST_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.VideoList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_SELF_VIDEO_LIST_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_SELF_VIDEO_LIST_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.VideoList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_SELF_VIDEO_LIST END ----------------------------------------

//@ C2S_LIKE_VIDEO    req: LikeVideoArg    resp: LikeVideoResp
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_LIKE_VIDEO_Meta struct {
}

func (m *C2S_LIKE_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_LIKE_VIDEO
}

func (m *C2S_LIKE_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.LikeVideoArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LIKE_VIDEO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_LIKE_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.LikeVideoArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_LIKE_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.LikeVideoResp)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LIKE_VIDEO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_LIKE_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.LikeVideoResp{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_LIKE_VIDEO END ----------------------------------------

//@ C2S_SHARE_VIDEO    req: ShareVideoArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SHARE_VIDEO_Meta struct {
}

func (m *C2S_SHARE_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SHARE_VIDEO
}

func (m *C2S_SHARE_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ShareVideoArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SHARE_VIDEO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SHARE_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ShareVideoArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SHARE_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_SHARE_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_SHARE_VIDEO END ----------------------------------------

//@ C2S_FETCH_VIDEO_COMMENTS    req: FetchVideoCommentsArg    resp: FetchVideoCommentsReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_VIDEO_COMMENTS_Meta struct {
}

func (m *C2S_FETCH_VIDEO_COMMENTS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_VIDEO_COMMENTS
}

func (m *C2S_FETCH_VIDEO_COMMENTS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchVideoCommentsArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_VIDEO_COMMENTS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_VIDEO_COMMENTS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchVideoCommentsArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_VIDEO_COMMENTS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FetchVideoCommentsReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_VIDEO_COMMENTS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_VIDEO_COMMENTS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FetchVideoCommentsReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_VIDEO_COMMENTS END ----------------------------------------

//@ C2S_LIKE_VIDEO_COMMENTS    req: LikeVideoCommentsArg    resp: LikeVideoCommentsReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_LIKE_VIDEO_COMMENTS_Meta struct {
}

func (m *C2S_LIKE_VIDEO_COMMENTS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_LIKE_VIDEO_COMMENTS
}

func (m *C2S_LIKE_VIDEO_COMMENTS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.LikeVideoCommentsArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LIKE_VIDEO_COMMENTS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_LIKE_VIDEO_COMMENTS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.LikeVideoCommentsArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_LIKE_VIDEO_COMMENTS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.LikeVideoCommentsReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_LIKE_VIDEO_COMMENTS_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_LIKE_VIDEO_COMMENTS_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.LikeVideoCommentsReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_LIKE_VIDEO_COMMENTS END ----------------------------------------

//@ C2S_COMMENTS_VIDEO    req: CommentsVideoArg    resp: CommentsVideoReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_COMMENTS_VIDEO_Meta struct {
}

func (m *C2S_COMMENTS_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_COMMENTS_VIDEO
}

func (m *C2S_COMMENTS_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CommentsVideoArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_COMMENTS_VIDEO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_COMMENTS_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CommentsVideoArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_COMMENTS_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CommentsVideoReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_COMMENTS_VIDEO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_COMMENTS_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CommentsVideoReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_COMMENTS_VIDEO END ----------------------------------------

//@ C2S_FETCH_VIDEO_ITEM    req: FetchVideoItemArg    resp: VideoItem
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_VIDEO_ITEM_Meta struct {
}

func (m *C2S_FETCH_VIDEO_ITEM_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_VIDEO_ITEM
}

func (m *C2S_FETCH_VIDEO_ITEM_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchVideoItemArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_VIDEO_ITEM_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_VIDEO_ITEM_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchVideoItemArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_VIDEO_ITEM_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.VideoItem)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_VIDEO_ITEM_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_VIDEO_ITEM_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.VideoItem{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_VIDEO_ITEM END ----------------------------------------

//@ B2V_SAVE_VIDEO    req: SaveVideoArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type B2V_SAVE_VIDEO_Meta struct {
}

func (m *B2V_SAVE_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_B2V_SAVE_VIDEO
}

func (m *B2V_SAVE_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SaveVideoArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("B2V_SAVE_VIDEO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *B2V_SAVE_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SaveVideoArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *B2V_SAVE_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *B2V_SAVE_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ B2V_SAVE_VIDEO END ----------------------------------------

//@ G2V_SHARE_VIDEO    req: GShareVideoArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2V_SHARE_VIDEO_Meta struct {
}

func (m *G2V_SHARE_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2V_SHARE_VIDEO
}

func (m *G2V_SHARE_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GShareVideoArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2V_SHARE_VIDEO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2V_SHARE_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GShareVideoArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2V_SHARE_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2V_SHARE_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2V_SHARE_VIDEO END ----------------------------------------

//@ G2V_COMMENTS_VIDEO    req: GCommentsVideoArg    resp: CommentsVideoReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2V_COMMENTS_VIDEO_Meta struct {
}

func (m *G2V_COMMENTS_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2V_COMMENTS_VIDEO
}

func (m *G2V_COMMENTS_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GCommentsVideoArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2V_COMMENTS_VIDEO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2V_COMMENTS_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GCommentsVideoArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2V_COMMENTS_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CommentsVideoReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2V_COMMENTS_VIDEO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2V_COMMENTS_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CommentsVideoReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2V_COMMENTS_VIDEO END ----------------------------------------

//@ G2V_FETCH_VIDEO_LIST    req: TargetArea    resp: VideoList
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2V_FETCH_VIDEO_LIST_Meta struct {
}

func (m *G2V_FETCH_VIDEO_LIST_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2V_FETCH_VIDEO_LIST
}

func (m *G2V_FETCH_VIDEO_LIST_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetArea)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2V_FETCH_VIDEO_LIST_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2V_FETCH_VIDEO_LIST_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetArea{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2V_FETCH_VIDEO_LIST_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.VideoList)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2V_FETCH_VIDEO_LIST_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2V_FETCH_VIDEO_LIST_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.VideoList{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2V_FETCH_VIDEO_LIST END ----------------------------------------
