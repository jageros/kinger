// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/proto/pb"
)

//@ C2S_FETCH_MISSION_INFO    resp: MissionInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_MISSION_INFO_Meta struct {
}

func (m *C2S_FETCH_MISSION_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_MISSION_INFO
}

func (m *C2S_FETCH_MISSION_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_MISSION_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_MISSION_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.MissionInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_MISSION_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_MISSION_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.MissionInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_MISSION_INFO END ----------------------------------------

//@ C2S_REFRESH_MISSION    req: TargetMission    resp: Mission
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_REFRESH_MISSION_Meta struct {
}

func (m *C2S_REFRESH_MISSION_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_REFRESH_MISSION
}

func (m *C2S_REFRESH_MISSION_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetMission)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REFRESH_MISSION_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_REFRESH_MISSION_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetMission{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_REFRESH_MISSION_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.Mission)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REFRESH_MISSION_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_REFRESH_MISSION_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.Mission{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_REFRESH_MISSION END ----------------------------------------

//@ C2S_GET_MISSION_REWARD    req: TargetMission    resp: MissionReward
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_GET_MISSION_REWARD_Meta struct {
}

func (m *C2S_GET_MISSION_REWARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_GET_MISSION_REWARD
}

func (m *C2S_GET_MISSION_REWARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetMission)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GET_MISSION_REWARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_GET_MISSION_REWARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetMission{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_GET_MISSION_REWARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.MissionReward)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_GET_MISSION_REWARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_GET_MISSION_REWARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.MissionReward{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_GET_MISSION_REWARD END ----------------------------------------

//@ C2S_OPEN_MISSION_TREASURE    resp: OpenMissionTreasureReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_OPEN_MISSION_TREASURE_Meta struct {
}

func (m *C2S_OPEN_MISSION_TREASURE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_OPEN_MISSION_TREASURE
}

func (m *C2S_OPEN_MISSION_TREASURE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_OPEN_MISSION_TREASURE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_OPEN_MISSION_TREASURE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.OpenMissionTreasureReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_OPEN_MISSION_TREASURE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_OPEN_MISSION_TREASURE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.OpenMissionTreasureReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_OPEN_MISSION_TREASURE END ----------------------------------------

//@ C2S_WATCH_OUT_VIDEO
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_WATCH_OUT_VIDEO_Meta struct {
}

func (m *C2S_WATCH_OUT_VIDEO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_WATCH_OUT_VIDEO
}

func (m *C2S_WATCH_OUT_VIDEO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_WATCH_OUT_VIDEO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_WATCH_OUT_VIDEO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_WATCH_OUT_VIDEO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_WATCH_OUT_VIDEO END ----------------------------------------

//@ S2C_MISSION_SHOW_RED_DOT
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_MISSION_SHOW_RED_DOT_Meta struct {
}

func (m *S2C_MISSION_SHOW_RED_DOT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_MISSION_SHOW_RED_DOT
}

func (m *S2C_MISSION_SHOW_RED_DOT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_MISSION_SHOW_RED_DOT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_MISSION_SHOW_RED_DOT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_MISSION_SHOW_RED_DOT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_MISSION_SHOW_RED_DOT END ----------------------------------------

//@ S2C_UPDATE_MISSION_INFO    req: MissionInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_MISSION_INFO_Meta struct {
}

func (m *S2C_UPDATE_MISSION_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_MISSION_INFO
}

func (m *S2C_UPDATE_MISSION_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MissionInfo)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_MISSION_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_MISSION_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MissionInfo{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_MISSION_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_MISSION_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_MISSION_INFO END ----------------------------------------

//@ S2C_UPDATE_MISSION_PROCESS    req: UpdateMissionProcessArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_MISSION_PROCESS_Meta struct {
}

func (m *S2C_UPDATE_MISSION_PROCESS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_MISSION_PROCESS
}

func (m *S2C_UPDATE_MISSION_PROCESS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateMissionProcessArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_MISSION_PROCESS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_MISSION_PROCESS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateMissionProcessArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_MISSION_PROCESS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_MISSION_PROCESS_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_MISSION_PROCESS END ----------------------------------------

//@ S2C_UPDATE_MISSION_TREASURE_PROCESS    req: MissionTreasure
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_MISSION_TREASURE_PROCESS_Meta struct {
}

func (m *S2C_UPDATE_MISSION_TREASURE_PROCESS_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_MISSION_TREASURE_PROCESS
}

func (m *S2C_UPDATE_MISSION_TREASURE_PROCESS_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MissionTreasure)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_MISSION_TREASURE_PROCESS_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_MISSION_TREASURE_PROCESS_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MissionTreasure{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_MISSION_TREASURE_PROCESS_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_MISSION_TREASURE_PROCESS_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_MISSION_TREASURE_PROCESS END ----------------------------------------
