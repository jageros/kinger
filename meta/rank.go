// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/proto/pb"
)

//@ C2S_FETCH_RANK    req: FetchRankArg    resp: RankInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_RANK_Meta struct {
}

func (m *C2S_FETCH_RANK_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_RANK
}

func (m *C2S_FETCH_RANK_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchRankArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_RANK_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_RANK_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchRankArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_RANK_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RankInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_RANK_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_RANK_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RankInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_RANK END ----------------------------------------

//@ C2S_FETCH_RANK_USER    req: FetchRankUserArg    resp: RankUser
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_RANK_USER_Meta struct {
}

func (m *C2S_FETCH_RANK_USER_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_RANK_USER
}

func (m *C2S_FETCH_RANK_USER_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.FetchRankUserArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_RANK_USER_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_RANK_USER_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.FetchRankUserArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_RANK_USER_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RankUser)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_RANK_USER_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_RANK_USER_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RankUser{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_RANK_USER END ----------------------------------------

//@ C2S_FETCH_SEASON_RANK    resp: RankInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_SEASON_RANK_Meta struct {
}

func (m *C2S_FETCH_SEASON_RANK_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_SEASON_RANK
}

func (m *C2S_FETCH_SEASON_RANK_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_SEASON_RANK_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_SEASON_RANK_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RankInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_SEASON_RANK_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_SEASON_RANK_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RankInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_SEASON_RANK END ----------------------------------------

//@ S2C_REFRESH_RANK
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_REFRESH_RANK_Meta struct {
}

func (m *S2C_REFRESH_RANK_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_REFRESH_RANK
}

func (m *S2C_REFRESH_RANK_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_REFRESH_RANK_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_REFRESH_RANK_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_REFRESH_RANK_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_REFRESH_RANK END ----------------------------------------

//@ G2R_UPDATE_PVP_SCORE    req: UpdatePvpScoreArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2R_UPDATE_PVP_SCORE_Meta struct {
}

func (m *G2R_UPDATE_PVP_SCORE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2R_UPDATE_PVP_SCORE
}

func (m *G2R_UPDATE_PVP_SCORE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdatePvpScoreArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_UPDATE_PVP_SCORE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2R_UPDATE_PVP_SCORE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdatePvpScoreArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2R_UPDATE_PVP_SCORE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2R_UPDATE_PVP_SCORE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2R_UPDATE_PVP_SCORE END ----------------------------------------

//@ G2R_SEASON_PVP_BEGIN    req: TargetArea
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2R_SEASON_PVP_BEGIN_Meta struct {
}

func (m *G2R_SEASON_PVP_BEGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2R_SEASON_PVP_BEGIN
}

func (m *G2R_SEASON_PVP_BEGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetArea)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_SEASON_PVP_BEGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2R_SEASON_PVP_BEGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetArea{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2R_SEASON_PVP_BEGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2R_SEASON_PVP_BEGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2R_SEASON_PVP_BEGIN END ----------------------------------------

//@ G2R_SEASON_PVP_END    req: TargetArea    resp: G2RSeasonPvpEndReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2R_SEASON_PVP_END_Meta struct {
}

func (m *G2R_SEASON_PVP_END_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2R_SEASON_PVP_END
}

func (m *G2R_SEASON_PVP_END_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetArea)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_SEASON_PVP_END_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2R_SEASON_PVP_END_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetArea{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2R_SEASON_PVP_END_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.G2RSeasonPvpEndReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_SEASON_PVP_END_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2R_SEASON_PVP_END_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.G2RSeasonPvpEndReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2R_SEASON_PVP_END END ----------------------------------------

//@ G2R_FETCH_RANK    req: GFetchRankArg    resp: RankInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2R_FETCH_RANK_Meta struct {
}

func (m *G2R_FETCH_RANK_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2R_FETCH_RANK
}

func (m *G2R_FETCH_RANK_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GFetchRankArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_FETCH_RANK_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2R_FETCH_RANK_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GFetchRankArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2R_FETCH_RANK_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RankInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_FETCH_RANK_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2R_FETCH_RANK_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RankInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2R_FETCH_RANK END ----------------------------------------

//@ G2R_FETCH_SEASON_RANK    req: TargetArea    resp: RankInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2R_FETCH_SEASON_RANK_Meta struct {
}

func (m *G2R_FETCH_SEASON_RANK_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2R_FETCH_SEASON_RANK
}

func (m *G2R_FETCH_SEASON_RANK_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetArea)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_FETCH_SEASON_RANK_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2R_FETCH_SEASON_RANK_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetArea{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2R_FETCH_SEASON_RANK_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.RankInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_FETCH_SEASON_RANK_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2R_FETCH_SEASON_RANK_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.RankInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2R_FETCH_SEASON_RANK END ----------------------------------------

//@ R2G_SEND_RANK_HONOR   req: RankHonorInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type R2G_SEND_RANK_HONOR_Meta struct {
}

func (m *R2G_SEND_RANK_HONOR_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_R2G_SEND_RANK_HONOR
}

func (m *R2G_SEND_RANK_HONOR_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.RankHonorInfo)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("R2G_SEND_RANK_HONOR_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *R2G_SEND_RANK_HONOR_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.RankHonorInfo{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *R2G_SEND_RANK_HONOR_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *R2G_SEND_RANK_HONOR_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ R2G_SEND_RANK_HONOR END ----------------------------------------

//@ G2R_FETCH_PLAYER_RANK    req: MaxRankArg    resp: Area2UserRanking
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2R_FETCH_PLAYER_RANK_Meta struct {
}

func (m *G2R_FETCH_PLAYER_RANK_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2R_FETCH_PLAYER_RANK
}

func (m *G2R_FETCH_PLAYER_RANK_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MaxRankArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_FETCH_PLAYER_RANK_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2R_FETCH_PLAYER_RANK_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MaxRankArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2R_FETCH_PLAYER_RANK_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.Area2UserRanking)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_FETCH_PLAYER_RANK_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2R_FETCH_PLAYER_RANK_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.Area2UserRanking{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2R_FETCH_PLAYER_RANK END ----------------------------------------

//@ R2G_SEND_PLAYER_RANK    req: Area2UserRanking
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type R2G_SEND_PLAYER_RANK_Meta struct {
}

func (m *R2G_SEND_PLAYER_RANK_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_R2G_SEND_PLAYER_RANK
}

func (m *R2G_SEND_PLAYER_RANK_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.Area2UserRanking)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("R2G_SEND_PLAYER_RANK_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *R2G_SEND_PLAYER_RANK_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.Area2UserRanking{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *R2G_SEND_PLAYER_RANK_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *R2G_SEND_PLAYER_RANK_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ R2G_SEND_PLAYER_RANK END ----------------------------------------
