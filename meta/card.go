// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/gopuppy/network/protoc"
	"kinger/proto/pb"
)

//@ C2S_FETCH_CARD_DATA    resp: CardPools
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_CARD_DATA_Meta struct {
}

func (m *C2S_FETCH_CARD_DATA_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_CARD_DATA
}

func (m *C2S_FETCH_CARD_DATA_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_CARD_DATA_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_CARD_DATA_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CardPools)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_CARD_DATA_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_CARD_DATA_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CardPools{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_CARD_DATA END ----------------------------------------

//@ C2S_POOL_ADD_CARD    req: PoolAddCard   resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_POOL_ADD_CARD_Meta struct {
}

func (m *C2S_POOL_ADD_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_POOL_ADD_CARD
}

func (m *C2S_POOL_ADD_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PoolAddCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_POOL_ADD_CARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_POOL_ADD_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PoolAddCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_POOL_ADD_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_POOL_ADD_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_POOL_ADD_CARD END ----------------------------------------

//@ C2S_UPDATE_CARD_POOL    req: UpdateCardPools
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_CARD_POOL_Meta struct {
}

func (m *C2S_UPDATE_CARD_POOL_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_CARD_POOL
}

func (m *C2S_UPDATE_CARD_POOL_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpdateCardPools)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_CARD_POOL_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_CARD_POOL_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpdateCardPools{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_CARD_POOL_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_CARD_POOL_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_CARD_POOL END ----------------------------------------

//@ C2S_UPLEVEL_CARD    req: UpLevelCardArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPLEVEL_CARD_Meta struct {
}

func (m *C2S_UPLEVEL_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPLEVEL_CARD
}

func (m *C2S_UPLEVEL_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UpLevelCardArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPLEVEL_CARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPLEVEL_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UpLevelCardArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPLEVEL_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPLEVEL_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPLEVEL_CARD END ----------------------------------------

//@ C2S_CARD_RELIVE    req: TargetCard    resp: CardInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CARD_RELIVE_Meta struct {
}

func (m *C2S_CARD_RELIVE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CARD_RELIVE
}

func (m *C2S_CARD_RELIVE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CARD_RELIVE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CARD_RELIVE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CARD_RELIVE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CardInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CARD_RELIVE_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_CARD_RELIVE_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CardInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_CARD_RELIVE END ----------------------------------------

//@ C2S_CARD_TREAT    req: TargetCard    resp: CardInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_CARD_TREAT_Meta struct {
}

func (m *C2S_CARD_TREAT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_CARD_TREAT
}

func (m *C2S_CARD_TREAT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CARD_TREAT_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_CARD_TREAT_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_CARD_TREAT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.CardInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_CARD_TREAT_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_CARD_TREAT_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.CardInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_CARD_TREAT END ----------------------------------------

//@ C2S_DIY_CARD    req: DiyCardArg    resp: DiyCardReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_DIY_CARD_Meta struct {
}

func (m *C2S_DIY_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_DIY_CARD
}

func (m *C2S_DIY_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.DiyCardArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_DIY_CARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_DIY_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.DiyCardArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_DIY_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.DiyCardReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_DIY_CARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_DIY_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.DiyCardReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_DIY_CARD END ----------------------------------------

//@ C2S_FETCH_DIY_CARD_IMG    req: TargetCard    resp: DiyCardImg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_DIY_CARD_IMG_Meta struct {
}

func (m *C2S_FETCH_DIY_CARD_IMG_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_DIY_CARD_IMG
}

func (m *C2S_FETCH_DIY_CARD_IMG_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_DIY_CARD_IMG_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_FETCH_DIY_CARD_IMG_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_FETCH_DIY_CARD_IMG_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.DiyCardImg)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_DIY_CARD_IMG_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_DIY_CARD_IMG_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.DiyCardImg{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_DIY_CARD_IMG END ----------------------------------------

//@ C2S_DIY_CARD_AGAIN    req: TargetCard    resp: DiyCardReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_DIY_CARD_AGAIN_Meta struct {
}

func (m *C2S_DIY_CARD_AGAIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_DIY_CARD_AGAIN
}

func (m *C2S_DIY_CARD_AGAIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_DIY_CARD_AGAIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_DIY_CARD_AGAIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_DIY_CARD_AGAIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.DiyCardReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_DIY_CARD_AGAIN_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_DIY_CARD_AGAIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.DiyCardReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_DIY_CARD_AGAIN END ----------------------------------------

//@ C2S_DECOMPOSE_DIY_CARD    req: TargetCard    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_DECOMPOSE_DIY_CARD_Meta struct {
}

func (m *C2S_DECOMPOSE_DIY_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_DECOMPOSE_DIY_CARD
}

func (m *C2S_DECOMPOSE_DIY_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.TargetCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_DECOMPOSE_DIY_CARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_DECOMPOSE_DIY_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.TargetCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_DECOMPOSE_DIY_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_DECOMPOSE_DIY_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_DECOMPOSE_DIY_CARD END ----------------------------------------

//@ C2S_POOL_UPDATE_CARD    req: PoolUpdateCard   resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_POOL_UPDATE_CARD_Meta struct {
}

func (m *C2S_POOL_UPDATE_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_POOL_UPDATE_CARD
}

func (m *C2S_POOL_UPDATE_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.PoolUpdateCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_POOL_UPDATE_CARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_POOL_UPDATE_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.PoolUpdateCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_POOL_UPDATE_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_POOL_UPDATE_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_POOL_UPDATE_CARD END ----------------------------------------

//@ C2S_UPDATE_CARD_SKIN    req: SkinCard    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UPDATE_CARD_SKIN_Meta struct {
}

func (m *C2S_UPDATE_CARD_SKIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UPDATE_CARD_SKIN
}

func (m *C2S_UPDATE_CARD_SKIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SkinCard)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UPDATE_CARD_SKIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UPDATE_CARD_SKIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SkinCard{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UPDATE_CARD_SKIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UPDATE_CARD_SKIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UPDATE_CARD_SKIN END ----------------------------------------

//@ C2S_UNLOCK_CARD_LEVEL    req: UnlockCardLevelArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_UNLOCK_CARD_LEVEL_Meta struct {
}

func (m *C2S_UNLOCK_CARD_LEVEL_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_UNLOCK_CARD_LEVEL
}

func (m *C2S_UNLOCK_CARD_LEVEL_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.UnlockCardLevelArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_UNLOCK_CARD_LEVEL_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_UNLOCK_CARD_LEVEL_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.UnlockCardLevelArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_UNLOCK_CARD_LEVEL_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_UNLOCK_CARD_LEVEL_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_UNLOCK_CARD_LEVEL END ----------------------------------------

//@ C2S_BACK_CARD_UNLOCK    req: BackCardUnlockArg    resp: BackCardUnlockReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_BACK_CARD_UNLOCK_Meta struct {
}

func (m *C2S_BACK_CARD_UNLOCK_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_BACK_CARD_UNLOCK
}

func (m *C2S_BACK_CARD_UNLOCK_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BackCardUnlockArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_BACK_CARD_UNLOCK_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_BACK_CARD_UNLOCK_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BackCardUnlockArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_BACK_CARD_UNLOCK_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.BackCardUnlockReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_BACK_CARD_UNLOCK_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_BACK_CARD_UNLOCK_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.BackCardUnlockReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_BACK_CARD_UNLOCK END ----------------------------------------

//@ S2C_SYNC_CARD_INFO    req: CardDatas
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SYNC_CARD_INFO_Meta struct {
}

func (m *S2C_SYNC_CARD_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SYNC_CARD_INFO
}

func (m *S2C_SYNC_CARD_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CardDatas)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_SYNC_CARD_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_SYNC_CARD_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CardDatas{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_SYNC_CARD_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SYNC_CARD_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SYNC_CARD_INFO END ----------------------------------------

//@ S2C_ADD_CARD_SKIN    req: AddCardSkinArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_ADD_CARD_SKIN_Meta struct {
}

func (m *S2C_ADD_CARD_SKIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_ADD_CARD_SKIN
}

func (m *S2C_ADD_CARD_SKIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AddCardSkinArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_ADD_CARD_SKIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_ADD_CARD_SKIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AddCardSkinArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_ADD_CARD_SKIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_ADD_CARD_SKIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_ADD_CARD_SKIN END ----------------------------------------
