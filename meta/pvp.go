// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"kinger/proto/pb"
	"kinger/gopuppy/network/protoc"
)

//@ C2S_BEGIN_MATCH    req: MatchArg    resp: MatchReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_BEGIN_MATCH_Meta struct {
}

func (m *C2S_BEGIN_MATCH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_BEGIN_MATCH
}

func (m *C2S_BEGIN_MATCH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MatchArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_BEGIN_MATCH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_BEGIN_MATCH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MatchArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_BEGIN_MATCH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.MatchReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_BEGIN_MATCH_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_BEGIN_MATCH_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.MatchReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_BEGIN_MATCH END ----------------------------------------

//@ C2S_STOP_MATCH    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_STOP_MATCH_Meta struct {
}

func (m *C2S_STOP_MATCH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_STOP_MATCH
}

func (m *C2S_STOP_MATCH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_STOP_MATCH_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_STOP_MATCH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_STOP_MATCH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_STOP_MATCH END ----------------------------------------

//@ C2S_MATCH_ADD_ROBOT
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_MATCH_ADD_ROBOT_Meta struct {
}

func (m *C2S_MATCH_ADD_ROBOT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_MATCH_ADD_ROBOT
}

func (m *C2S_MATCH_ADD_ROBOT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_MATCH_ADD_ROBOT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_MATCH_ADD_ROBOT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_MATCH_ADD_ROBOT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_MATCH_ADD_ROBOT END ----------------------------------------

//@ C2S_MATCH_READY_DONE    req: MatchDoneArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_MATCH_READY_DONE_Meta struct {
}

func (m *C2S_MATCH_READY_DONE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_MATCH_READY_DONE
}

func (m *C2S_MATCH_READY_DONE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MatchDoneArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_MATCH_READY_DONE_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_MATCH_READY_DONE_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MatchDoneArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_MATCH_READY_DONE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_MATCH_READY_DONE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_MATCH_READY_DONE END ----------------------------------------

//@ C2S_FETCH_SEASON_PVP_LIMIT_TIME    resp: SeasonPvpLimitTime
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_SEASON_PVP_LIMIT_TIME_Meta struct {
}

func (m *C2S_FETCH_SEASON_PVP_LIMIT_TIME_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_SEASON_PVP_LIMIT_TIME
}

func (m *C2S_FETCH_SEASON_PVP_LIMIT_TIME_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_SEASON_PVP_LIMIT_TIME_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_SEASON_PVP_LIMIT_TIME_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.SeasonPvpLimitTime)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_SEASON_PVP_LIMIT_TIME_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_SEASON_PVP_LIMIT_TIME_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.SeasonPvpLimitTime{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_SEASON_PVP_LIMIT_TIME END ----------------------------------------

//@ C2S_FETCH_SEASON_PVP_INFO    resp: SeasonPvpInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_SEASON_PVP_INFO_Meta struct {
}

func (m *C2S_FETCH_SEASON_PVP_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_SEASON_PVP_INFO
}

func (m *C2S_FETCH_SEASON_PVP_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_SEASON_PVP_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_SEASON_PVP_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.SeasonPvpInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_SEASON_PVP_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_SEASON_PVP_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.SeasonPvpInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_SEASON_PVP_INFO END ----------------------------------------

//@ C2S_SEASON_PVP_CHOOSE_CAMP    req: SeasonPvpChooseCampArg    resp: SeasonPvpChooseCardData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SEASON_PVP_CHOOSE_CAMP_Meta struct {
}

func (m *C2S_SEASON_PVP_CHOOSE_CAMP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SEASON_PVP_CHOOSE_CAMP
}

func (m *C2S_SEASON_PVP_CHOOSE_CAMP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SeasonPvpChooseCampArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SEASON_PVP_CHOOSE_CAMP_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SEASON_PVP_CHOOSE_CAMP_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SeasonPvpChooseCampArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SEASON_PVP_CHOOSE_CAMP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.SeasonPvpChooseCardData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SEASON_PVP_CHOOSE_CAMP_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_SEASON_PVP_CHOOSE_CAMP_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.SeasonPvpChooseCardData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_SEASON_PVP_CHOOSE_CAMP END ----------------------------------------

//@ C2S_SEASON_PVP_CHOOSE_CARD    req: SeasonPvpChooseCardArg    resp: SeasonPvpChooseCardReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_SEASON_PVP_CHOOSE_CARD_Meta struct {
}

func (m *C2S_SEASON_PVP_CHOOSE_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_SEASON_PVP_CHOOSE_CARD
}

func (m *C2S_SEASON_PVP_CHOOSE_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SeasonPvpChooseCardArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SEASON_PVP_CHOOSE_CARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_SEASON_PVP_CHOOSE_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SeasonPvpChooseCardArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_SEASON_PVP_CHOOSE_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.SeasonPvpChooseCardReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_SEASON_PVP_CHOOSE_CARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_SEASON_PVP_CHOOSE_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.SeasonPvpChooseCardReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_SEASON_PVP_CHOOSE_CARD END ----------------------------------------

//@ C2S_FETCH_SEASON_HAND_CARD    resp: FetchSeasonHandCardReply
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_SEASON_HAND_CARD_Meta struct {
}

func (m *C2S_FETCH_SEASON_HAND_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_SEASON_HAND_CARD
}

func (m *C2S_FETCH_SEASON_HAND_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_SEASON_HAND_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_SEASON_HAND_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FetchSeasonHandCardReply)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_SEASON_HAND_CARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_SEASON_HAND_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FetchSeasonHandCardReply{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_SEASON_HAND_CARD END ----------------------------------------

//@ C2S_REFRESH_SEASON_PVP_CHOOSE_CARD    resp: SeasonPvpChooseCardData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_REFRESH_SEASON_PVP_CHOOSE_CARD_Meta struct {
}

func (m *C2S_REFRESH_SEASON_PVP_CHOOSE_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_REFRESH_SEASON_PVP_CHOOSE_CARD
}

func (m *C2S_REFRESH_SEASON_PVP_CHOOSE_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_REFRESH_SEASON_PVP_CHOOSE_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_REFRESH_SEASON_PVP_CHOOSE_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.SeasonPvpChooseCardData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_REFRESH_SEASON_PVP_CHOOSE_CARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_REFRESH_SEASON_PVP_CHOOSE_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.SeasonPvpChooseCardData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_REFRESH_SEASON_PVP_CHOOSE_CARD END ----------------------------------------

//@ C2S_BEGIN_TRAINING_BATTLE    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_BEGIN_TRAINING_BATTLE_Meta struct {
}

func (m *C2S_BEGIN_TRAINING_BATTLE_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_BEGIN_TRAINING_BATTLE
}

func (m *C2S_BEGIN_TRAINING_BATTLE_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_BEGIN_TRAINING_BATTLE_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_BEGIN_TRAINING_BATTLE_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_BEGIN_TRAINING_BATTLE_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ C2S_BEGIN_TRAINING_BATTLE END ----------------------------------------

//@ C2S_FETCH_LEAGUE_REWARD_INFO resp: LeagueRewardInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_FETCH_LEAGUE_REWARD_INFO_Meta struct {
}

func (m *C2S_FETCH_LEAGUE_REWARD_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_FETCH_LEAGUE_REWARD_INFO
}

func (m *C2S_FETCH_LEAGUE_REWARD_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *C2S_FETCH_LEAGUE_REWARD_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *C2S_FETCH_LEAGUE_REWARD_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.LeagueRewardInfo)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_FETCH_LEAGUE_REWARD_INFO_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_FETCH_LEAGUE_REWARD_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.LeagueRewardInfo{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_FETCH_LEAGUE_REWARD_INFO END ----------------------------------------

//@ C2S_RECEIVE_LEAGUE_REWARD req: LeagueRewardId resp: LeagueRewards
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type C2S_RECEIVE_LEAGUE_REWARD_Meta struct {
}

func (m *C2S_RECEIVE_LEAGUE_REWARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_C2S_RECEIVE_LEAGUE_REWARD
}

func (m *C2S_RECEIVE_LEAGUE_REWARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.LeagueRewardId)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_RECEIVE_LEAGUE_REWARD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_RECEIVE_LEAGUE_REWARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.LeagueRewardId{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_RECEIVE_LEAGUE_REWARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.LeagueRewards)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_RECEIVE_LEAGUE_REWARD_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_RECEIVE_LEAGUE_REWARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.LeagueRewards{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_RECEIVE_LEAGUE_REWARD END ----------------------------------------

//@ S2C_UPDATE_MATCH_INFO    req: MatchInfo
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_UPDATE_MATCH_INFO_Meta struct {
}

func (m *S2C_UPDATE_MATCH_INFO_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_UPDATE_MATCH_INFO
}

func (m *S2C_UPDATE_MATCH_INFO_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.MatchInfo)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_UPDATE_MATCH_INFO_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_UPDATE_MATCH_INFO_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.MatchInfo{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_UPDATE_MATCH_INFO_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_UPDATE_MATCH_INFO_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_UPDATE_MATCH_INFO END ----------------------------------------

//@ S2C_MATCH_TIMEOUT
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_MATCH_TIMEOUT_Meta struct {
}

func (m *S2C_MATCH_TIMEOUT_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_MATCH_TIMEOUT
}

func (m *S2C_MATCH_TIMEOUT_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_MATCH_TIMEOUT_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_MATCH_TIMEOUT_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_MATCH_TIMEOUT_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_MATCH_TIMEOUT END ----------------------------------------

//@ S2C_SEASON_PVP_BEGIN    req: SeasonPvpLimitTime
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SEASON_PVP_BEGIN_Meta struct {
}

func (m *S2C_SEASON_PVP_BEGIN_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SEASON_PVP_BEGIN
}

func (m *S2C_SEASON_PVP_BEGIN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.SeasonPvpLimitTime)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_SEASON_PVP_BEGIN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_SEASON_PVP_BEGIN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.SeasonPvpLimitTime{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_SEASON_PVP_BEGIN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SEASON_PVP_BEGIN_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SEASON_PVP_BEGIN END ----------------------------------------

//@ S2C_SEASON_PVP_STOP
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SEASON_PVP_STOP_Meta struct {
}

func (m *S2C_SEASON_PVP_STOP_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SEASON_PVP_STOP
}

func (m *S2C_SEASON_PVP_STOP_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SEASON_PVP_STOP_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_SEASON_PVP_STOP_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SEASON_PVP_STOP_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SEASON_PVP_STOP END ----------------------------------------

//@ S2C_SEASON_PVP_CHANGE_HAND_CARD
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type S2C_SEASON_PVP_CHANGE_HAND_CARD_Meta struct {
}

func (m *S2C_SEASON_PVP_CHANGE_HAND_CARD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_S2C_SEASON_PVP_CHANGE_HAND_CARD
}

func (m *S2C_SEASON_PVP_CHANGE_HAND_CARD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SEASON_PVP_CHANGE_HAND_CARD_Meta) DecodeArg(data []byte) (interface{}, error) {
	return nil, nil
}

func (m *S2C_SEASON_PVP_CHANGE_HAND_CARD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_SEASON_PVP_CHANGE_HAND_CARD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_SEASON_PVP_CHANGE_HAND_CARD END ----------------------------------------

//@ G2M_BEGIN_MATCH    req: BeginMatchArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2M_BEGIN_MATCH_Meta struct {
}

func (m *G2M_BEGIN_MATCH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2M_BEGIN_MATCH
}

func (m *G2M_BEGIN_MATCH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BeginMatchArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2M_BEGIN_MATCH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2M_BEGIN_MATCH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BeginMatchArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2M_BEGIN_MATCH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2M_BEGIN_MATCH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2M_BEGIN_MATCH END ----------------------------------------

//@ G2M_BEGIN_NEWBIE_PVP_MATCH    req: BeginNewbiePvpMatchArg    resp: ok or err
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2M_BEGIN_NEWBIE_PVP_MATCH_Meta struct {
}

func (m *G2M_BEGIN_NEWBIE_PVP_MATCH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2M_BEGIN_NEWBIE_PVP_MATCH
}

func (m *G2M_BEGIN_NEWBIE_PVP_MATCH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BeginNewbiePvpMatchArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2M_BEGIN_NEWBIE_PVP_MATCH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2M_BEGIN_NEWBIE_PVP_MATCH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BeginNewbiePvpMatchArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2M_BEGIN_NEWBIE_PVP_MATCH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2M_BEGIN_NEWBIE_PVP_MATCH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2M_BEGIN_NEWBIE_PVP_MATCH END ----------------------------------------

//@ G2M_BEGIN_GUIDE_MATCH    req: BeginBattleArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2M_BEGIN_GUIDE_MATCH_Meta struct {
}

func (m *G2M_BEGIN_GUIDE_MATCH_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2M_BEGIN_GUIDE_MATCH
}

func (m *G2M_BEGIN_GUIDE_MATCH_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.BeginBattleArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2M_BEGIN_GUIDE_MATCH_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2M_BEGIN_GUIDE_MATCH_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.BeginBattleArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2M_BEGIN_GUIDE_MATCH_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2M_BEGIN_GUIDE_MATCH_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2M_BEGIN_GUIDE_MATCH END ----------------------------------------

//@ L2G_GET_PVP_FIGHTER_DATA    req: GetFighterDataArg    resp: FighterData
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type L2G_GET_PVP_FIGHTER_DATA_Meta struct {
}

func (m *L2G_GET_PVP_FIGHTER_DATA_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_L2G_GET_PVP_FIGHTER_DATA
}

func (m *L2G_GET_PVP_FIGHTER_DATA_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GetFighterDataArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2G_GET_PVP_FIGHTER_DATA_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *L2G_GET_PVP_FIGHTER_DATA_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GetFighterDataArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *L2G_GET_PVP_FIGHTER_DATA_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.FighterData)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("L2G_GET_PVP_FIGHTER_DATA_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *L2G_GET_PVP_FIGHTER_DATA_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.FighterData{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ L2G_GET_PVP_FIGHTER_DATA END ----------------------------------------

//@ G2G_SAVE_LEAGUE_ATTR_RELOAD    req: ReloadLeagueAttrArg
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2G_SAVE_LEAGUE_ATTR_RELOAD_Meta struct {
}

func (m *G2G_SAVE_LEAGUE_ATTR_RELOAD_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2G_SAVE_LEAGUE_ATTR_RELOAD
}

func (m *G2G_SAVE_LEAGUE_ATTR_RELOAD_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.ReloadLeagueAttrArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2G_SAVE_LEAGUE_ATTR_RELOAD_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2G_SAVE_LEAGUE_ATTR_RELOAD_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.ReloadLeagueAttrArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2G_SAVE_LEAGUE_ATTR_RELOAD_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *G2G_SAVE_LEAGUE_ATTR_RELOAD_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ G2G_SAVE_LEAGUE_ATTR_RELOAD END ----------------------------------------

//@ G2R_LEAGUE_SEASON_END    req: GLeagueSeasonEndArg    resp: Area2UserRanking
//------------------------------------------------------------------------------------------
// implement protoc.IMeta
type G2R_LEAGUE_SEASON_END_Meta struct {
}

func (m *G2R_LEAGUE_SEASON_END_Meta) GetMessageID() protoc.IMessageID {
	return pb.MessageID_G2R_LEAGUE_SEASON_END
}

func (m *G2R_LEAGUE_SEASON_END_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.GLeagueSeasonEndArg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_LEAGUE_SEASON_END_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *G2R_LEAGUE_SEASON_END_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.GLeagueSeasonEndArg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *G2R_LEAGUE_SEASON_END_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.Area2UserRanking)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("G2R_LEAGUE_SEASON_END_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *G2R_LEAGUE_SEASON_END_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.Area2UserRanking{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ G2R_LEAGUE_SEASON_END END ----------------------------------------

