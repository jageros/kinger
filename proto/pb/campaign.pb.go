// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: campaign.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CityState int32

const (
	CityState_NormalCS   CityState = 0
	CityState_BeAttackCS CityState = 1
	CityState_BeOccupyCS CityState = 2
)

var CityState_name = map[int32]string{
	0: "NormalCS",
	1: "BeAttackCS",
	2: "BeOccupyCS",
}
var CityState_value = map[string]int32{
	"NormalCS":   0,
	"BeAttackCS": 1,
	"BeOccupyCS": 2,
}

func (x CityState) String() string {
	return proto.EnumName(CityState_name, int32(x))
}
func (CityState) EnumDescriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{0} }

type TeamState int32

const (
	TeamState_NormalTS           TeamState = 0
	TeamState_FieldBattleTS      TeamState = 1
	TeamState_CanAttackCityTS    TeamState = 2
	TeamState_AttackingCityTS    TeamState = 3
	TeamState_DisappearTS        TeamState = 4
	TeamState_FieldBattleEndTS   TeamState = 5
	TeamState_AtkCityBattleTS    TeamState = 6
	TeamState_DefCityBattleTS    TeamState = 7
	TeamState_DefCityBattleEndTS TeamState = 8
)

var TeamState_name = map[int32]string{
	0: "NormalTS",
	1: "FieldBattleTS",
	2: "CanAttackCityTS",
	3: "AttackingCityTS",
	4: "DisappearTS",
	5: "FieldBattleEndTS",
	6: "AtkCityBattleTS",
	7: "DefCityBattleTS",
	8: "DefCityBattleEndTS",
}
var TeamState_value = map[string]int32{
	"NormalTS":           0,
	"FieldBattleTS":      1,
	"CanAttackCityTS":    2,
	"AttackingCityTS":    3,
	"DisappearTS":        4,
	"FieldBattleEndTS":   5,
	"AtkCityBattleTS":    6,
	"DefCityBattleTS":    7,
	"DefCityBattleEndTS": 8,
}

func (x TeamState) String() string {
	return proto.EnumName(TeamState_name, int32(x))
}
func (TeamState) EnumDescriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{1} }

type MilitaryOrderType int32

const (
	MilitaryOrderType_SupportMT    MilitaryOrderType = 0
	MilitaryOrderType_ExpeditionMT MilitaryOrderType = 1
	MilitaryOrderType_DefCityMT    MilitaryOrderType = 2
)

var MilitaryOrderType_name = map[int32]string{
	0: "SupportMT",
	1: "ExpeditionMT",
	2: "DefCityMT",
}
var MilitaryOrderType_value = map[string]int32{
	"SupportMT":    0,
	"ExpeditionMT": 1,
	"DefCityMT":    2,
}

func (x MilitaryOrderType) String() string {
	return proto.EnumName(MilitaryOrderType_name, int32(x))
}
func (MilitaryOrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{2} }

type CampaignJob int32

const (
	CampaignJob_UnknowJob    CampaignJob = 0
	CampaignJob_YourMajesty  CampaignJob = 1
	CampaignJob_Counsellor   CampaignJob = 2
	CampaignJob_General      CampaignJob = 3
	CampaignJob_Prefect      CampaignJob = 4
	CampaignJob_DuWei        CampaignJob = 5
	CampaignJob_FieldOfficer CampaignJob = 6
)

var CampaignJob_name = map[int32]string{
	0: "UnknowJob",
	1: "YourMajesty",
	2: "Counsellor",
	3: "General",
	4: "Prefect",
	5: "DuWei",
	6: "FieldOfficer",
}
var CampaignJob_value = map[string]int32{
	"UnknowJob":    0,
	"YourMajesty":  1,
	"Counsellor":   2,
	"General":      3,
	"Prefect":      4,
	"DuWei":        5,
	"FieldOfficer": 6,
}

func (x CampaignJob) String() string {
	return proto.EnumName(CampaignJob_name, int32(x))
}
func (CampaignJob) EnumDescriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{3} }

// 国战任务类型
type CampaignMsType int32

const (
	CampaignMsType_UnknowMsType CampaignMsType = 0
	CampaignMsType_Irrigation   CampaignMsType = 1
	CampaignMsType_Trade        CampaignMsType = 2
	CampaignMsType_Build        CampaignMsType = 3
	CampaignMsType_Transport    CampaignMsType = 4
	CampaignMsType_Dispatch     CampaignMsType = 5
)

var CampaignMsType_name = map[int32]string{
	0: "UnknowMsType",
	1: "Irrigation",
	2: "Trade",
	3: "Build",
	4: "Transport",
	5: "Dispatch",
}
var CampaignMsType_value = map[string]int32{
	"UnknowMsType": 0,
	"Irrigation":   1,
	"Trade":        2,
	"Build":        3,
	"Transport":    4,
	"Dispatch":     5,
}

func (x CampaignMsType) String() string {
	return proto.EnumName(CampaignMsType_name, int32(x))
}
func (CampaignMsType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{4} }

// 运输物资类型
type TransportTypeEnum int32

const (
	TransportTypeEnum_GoldTT   TransportTypeEnum = 0
	TransportTypeEnum_ForageTT TransportTypeEnum = 1
)

var TransportTypeEnum_name = map[int32]string{
	0: "GoldTT",
	1: "ForageTT",
}
var TransportTypeEnum_value = map[string]int32{
	"GoldTT":   0,
	"ForageTT": 1,
}

func (x TransportTypeEnum) String() string {
	return proto.EnumName(TransportTypeEnum_name, int32(x))
}
func (TransportTypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{5} }

type CampaignNoticeType int32

const (
	CampaignNoticeType_CustomNt            CampaignNoticeType = 0
	CampaignNoticeType_NewCountryNt        CampaignNoticeType = 1
	CampaignNoticeType_AppointJobNt        CampaignNoticeType = 2
	CampaignNoticeType_RecallJobNt         CampaignNoticeType = 3
	CampaignNoticeType_AutocephalyNt       CampaignNoticeType = 4
	CampaignNoticeType_KickOutNt           CampaignNoticeType = 5
	CampaignNoticeType_YourMajestyChangeNt CampaignNoticeType = 6
	CampaignNoticeType_ResignNt            CampaignNoticeType = 7
	CampaignNoticeType_ClearMissionNt      CampaignNoticeType = 8
	CampaignNoticeType_BeOccupyNt          CampaignNoticeType = 9
	CampaignNoticeType_DestoryCountryNt    CampaignNoticeType = 10
	CampaignNoticeType_UnifiedWordNt       CampaignNoticeType = 11
	CampaignNoticeType_AutocephalyVoteNt   CampaignNoticeType = 12
	CampaignNoticeType_CapitalInjectionNt  CampaignNoticeType = 13
	CampaignNoticeType_ProductionNt        CampaignNoticeType = 14
	CampaignNoticeType_SalaryNt            CampaignNoticeType = 15
	CampaignNoticeType_TransportNt         CampaignNoticeType = 16
	CampaignNoticeType_OccupyNt            CampaignNoticeType = 17
	CampaignNoticeType_SurrenderNt         CampaignNoticeType = 18
	CampaignNoticeType_BetrayNt            CampaignNoticeType = 19
	CampaignNoticeType_EscapedNt           CampaignNoticeType = 20
	CampaignNoticeType_EscapedReturnNt     CampaignNoticeType = 21
	CampaignNoticeType_AutoDefOrderNt      CampaignNoticeType = 22
	CampaignNoticeType_SurrenderCity1Nt    CampaignNoticeType = 23
	CampaignNoticeType_SurrenderCity2Nt    CampaignNoticeType = 24
	CampaignNoticeType_SurrenderCity3Nt    CampaignNoticeType = 25
	CampaignNoticeType_SurrenderCountry1Nt CampaignNoticeType = 26
	CampaignNoticeType_SurrenderCountry2Nt CampaignNoticeType = 27
	CampaignNoticeType_AutocephalyNt2      CampaignNoticeType = 28
	CampaignNoticeType_AutocephalyNt3      CampaignNoticeType = 29
)

var CampaignNoticeType_name = map[int32]string{
	0:  "CustomNt",
	1:  "NewCountryNt",
	2:  "AppointJobNt",
	3:  "RecallJobNt",
	4:  "AutocephalyNt",
	5:  "KickOutNt",
	6:  "YourMajestyChangeNt",
	7:  "ResignNt",
	8:  "ClearMissionNt",
	9:  "BeOccupyNt",
	10: "DestoryCountryNt",
	11: "UnifiedWordNt",
	12: "AutocephalyVoteNt",
	13: "CapitalInjectionNt",
	14: "ProductionNt",
	15: "SalaryNt",
	16: "TransportNt",
	17: "OccupyNt",
	18: "SurrenderNt",
	19: "BetrayNt",
	20: "EscapedNt",
	21: "EscapedReturnNt",
	22: "AutoDefOrderNt",
	23: "SurrenderCity1Nt",
	24: "SurrenderCity2Nt",
	25: "SurrenderCity3Nt",
	26: "SurrenderCountry1Nt",
	27: "SurrenderCountry2Nt",
	28: "AutocephalyNt2",
	29: "AutocephalyNt3",
}
var CampaignNoticeType_value = map[string]int32{
	"CustomNt":            0,
	"NewCountryNt":        1,
	"AppointJobNt":        2,
	"RecallJobNt":         3,
	"AutocephalyNt":       4,
	"KickOutNt":           5,
	"YourMajestyChangeNt": 6,
	"ResignNt":            7,
	"ClearMissionNt":      8,
	"BeOccupyNt":          9,
	"DestoryCountryNt":    10,
	"UnifiedWordNt":       11,
	"AutocephalyVoteNt":   12,
	"CapitalInjectionNt":  13,
	"ProductionNt":        14,
	"SalaryNt":            15,
	"TransportNt":         16,
	"OccupyNt":            17,
	"SurrenderNt":         18,
	"BetrayNt":            19,
	"EscapedNt":           20,
	"EscapedReturnNt":     21,
	"AutoDefOrderNt":      22,
	"SurrenderCity1Nt":    23,
	"SurrenderCity2Nt":    24,
	"SurrenderCity3Nt":    25,
	"SurrenderCountry1Nt": 26,
	"SurrenderCountry2Nt": 27,
	"AutocephalyNt2":      28,
	"AutocephalyNt3":      29,
}

func (x CampaignNoticeType) String() string {
	return proto.EnumName(CampaignNoticeType_name, int32(x))
}
func (CampaignNoticeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{6} }

type CampaignState_StateEnum int32

const (
	CampaignState_Normal   CampaignState_StateEnum = 0
	CampaignState_ReadyWar CampaignState_StateEnum = 1
	CampaignState_InWar    CampaignState_StateEnum = 2
	CampaignState_WarEnd   CampaignState_StateEnum = 3
	CampaignState_Unified  CampaignState_StateEnum = 4
	CampaignState_Pause    CampaignState_StateEnum = 5
)

var CampaignState_StateEnum_name = map[int32]string{
	0: "Normal",
	1: "ReadyWar",
	2: "InWar",
	3: "WarEnd",
	4: "Unified",
	5: "Pause",
}
var CampaignState_StateEnum_value = map[string]int32{
	"Normal":   0,
	"ReadyWar": 1,
	"InWar":    2,
	"WarEnd":   3,
	"Unified":  4,
	"Pause":    5,
}

func (x CampaignState_StateEnum) String() string {
	return proto.EnumName(CampaignState_StateEnum_name, int32(x))
}
func (CampaignState_StateEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{0, 0}
}

type CampaignPlayerState_StateEnum int32

const (
	CampaignPlayerState_Normal     CampaignPlayerState_StateEnum = 0
	CampaignPlayerState_BeCaptive  CampaignPlayerState_StateEnum = 1
	CampaignPlayerState_KickOut    CampaignPlayerState_StateEnum = 2
	CampaignPlayerState_Support    CampaignPlayerState_StateEnum = 3
	CampaignPlayerState_Expedition CampaignPlayerState_StateEnum = 4
	CampaignPlayerState_DefCity    CampaignPlayerState_StateEnum = 5
	CampaignPlayerState_Rectify    CampaignPlayerState_StateEnum = 6
	CampaignPlayerState_Rest       CampaignPlayerState_StateEnum = 7
)

var CampaignPlayerState_StateEnum_name = map[int32]string{
	0: "Normal",
	1: "BeCaptive",
	2: "KickOut",
	3: "Support",
	4: "Expedition",
	5: "DefCity",
	6: "Rectify",
	7: "Rest",
}
var CampaignPlayerState_StateEnum_value = map[string]int32{
	"Normal":     0,
	"BeCaptive":  1,
	"KickOut":    2,
	"Support":    3,
	"Expedition": 4,
	"DefCity":    5,
	"Rectify":    6,
	"Rest":       7,
}

func (x CampaignPlayerState_StateEnum) String() string {
	return proto.EnumName(CampaignPlayerState_StateEnum_name, int32(x))
}
func (CampaignPlayerState_StateEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{5, 0}
}

type MyTeamDisappear_ReasonEnum int32

const (
	MyTeamDisappear_Retreat        MyTeamDisappear_ReasonEnum = 0
	MyTeamDisappear_CityBeOccupy   MyTeamDisappear_ReasonEnum = 1
	MyTeamDisappear_OccupyCity     MyTeamDisappear_ReasonEnum = 2
	MyTeamDisappear_EnterCity      MyTeamDisappear_ReasonEnum = 3
	MyTeamDisappear_NoForage       MyTeamDisappear_ReasonEnum = 4
	MyTeamDisappear_CountryDestory MyTeamDisappear_ReasonEnum = 5
)

var MyTeamDisappear_ReasonEnum_name = map[int32]string{
	0: "Retreat",
	1: "CityBeOccupy",
	2: "OccupyCity",
	3: "EnterCity",
	4: "NoForage",
	5: "CountryDestory",
}
var MyTeamDisappear_ReasonEnum_value = map[string]int32{
	"Retreat":        0,
	"CityBeOccupy":   1,
	"OccupyCity":     2,
	"EnterCity":      3,
	"NoForage":       4,
	"CountryDestory": 5,
}

func (x MyTeamDisappear_ReasonEnum) String() string {
	return proto.EnumName(MyTeamDisappear_ReasonEnum_name, int32(x))
}
func (MyTeamDisappear_ReasonEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{12, 0}
}

type CampaignNotifyRedDotArg_RedDotType int32

const (
	CampaignNotifyRedDotArg_Misson CampaignNotifyRedDotArg_RedDotType = 0
	CampaignNotifyRedDotArg_Notice CampaignNotifyRedDotArg_RedDotType = 1
)

var CampaignNotifyRedDotArg_RedDotType_name = map[int32]string{
	0: "Misson",
	1: "Notice",
}
var CampaignNotifyRedDotArg_RedDotType_value = map[string]int32{
	"Misson": 0,
	"Notice": 1,
}

func (x CampaignNotifyRedDotArg_RedDotType) String() string {
	return proto.EnumName(CampaignNotifyRedDotArg_RedDotType_name, int32(x))
}
func (CampaignNotifyRedDotArg_RedDotType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{75, 0}
}

// switch CampaignState.State {
// case Normal:
// case ReadyWar:
// case InWar:
//    CampaignState.Arg = CaStateWarArg
// case Unified:
//    CampaignState.Arg = CaStateUnifiedArg
// case WarEnd:
//    CampaignState.Arg = CaStateWarEndArg
// }
type CampaignState struct {
	State CampaignState_StateEnum `protobuf:"varint,1,opt,name=State,proto3,enum=pb.CampaignState_StateEnum" json:"State,omitempty"`
	Arg   []byte                  `protobuf:"bytes,2,opt,name=Arg,proto3" json:"Arg,omitempty"`
}

func (m *CampaignState) Reset()                    { *m = CampaignState{} }
func (m *CampaignState) String() string            { return proto.CompactTextString(m) }
func (*CampaignState) ProtoMessage()               {}
func (*CampaignState) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{0} }

func (m *CampaignState) GetState() CampaignState_StateEnum {
	if m != nil {
		return m.State
	}
	return CampaignState_Normal
}

func (m *CampaignState) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type CaStateWarArg struct {
	RemainTime int32 `protobuf:"varint,1,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
}

func (m *CaStateWarArg) Reset()                    { *m = CaStateWarArg{} }
func (m *CaStateWarArg) String() string            { return proto.CompactTextString(m) }
func (*CaStateWarArg) ProtoMessage()               {}
func (*CaStateWarArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{1} }

func (m *CaStateWarArg) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

type CaStateUnifiedArg struct {
	CountryID           uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	YourMajestyName     string `protobuf:"bytes,2,opt,name=YourMajestyName,proto3" json:"YourMajestyName,omitempty"`
	CountryPlayerAmount int32  `protobuf:"varint,3,opt,name=CountryPlayerAmount,proto3" json:"CountryPlayerAmount,omitempty"`
}

func (m *CaStateUnifiedArg) Reset()                    { *m = CaStateUnifiedArg{} }
func (m *CaStateUnifiedArg) String() string            { return proto.CompactTextString(m) }
func (*CaStateUnifiedArg) ProtoMessage()               {}
func (*CaStateUnifiedArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{2} }

func (m *CaStateUnifiedArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *CaStateUnifiedArg) GetYourMajestyName() string {
	if m != nil {
		return m.YourMajestyName
	}
	return ""
}

func (m *CaStateUnifiedArg) GetCountryPlayerAmount() int32 {
	if m != nil {
		return m.CountryPlayerAmount
	}
	return 0
}

type CaStateWarEndArg struct {
	Contribution      int32   `protobuf:"varint,1,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
	LostCitys         []int32 `protobuf:"varint,2,rep,packed,name=LostCitys" json:"LostCitys,omitempty"`
	OccupyCitys       []int32 `protobuf:"varint,3,rep,packed,name=OccupyCitys" json:"OccupyCitys,omitempty"`
	NextWarRemainTime int32   `protobuf:"varint,4,opt,name=NextWarRemainTime,proto3" json:"NextWarRemainTime,omitempty"`
}

func (m *CaStateWarEndArg) Reset()                    { *m = CaStateWarEndArg{} }
func (m *CaStateWarEndArg) String() string            { return proto.CompactTextString(m) }
func (*CaStateWarEndArg) ProtoMessage()               {}
func (*CaStateWarEndArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{3} }

func (m *CaStateWarEndArg) GetContribution() int32 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

func (m *CaStateWarEndArg) GetLostCitys() []int32 {
	if m != nil {
		return m.LostCitys
	}
	return nil
}

func (m *CaStateWarEndArg) GetOccupyCitys() []int32 {
	if m != nil {
		return m.OccupyCitys
	}
	return nil
}

func (m *CaStateWarEndArg) GetNextWarRemainTime() int32 {
	if m != nil {
		return m.NextWarRemainTime
	}
	return 0
}

type UpdateCityStateArg struct {
	State           CityState `protobuf:"varint,1,opt,name=State,proto3,enum=pb.CityState" json:"State,omitempty"`
	CityID          int32     `protobuf:"varint,2,opt,name=CityID,proto3" json:"CityID,omitempty"`
	OccupyCountryID uint32    `protobuf:"varint,3,opt,name=OccupyCountryID,proto3" json:"OccupyCountryID,omitempty"`
}

func (m *UpdateCityStateArg) Reset()                    { *m = UpdateCityStateArg{} }
func (m *UpdateCityStateArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateCityStateArg) ProtoMessage()               {}
func (*UpdateCityStateArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{4} }

func (m *UpdateCityStateArg) GetState() CityState {
	if m != nil {
		return m.State
	}
	return CityState_NormalCS
}

func (m *UpdateCityStateArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *UpdateCityStateArg) GetOccupyCountryID() uint32 {
	if m != nil {
		return m.OccupyCountryID
	}
	return 0
}

// switch CampaignPlayerState.State {
// case KickOut:
//   CampaignPlayerState.Arg = CpStateKickOutArg
// case Rectify:
// case Rest:
//   CampaignPlayerState.Arg = CpStateLoadingArg
// case BeCaptive:
//   CampaignPlayerState.Arg = CpStateBeCaptiveArg
// }
type CampaignPlayerState struct {
	State CampaignPlayerState_StateEnum `protobuf:"varint,1,opt,name=State,proto3,enum=pb.CampaignPlayerState_StateEnum" json:"State,omitempty"`
	Arg   []byte                        `protobuf:"bytes,2,opt,name=Arg,proto3" json:"Arg,omitempty"`
}

func (m *CampaignPlayerState) Reset()                    { *m = CampaignPlayerState{} }
func (m *CampaignPlayerState) String() string            { return proto.CompactTextString(m) }
func (*CampaignPlayerState) ProtoMessage()               {}
func (*CampaignPlayerState) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{5} }

func (m *CampaignPlayerState) GetState() CampaignPlayerState_StateEnum {
	if m != nil {
		return m.State
	}
	return CampaignPlayerState_Normal
}

func (m *CampaignPlayerState) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type CpStateKickOutArg struct {
	RemainTime int32 `protobuf:"varint,1,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
}

func (m *CpStateKickOutArg) Reset()                    { *m = CpStateKickOutArg{} }
func (m *CpStateKickOutArg) String() string            { return proto.CompactTextString(m) }
func (*CpStateKickOutArg) ProtoMessage()               {}
func (*CpStateKickOutArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{6} }

func (m *CpStateKickOutArg) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

type CpStateLoadingArg struct {
	MaxTime    int32 `protobuf:"varint,1,opt,name=MaxTime,proto3" json:"MaxTime,omitempty"`
	RemainTime int32 `protobuf:"varint,2,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
}

func (m *CpStateLoadingArg) Reset()                    { *m = CpStateLoadingArg{} }
func (m *CpStateLoadingArg) String() string            { return proto.CompactTextString(m) }
func (*CpStateLoadingArg) ProtoMessage()               {}
func (*CpStateLoadingArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{7} }

func (m *CpStateLoadingArg) GetMaxTime() int32 {
	if m != nil {
		return m.MaxTime
	}
	return 0
}

func (m *CpStateLoadingArg) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

type CpStateBeCaptiveArg struct {
	RemainTime int32 `protobuf:"varint,1,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
}

func (m *CpStateBeCaptiveArg) Reset()                    { *m = CpStateBeCaptiveArg{} }
func (m *CpStateBeCaptiveArg) String() string            { return proto.CompactTextString(m) }
func (*CpStateBeCaptiveArg) ProtoMessage()               {}
func (*CpStateBeCaptiveArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{8} }

func (m *CpStateBeCaptiveArg) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

type CitySimpleData struct {
	CityID    int32     `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	CountryID uint32    `protobuf:"varint,2,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	State     CityState `protobuf:"varint,3,opt,name=State,proto3,enum=pb.CityState" json:"State,omitempty"`
	Defense   int32     `protobuf:"varint,4,opt,name=Defense,proto3" json:"Defense,omitempty"`
}

func (m *CitySimpleData) Reset()                    { *m = CitySimpleData{} }
func (m *CitySimpleData) String() string            { return proto.CompactTextString(m) }
func (*CitySimpleData) ProtoMessage()               {}
func (*CitySimpleData) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{9} }

func (m *CitySimpleData) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *CitySimpleData) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *CitySimpleData) GetState() CityState {
	if m != nil {
		return m.State
	}
	return CityState_NormalCS
}

func (m *CitySimpleData) GetDefense() int32 {
	if m != nil {
		return m.Defense
	}
	return 0
}

type TeamData struct {
	ID         int32     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CountryID  uint32    `protobuf:"varint,2,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	CityPath   []int32   `protobuf:"varint,3,rep,packed,name=CityPath" json:"CityPath,omitempty"`
	Trip       int32     `protobuf:"varint,4,opt,name=Trip,proto3" json:"Trip,omitempty"`
	State      TeamState `protobuf:"varint,5,opt,name=State,proto3,enum=pb.TeamState" json:"State,omitempty"`
	TeamAmount int32     `protobuf:"varint,6,opt,name=TeamAmount,proto3" json:"TeamAmount,omitempty"`
}

func (m *TeamData) Reset()                    { *m = TeamData{} }
func (m *TeamData) String() string            { return proto.CompactTextString(m) }
func (*TeamData) ProtoMessage()               {}
func (*TeamData) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{10} }

func (m *TeamData) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TeamData) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *TeamData) GetCityPath() []int32 {
	if m != nil {
		return m.CityPath
	}
	return nil
}

func (m *TeamData) GetTrip() int32 {
	if m != nil {
		return m.Trip
	}
	return 0
}

func (m *TeamData) GetState() TeamState {
	if m != nil {
		return m.State
	}
	return TeamState_NormalTS
}

func (m *TeamData) GetTeamAmount() int32 {
	if m != nil {
		return m.TeamAmount
	}
	return 0
}

// S2C_UPDATE_MY_TEAM_STATE 暂时会推以下状态 CanAttackCityTS，DisappearTS
// switch UpdateMyTeamStateArg.State {
// case DisappearTS:
//   UpdateMyTeamStateArg.Arg = MyTeamDisappear
// }
type UpdateMyTeamStateArg struct {
	State TeamState `protobuf:"varint,1,opt,name=State,proto3,enum=pb.TeamState" json:"State,omitempty"`
	Arg   []byte    `protobuf:"bytes,2,opt,name=Arg,proto3" json:"Arg,omitempty"`
}

func (m *UpdateMyTeamStateArg) Reset()                    { *m = UpdateMyTeamStateArg{} }
func (m *UpdateMyTeamStateArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateMyTeamStateArg) ProtoMessage()               {}
func (*UpdateMyTeamStateArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{11} }

func (m *UpdateMyTeamStateArg) GetState() TeamState {
	if m != nil {
		return m.State
	}
	return TeamState_NormalTS
}

func (m *UpdateMyTeamStateArg) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

// 我的队伍因为某些原因被动消失了
// switch MyTeamDisappear.Reason {
// case CityBeOccupy:
// case OccupyCity:
// case EnterCity:
//   MyTeamDisappear.Arg = TargetCity
// }
type MyTeamDisappear struct {
	Reason MyTeamDisappear_ReasonEnum `protobuf:"varint,1,opt,name=Reason,proto3,enum=pb.MyTeamDisappear_ReasonEnum" json:"Reason,omitempty"`
	Arg    []byte                     `protobuf:"bytes,2,opt,name=Arg,proto3" json:"Arg,omitempty"`
}

func (m *MyTeamDisappear) Reset()                    { *m = MyTeamDisappear{} }
func (m *MyTeamDisappear) String() string            { return proto.CompactTextString(m) }
func (*MyTeamDisappear) ProtoMessage()               {}
func (*MyTeamDisappear) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{12} }

func (m *MyTeamDisappear) GetReason() MyTeamDisappear_ReasonEnum {
	if m != nil {
		return m.Reason
	}
	return MyTeamDisappear_Retreat
}

func (m *MyTeamDisappear) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

// 如果OldCity == NewCity，什么事都没发生，否则提示 OldCity已沦陷，已撤退回到NewCity
// 只弹提示就行，玩家真实的城市数据会通过 S2C_UPDATE_MY_CITY 更新
type TeamRetreat struct {
	OldCity int32 `protobuf:"varint,1,opt,name=OldCity,proto3" json:"OldCity,omitempty"`
	NewCity int32 `protobuf:"varint,2,opt,name=NewCity,proto3" json:"NewCity,omitempty"`
}

func (m *TeamRetreat) Reset()                    { *m = TeamRetreat{} }
func (m *TeamRetreat) String() string            { return proto.CompactTextString(m) }
func (*TeamRetreat) ProtoMessage()               {}
func (*TeamRetreat) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{13} }

func (m *TeamRetreat) GetOldCity() int32 {
	if m != nil {
		return m.OldCity
	}
	return 0
}

func (m *TeamRetreat) GetNewCity() int32 {
	if m != nil {
		return m.NewCity
	}
	return 0
}

type MilitaryOrder struct {
	Type       MilitaryOrderType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.MilitaryOrderType" json:"Type,omitempty"`
	Forage     int32             `protobuf:"varint,2,opt,name=Forage,proto3" json:"Forage,omitempty"`
	Amount     int32             `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	MaxAmount  int32             `protobuf:"varint,4,opt,name=MaxAmount,proto3" json:"MaxAmount,omitempty"`
	TargetCity int32             `protobuf:"varint,5,opt,name=TargetCity,proto3" json:"TargetCity,omitempty"`
}

func (m *MilitaryOrder) Reset()                    { *m = MilitaryOrder{} }
func (m *MilitaryOrder) String() string            { return proto.CompactTextString(m) }
func (*MilitaryOrder) ProtoMessage()               {}
func (*MilitaryOrder) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{14} }

func (m *MilitaryOrder) GetType() MilitaryOrderType {
	if m != nil {
		return m.Type
	}
	return MilitaryOrderType_SupportMT
}

func (m *MilitaryOrder) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

func (m *MilitaryOrder) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MilitaryOrder) GetMaxAmount() int32 {
	if m != nil {
		return m.MaxAmount
	}
	return 0
}

func (m *MilitaryOrder) GetTargetCity() int32 {
	if m != nil {
		return m.TargetCity
	}
	return 0
}

type PublishMilitaryOrderArg struct {
	Type     MilitaryOrderType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.MilitaryOrderType" json:"Type,omitempty"`
	Forage   int32             `protobuf:"varint,2,opt,name=Forage,proto3" json:"Forage,omitempty"`
	Amount   int32             `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CityPath []int32           `protobuf:"varint,4,rep,packed,name=CityPath" json:"CityPath,omitempty"`
}

func (m *PublishMilitaryOrderArg) Reset()                    { *m = PublishMilitaryOrderArg{} }
func (m *PublishMilitaryOrderArg) String() string            { return proto.CompactTextString(m) }
func (*PublishMilitaryOrderArg) ProtoMessage()               {}
func (*PublishMilitaryOrderArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{15} }

func (m *PublishMilitaryOrderArg) GetType() MilitaryOrderType {
	if m != nil {
		return m.Type
	}
	return MilitaryOrderType_SupportMT
}

func (m *PublishMilitaryOrderArg) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

func (m *PublishMilitaryOrderArg) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PublishMilitaryOrderArg) GetCityPath() []int32 {
	if m != nil {
		return m.CityPath
	}
	return nil
}

type PublishMilitaryOrderReply struct {
	Orders []*MilitaryOrder `protobuf:"bytes,1,rep,name=Orders" json:"Orders,omitempty"`
	Forage int32            `protobuf:"varint,2,opt,name=Forage,proto3" json:"Forage,omitempty"`
}

func (m *PublishMilitaryOrderReply) Reset()         { *m = PublishMilitaryOrderReply{} }
func (m *PublishMilitaryOrderReply) String() string { return proto.CompactTextString(m) }
func (*PublishMilitaryOrderReply) ProtoMessage()    {}
func (*PublishMilitaryOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{16}
}

func (m *PublishMilitaryOrderReply) GetOrders() []*MilitaryOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *PublishMilitaryOrderReply) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

type CancelMilitaryOrderReply struct {
	Forage int32 `protobuf:"varint,1,opt,name=Forage,proto3" json:"Forage,omitempty"`
}

func (m *CancelMilitaryOrderReply) Reset()         { *m = CancelMilitaryOrderReply{} }
func (m *CancelMilitaryOrderReply) String() string { return proto.CompactTextString(m) }
func (*CancelMilitaryOrderReply) ProtoMessage()    {}
func (*CancelMilitaryOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{17}
}

func (m *CancelMilitaryOrderReply) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

type MilitaryOrderInfo struct {
	Orders []*MilitaryOrder `protobuf:"bytes,1,rep,name=Orders" json:"Orders,omitempty"`
}

func (m *MilitaryOrderInfo) Reset()                    { *m = MilitaryOrderInfo{} }
func (m *MilitaryOrderInfo) String() string            { return proto.CompactTextString(m) }
func (*MilitaryOrderInfo) ProtoMessage()               {}
func (*MilitaryOrderInfo) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{18} }

func (m *MilitaryOrderInfo) GetOrders() []*MilitaryOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type TargetMilitaryOrder struct {
	Type       MilitaryOrderType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.MilitaryOrderType" json:"Type,omitempty"`
	TargetCity int32             `protobuf:"varint,2,opt,name=TargetCity,proto3" json:"TargetCity,omitempty"`
}

func (m *TargetMilitaryOrder) Reset()                    { *m = TargetMilitaryOrder{} }
func (m *TargetMilitaryOrder) String() string            { return proto.CompactTextString(m) }
func (*TargetMilitaryOrder) ProtoMessage()               {}
func (*TargetMilitaryOrder) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{19} }

func (m *TargetMilitaryOrder) GetType() MilitaryOrderType {
	if m != nil {
		return m.Type
	}
	return MilitaryOrderType_SupportMT
}

func (m *TargetMilitaryOrder) GetTargetCity() int32 {
	if m != nil {
		return m.TargetCity
	}
	return 0
}

type AcceptMilitaryOrderArg struct {
	Type       MilitaryOrderType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.MilitaryOrderType" json:"Type,omitempty"`
	TargetCity int32             `protobuf:"varint,2,opt,name=TargetCity,proto3" json:"TargetCity,omitempty"`
	CardIDs    []uint32          `protobuf:"varint,3,rep,packed,name=CardIDs" json:"CardIDs,omitempty"`
}

func (m *AcceptMilitaryOrderArg) Reset()                    { *m = AcceptMilitaryOrderArg{} }
func (m *AcceptMilitaryOrderArg) String() string            { return proto.CompactTextString(m) }
func (*AcceptMilitaryOrderArg) ProtoMessage()               {}
func (*AcceptMilitaryOrderArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{20} }

func (m *AcceptMilitaryOrderArg) GetType() MilitaryOrderType {
	if m != nil {
		return m.Type
	}
	return MilitaryOrderType_SupportMT
}

func (m *AcceptMilitaryOrderArg) GetTargetCity() int32 {
	if m != nil {
		return m.TargetCity
	}
	return 0
}

func (m *AcceptMilitaryOrderArg) GetCardIDs() []uint32 {
	if m != nil {
		return m.CardIDs
	}
	return nil
}

type AcceptMilitaryOrderReply struct {
	State *CampaignPlayerState `protobuf:"bytes,1,opt,name=State" json:"State,omitempty"`
	Team  *TeamData            `protobuf:"bytes,2,opt,name=Team" json:"Team,omitempty"`
}

func (m *AcceptMilitaryOrderReply) Reset()         { *m = AcceptMilitaryOrderReply{} }
func (m *AcceptMilitaryOrderReply) String() string { return proto.CompactTextString(m) }
func (*AcceptMilitaryOrderReply) ProtoMessage()    {}
func (*AcceptMilitaryOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{21}
}

func (m *AcceptMilitaryOrderReply) GetState() *CampaignPlayerState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *AcceptMilitaryOrderReply) GetTeam() *TeamData {
	if m != nil {
		return m.Team
	}
	return nil
}

type CountrySimpleData struct {
	CountryID uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Flag      string `protobuf:"bytes,3,opt,name=Flag,proto3" json:"Flag,omitempty"`
}

func (m *CountrySimpleData) Reset()                    { *m = CountrySimpleData{} }
func (m *CountrySimpleData) String() string            { return proto.CompactTextString(m) }
func (*CountrySimpleData) ProtoMessage()               {}
func (*CountrySimpleData) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{22} }

func (m *CountrySimpleData) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *CountrySimpleData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountrySimpleData) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

type CampaignInfo struct {
	Citys              []*CitySimpleData    `protobuf:"bytes,1,rep,name=Citys" json:"Citys,omitempty"`
	Countrys           []*CountrySimpleData `protobuf:"bytes,2,rep,name=Countrys" json:"Countrys,omitempty"`
	MyCityID           int32                `protobuf:"varint,3,opt,name=MyCityID,proto3" json:"MyCityID,omitempty"`
	MyLocationCityID   int32                `protobuf:"varint,4,opt,name=MyLocationCityID,proto3" json:"MyLocationCityID,omitempty"`
	MyCityJob          CampaignJob          `protobuf:"varint,5,opt,name=MyCityJob,proto3,enum=pb.CampaignJob" json:"MyCityJob,omitempty"`
	MyCountryJob       CampaignJob          `protobuf:"varint,6,opt,name=MyCountryJob,proto3,enum=pb.CampaignJob" json:"MyCountryJob,omitempty"`
	MyTeam             *TeamData            `protobuf:"bytes,7,opt,name=MyTeam" json:"MyTeam,omitempty"`
	Teams              []*TeamData          `protobuf:"bytes,8,rep,name=Teams" json:"Teams,omitempty"`
	Forage             int32                `protobuf:"varint,9,opt,name=Forage,proto3" json:"Forage,omitempty"`
	HasCompleteMission bool                 `protobuf:"varint,10,opt,name=HasCompleteMission,proto3" json:"HasCompleteMission,omitempty"`
	HasNewNotice       bool                 `protobuf:"varint,11,opt,name=HasNewNotice,proto3" json:"HasNewNotice,omitempty"`
	State              *CampaignState       `protobuf:"bytes,12,opt,name=State" json:"State,omitempty"`
	MyState            *CampaignPlayerState `protobuf:"bytes,13,opt,name=MyState" json:"MyState,omitempty"`
	MyCountryID        uint32               `protobuf:"varint,14,opt,name=MyCountryID,proto3" json:"MyCountryID,omitempty"`
	Contribution       int32                `protobuf:"varint,15,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
	// 当LastCountryID大于0时，意味着当前势力独立没多久，你可以迁移到LastCountryID的城，直到S2C_UPDATE_MY_COUNTRY
	// 通知把LastCountryID变成0
	LastCountryID    uint32                `protobuf:"varint,16,opt,name=LastCountryID,proto3" json:"LastCountryID,omitempty"`
	TeamDisappear    *MyTeamDisappear      `protobuf:"bytes,17,opt,name=TeamDisappear" json:"TeamDisappear,omitempty"`
	SupportCards     []uint32              `protobuf:"varint,18,rep,packed,name=SupportCards" json:"SupportCards,omitempty"`
	MaxContribution  int32                 `protobuf:"varint,19,opt,name=MaxContribution,proto3" json:"MaxContribution,omitempty"`
	DefPlayerAmounts *CitysDefPlayerAmount `protobuf:"bytes,20,opt,name=DefPlayerAmounts" json:"DefPlayerAmounts,omitempty"`
}

func (m *CampaignInfo) Reset()                    { *m = CampaignInfo{} }
func (m *CampaignInfo) String() string            { return proto.CompactTextString(m) }
func (*CampaignInfo) ProtoMessage()               {}
func (*CampaignInfo) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{23} }

func (m *CampaignInfo) GetCitys() []*CitySimpleData {
	if m != nil {
		return m.Citys
	}
	return nil
}

func (m *CampaignInfo) GetCountrys() []*CountrySimpleData {
	if m != nil {
		return m.Countrys
	}
	return nil
}

func (m *CampaignInfo) GetMyCityID() int32 {
	if m != nil {
		return m.MyCityID
	}
	return 0
}

func (m *CampaignInfo) GetMyLocationCityID() int32 {
	if m != nil {
		return m.MyLocationCityID
	}
	return 0
}

func (m *CampaignInfo) GetMyCityJob() CampaignJob {
	if m != nil {
		return m.MyCityJob
	}
	return CampaignJob_UnknowJob
}

func (m *CampaignInfo) GetMyCountryJob() CampaignJob {
	if m != nil {
		return m.MyCountryJob
	}
	return CampaignJob_UnknowJob
}

func (m *CampaignInfo) GetMyTeam() *TeamData {
	if m != nil {
		return m.MyTeam
	}
	return nil
}

func (m *CampaignInfo) GetTeams() []*TeamData {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CampaignInfo) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

func (m *CampaignInfo) GetHasCompleteMission() bool {
	if m != nil {
		return m.HasCompleteMission
	}
	return false
}

func (m *CampaignInfo) GetHasNewNotice() bool {
	if m != nil {
		return m.HasNewNotice
	}
	return false
}

func (m *CampaignInfo) GetState() *CampaignState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CampaignInfo) GetMyState() *CampaignPlayerState {
	if m != nil {
		return m.MyState
	}
	return nil
}

func (m *CampaignInfo) GetMyCountryID() uint32 {
	if m != nil {
		return m.MyCountryID
	}
	return 0
}

func (m *CampaignInfo) GetContribution() int32 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

func (m *CampaignInfo) GetLastCountryID() uint32 {
	if m != nil {
		return m.LastCountryID
	}
	return 0
}

func (m *CampaignInfo) GetTeamDisappear() *MyTeamDisappear {
	if m != nil {
		return m.TeamDisappear
	}
	return nil
}

func (m *CampaignInfo) GetSupportCards() []uint32 {
	if m != nil {
		return m.SupportCards
	}
	return nil
}

func (m *CampaignInfo) GetMaxContribution() int32 {
	if m != nil {
		return m.MaxContribution
	}
	return 0
}

func (m *CampaignInfo) GetDefPlayerAmounts() *CitysDefPlayerAmount {
	if m != nil {
		return m.DefPlayerAmounts
	}
	return nil
}

type CreateCountryArg struct {
	Gold int32 `protobuf:"varint,1,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (m *CreateCountryArg) Reset()                    { *m = CreateCountryArg{} }
func (m *CreateCountryArg) String() string            { return proto.CompactTextString(m) }
func (*CreateCountryArg) ProtoMessage()               {}
func (*CreateCountryArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{24} }

func (m *CreateCountryArg) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type TargetCity struct {
	CityID int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
}

func (m *TargetCity) Reset()                    { *m = TargetCity{} }
func (m *TargetCity) String() string            { return proto.CompactTextString(m) }
func (*TargetCity) ProtoMessage()               {}
func (*TargetCity) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{25} }

func (m *TargetCity) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

type CountryCreatedArg struct {
	CountryID   uint32                `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	Name        string                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Flag        string                `protobuf:"bytes,3,opt,name=Flag,proto3" json:"Flag,omitempty"`
	CityID      int32                 `protobuf:"varint,4,opt,name=CityID,proto3" json:"CityID,omitempty"`
	YourMajesty *CampaignSimplePlayer `protobuf:"bytes,5,opt,name=YourMajesty" json:"YourMajesty,omitempty"`
}

func (m *CountryCreatedArg) Reset()                    { *m = CountryCreatedArg{} }
func (m *CountryCreatedArg) String() string            { return proto.CompactTextString(m) }
func (*CountryCreatedArg) ProtoMessage()               {}
func (*CountryCreatedArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{26} }

func (m *CountryCreatedArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *CountryCreatedArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountryCreatedArg) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *CountryCreatedArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *CountryCreatedArg) GetYourMajesty() *CampaignSimplePlayer {
	if m != nil {
		return m.YourMajesty
	}
	return nil
}

type CampaignPlayer struct {
	Uid          uint64               `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name         string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	HeadImg      string               `protobuf:"bytes,3,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	HeadFrame    string               `protobuf:"bytes,4,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	CityJob      CampaignJob          `protobuf:"varint,5,opt,name=CityJob,proto3,enum=pb.CampaignJob" json:"CityJob,omitempty"`
	CountryJob   CampaignJob          `protobuf:"varint,6,opt,name=CountryJob,proto3,enum=pb.CampaignJob" json:"CountryJob,omitempty"`
	PvpScore     int32                `protobuf:"varint,7,opt,name=PvpScore,proto3" json:"PvpScore,omitempty"`
	Contribution int32                `protobuf:"varint,8,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
	State        *CampaignPlayerState `protobuf:"bytes,9,opt,name=State" json:"State,omitempty"`
}

func (m *CampaignPlayer) Reset()                    { *m = CampaignPlayer{} }
func (m *CampaignPlayer) String() string            { return proto.CompactTextString(m) }
func (*CampaignPlayer) ProtoMessage()               {}
func (*CampaignPlayer) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{27} }

func (m *CampaignPlayer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CampaignPlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CampaignPlayer) GetHeadImg() string {
	if m != nil {
		return m.HeadImg
	}
	return ""
}

func (m *CampaignPlayer) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *CampaignPlayer) GetCityJob() CampaignJob {
	if m != nil {
		return m.CityJob
	}
	return CampaignJob_UnknowJob
}

func (m *CampaignPlayer) GetCountryJob() CampaignJob {
	if m != nil {
		return m.CountryJob
	}
	return CampaignJob_UnknowJob
}

func (m *CampaignPlayer) GetPvpScore() int32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *CampaignPlayer) GetContribution() int32 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

func (m *CampaignPlayer) GetState() *CampaignPlayerState {
	if m != nil {
		return m.State
	}
	return nil
}

type CampaignPlayerList struct {
	Players []*CampaignPlayer `protobuf:"bytes,1,rep,name=Players" json:"Players,omitempty"`
}

func (m *CampaignPlayerList) Reset()                    { *m = CampaignPlayerList{} }
func (m *CampaignPlayerList) String() string            { return proto.CompactTextString(m) }
func (*CampaignPlayerList) ProtoMessage()               {}
func (*CampaignPlayerList) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{28} }

func (m *CampaignPlayerList) GetPlayers() []*CampaignPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

type CityData struct {
	CountryID          uint32                  `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	PlayerAmount       int32                   `protobuf:"varint,2,opt,name=PlayerAmount,proto3" json:"PlayerAmount,omitempty"`
	Agriculture        int32                   `protobuf:"varint,3,opt,name=Agriculture,proto3" json:"Agriculture,omitempty"`
	Business           int32                   `protobuf:"varint,4,opt,name=Business,proto3" json:"Business,omitempty"`
	Defense            int32                   `protobuf:"varint,5,opt,name=Defense,proto3" json:"Defense,omitempty"`
	Forage             int32                   `protobuf:"varint,6,opt,name=Forage,proto3" json:"Forage,omitempty"`
	Gold               int32                   `protobuf:"varint,7,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Glory              int32                   `protobuf:"varint,8,opt,name=Glory,proto3" json:"Glory,omitempty"`
	Players            []*CampaignPlayer       `protobuf:"bytes,9,rep,name=Players" json:"Players,omitempty"`
	ApplyCreateCountry *ApplyCreateCountryData `protobuf:"bytes,10,opt,name=ApplyCreateCountry" json:"ApplyCreateCountry,omitempty"`
	YourMajesty        *CampaignSimplePlayer   `protobuf:"bytes,11,opt,name=YourMajesty" json:"YourMajesty,omitempty"`
	InCityPlayerAmount int32                   `protobuf:"varint,12,opt,name=InCityPlayerAmount,proto3" json:"InCityPlayerAmount,omitempty"`
}

func (m *CityData) Reset()                    { *m = CityData{} }
func (m *CityData) String() string            { return proto.CompactTextString(m) }
func (*CityData) ProtoMessage()               {}
func (*CityData) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{29} }

func (m *CityData) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *CityData) GetPlayerAmount() int32 {
	if m != nil {
		return m.PlayerAmount
	}
	return 0
}

func (m *CityData) GetAgriculture() int32 {
	if m != nil {
		return m.Agriculture
	}
	return 0
}

func (m *CityData) GetBusiness() int32 {
	if m != nil {
		return m.Business
	}
	return 0
}

func (m *CityData) GetDefense() int32 {
	if m != nil {
		return m.Defense
	}
	return 0
}

func (m *CityData) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

func (m *CityData) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *CityData) GetGlory() int32 {
	if m != nil {
		return m.Glory
	}
	return 0
}

func (m *CityData) GetPlayers() []*CampaignPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CityData) GetApplyCreateCountry() *ApplyCreateCountryData {
	if m != nil {
		return m.ApplyCreateCountry
	}
	return nil
}

func (m *CityData) GetYourMajesty() *CampaignSimplePlayer {
	if m != nil {
		return m.YourMajesty
	}
	return nil
}

func (m *CityData) GetInCityPlayerAmount() int32 {
	if m != nil {
		return m.InCityPlayerAmount
	}
	return 0
}

type FetchApplyCreateCountryPlayersArg struct {
	CityID int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Page   int32 `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *FetchApplyCreateCountryPlayersArg) Reset()         { *m = FetchApplyCreateCountryPlayersArg{} }
func (m *FetchApplyCreateCountryPlayersArg) String() string { return proto.CompactTextString(m) }
func (*FetchApplyCreateCountryPlayersArg) ProtoMessage()    {}
func (*FetchApplyCreateCountryPlayersArg) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{30}
}

func (m *FetchApplyCreateCountryPlayersArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *FetchApplyCreateCountryPlayersArg) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ApplyCreateCountryPlayer struct {
	Player *CampaignPlayer `protobuf:"bytes,1,opt,name=Player" json:"Player,omitempty"`
	Gold   int32           `protobuf:"varint,2,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (m *ApplyCreateCountryPlayer) Reset()         { *m = ApplyCreateCountryPlayer{} }
func (m *ApplyCreateCountryPlayer) String() string { return proto.CompactTextString(m) }
func (*ApplyCreateCountryPlayer) ProtoMessage()    {}
func (*ApplyCreateCountryPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{31}
}

func (m *ApplyCreateCountryPlayer) GetPlayer() *CampaignPlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *ApplyCreateCountryPlayer) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type ApplyCreateCountryPlayers struct {
	Players []*ApplyCreateCountryPlayer `protobuf:"bytes,1,rep,name=Players" json:"Players,omitempty"`
}

func (m *ApplyCreateCountryPlayers) Reset()         { *m = ApplyCreateCountryPlayers{} }
func (m *ApplyCreateCountryPlayers) String() string { return proto.CompactTextString(m) }
func (*ApplyCreateCountryPlayers) ProtoMessage()    {}
func (*ApplyCreateCountryPlayers) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{32}
}

func (m *ApplyCreateCountryPlayers) GetPlayers() []*ApplyCreateCountryPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

type ApplyCreateCountryData struct {
	RemainTime    int32                       `protobuf:"varint,1,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
	Players       []*ApplyCreateCountryPlayer `protobuf:"bytes,2,rep,name=Players" json:"Players,omitempty"`
	MyApplyMoney  int32                       `protobuf:"varint,3,opt,name=MyApplyMoney,proto3" json:"MyApplyMoney,omitempty"`
	MyCountryName int32                       `protobuf:"varint,4,opt,name=MyCountryName,proto3" json:"MyCountryName,omitempty"`
}

func (m *ApplyCreateCountryData) Reset()                    { *m = ApplyCreateCountryData{} }
func (m *ApplyCreateCountryData) String() string            { return proto.CompactTextString(m) }
func (*ApplyCreateCountryData) ProtoMessage()               {}
func (*ApplyCreateCountryData) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{33} }

func (m *ApplyCreateCountryData) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *ApplyCreateCountryData) GetPlayers() []*ApplyCreateCountryPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *ApplyCreateCountryData) GetMyApplyMoney() int32 {
	if m != nil {
		return m.MyApplyMoney
	}
	return 0
}

func (m *ApplyCreateCountryData) GetMyCountryName() int32 {
	if m != nil {
		return m.MyCountryName
	}
	return 0
}

type UpdateForageArg struct {
	ForageAmount int32 `protobuf:"varint,1,opt,name=ForageAmount,proto3" json:"ForageAmount,omitempty"`
}

func (m *UpdateForageArg) Reset()                    { *m = UpdateForageArg{} }
func (m *UpdateForageArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateForageArg) ProtoMessage()               {}
func (*UpdateForageArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{34} }

func (m *UpdateForageArg) GetForageAmount() int32 {
	if m != nil {
		return m.ForageAmount
	}
	return 0
}

type CampaignMission struct {
	Type                CampaignMsType    `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.CampaignMsType" json:"Type,omitempty"`
	GoldReward          int32             `protobuf:"varint,2,opt,name=GoldReward,proto3" json:"GoldReward,omitempty"`
	Amount              int32             `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	TransportType       TransportTypeEnum `protobuf:"varint,4,opt,name=TransportType,proto3,enum=pb.TransportTypeEnum" json:"TransportType,omitempty"`
	TransportTargetCity int32             `protobuf:"varint,5,opt,name=TransportTargetCity,proto3" json:"TransportTargetCity,omitempty"`
	TransportMaxTime    int32             `protobuf:"varint,6,opt,name=TransportMaxTime,proto3" json:"TransportMaxTime,omitempty"`
	MaxAmount           int32             `protobuf:"varint,7,opt,name=MaxAmount,proto3" json:"MaxAmount,omitempty"`
	Contribution        int32             `protobuf:"varint,8,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
}

func (m *CampaignMission) Reset()                    { *m = CampaignMission{} }
func (m *CampaignMission) String() string            { return proto.CompactTextString(m) }
func (*CampaignMission) ProtoMessage()               {}
func (*CampaignMission) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{35} }

func (m *CampaignMission) GetType() CampaignMsType {
	if m != nil {
		return m.Type
	}
	return CampaignMsType_UnknowMsType
}

func (m *CampaignMission) GetGoldReward() int32 {
	if m != nil {
		return m.GoldReward
	}
	return 0
}

func (m *CampaignMission) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CampaignMission) GetTransportType() TransportTypeEnum {
	if m != nil {
		return m.TransportType
	}
	return TransportTypeEnum_GoldTT
}

func (m *CampaignMission) GetTransportTargetCity() int32 {
	if m != nil {
		return m.TransportTargetCity
	}
	return 0
}

func (m *CampaignMission) GetTransportMaxTime() int32 {
	if m != nil {
		return m.TransportMaxTime
	}
	return 0
}

func (m *CampaignMission) GetMaxAmount() int32 {
	if m != nil {
		return m.MaxAmount
	}
	return 0
}

func (m *CampaignMission) GetContribution() int32 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

type ExecutingCampaignMission struct {
	Type         CampaignMsType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.CampaignMsType" json:"Type,omitempty"`
	GoldReward   int32          `protobuf:"varint,2,opt,name=GoldReward,proto3" json:"GoldReward,omitempty"`
	RemainTime   int32          `protobuf:"varint,3,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
	Cards        []uint32       `protobuf:"varint,4,rep,packed,name=Cards" json:"Cards,omitempty"`
	MaxTime      int32          `protobuf:"varint,5,opt,name=MaxTime,proto3" json:"MaxTime,omitempty"`
	Contribution int32          `protobuf:"varint,6,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
}

func (m *ExecutingCampaignMission) Reset()         { *m = ExecutingCampaignMission{} }
func (m *ExecutingCampaignMission) String() string { return proto.CompactTextString(m) }
func (*ExecutingCampaignMission) ProtoMessage()    {}
func (*ExecutingCampaignMission) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{36}
}

func (m *ExecutingCampaignMission) GetType() CampaignMsType {
	if m != nil {
		return m.Type
	}
	return CampaignMsType_UnknowMsType
}

func (m *ExecutingCampaignMission) GetGoldReward() int32 {
	if m != nil {
		return m.GoldReward
	}
	return 0
}

func (m *ExecutingCampaignMission) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *ExecutingCampaignMission) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *ExecutingCampaignMission) GetMaxTime() int32 {
	if m != nil {
		return m.MaxTime
	}
	return 0
}

func (m *ExecutingCampaignMission) GetContribution() int32 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

type CampaignMissionInfo struct {
	Missions         []*CampaignMission        `protobuf:"bytes,1,rep,name=Missions" json:"Missions,omitempty"`
	ExecutingMission *ExecutingCampaignMission `protobuf:"bytes,2,opt,name=ExecutingMission" json:"ExecutingMission,omitempty"`
}

func (m *CampaignMissionInfo) Reset()                    { *m = CampaignMissionInfo{} }
func (m *CampaignMissionInfo) String() string            { return proto.CompactTextString(m) }
func (*CampaignMissionInfo) ProtoMessage()               {}
func (*CampaignMissionInfo) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{37} }

func (m *CampaignMissionInfo) GetMissions() []*CampaignMission {
	if m != nil {
		return m.Missions
	}
	return nil
}

func (m *CampaignMissionInfo) GetExecutingMission() *ExecutingCampaignMission {
	if m != nil {
		return m.ExecutingMission
	}
	return nil
}

type CampaignPublishMissionArg struct {
	Type          CampaignMsType    `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.CampaignMsType" json:"Type,omitempty"`
	GoldReward    int32             `protobuf:"varint,2,opt,name=GoldReward,proto3" json:"GoldReward,omitempty"`
	Amount        int32             `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	TransportType TransportTypeEnum `protobuf:"varint,4,opt,name=TransportType,proto3,enum=pb.TransportTypeEnum" json:"TransportType,omitempty"`
	// 运输、调派路径，参考CampaignExpeditionArg.CityPath，CampaignMission.Type==Transport 或 Dispatch 时有值
	TransportCityPath []int32 `protobuf:"varint,5,rep,packed,name=TransportCityPath" json:"TransportCityPath,omitempty"`
}

func (m *CampaignPublishMissionArg) Reset()         { *m = CampaignPublishMissionArg{} }
func (m *CampaignPublishMissionArg) String() string { return proto.CompactTextString(m) }
func (*CampaignPublishMissionArg) ProtoMessage()    {}
func (*CampaignPublishMissionArg) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{38}
}

func (m *CampaignPublishMissionArg) GetType() CampaignMsType {
	if m != nil {
		return m.Type
	}
	return CampaignMsType_UnknowMsType
}

func (m *CampaignPublishMissionArg) GetGoldReward() int32 {
	if m != nil {
		return m.GoldReward
	}
	return 0
}

func (m *CampaignPublishMissionArg) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CampaignPublishMissionArg) GetTransportType() TransportTypeEnum {
	if m != nil {
		return m.TransportType
	}
	return TransportTypeEnum_GoldTT
}

func (m *CampaignPublishMissionArg) GetTransportCityPath() []int32 {
	if m != nil {
		return m.TransportCityPath
	}
	return nil
}

type CampaignPublishMissionReply struct {
	MissionInfo *CampaignMissionInfo `protobuf:"bytes,1,opt,name=MissionInfo" json:"MissionInfo,omitempty"`
	Gold        int32                `protobuf:"varint,2,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Forage      int32                `protobuf:"varint,3,opt,name=Forage,proto3" json:"Forage,omitempty"`
}

func (m *CampaignPublishMissionReply) Reset()         { *m = CampaignPublishMissionReply{} }
func (m *CampaignPublishMissionReply) String() string { return proto.CompactTextString(m) }
func (*CampaignPublishMissionReply) ProtoMessage()    {}
func (*CampaignPublishMissionReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{39}
}

func (m *CampaignPublishMissionReply) GetMissionInfo() *CampaignMissionInfo {
	if m != nil {
		return m.MissionInfo
	}
	return nil
}

func (m *CampaignPublishMissionReply) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *CampaignPublishMissionReply) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

type AcceptCampaignMissionArg struct {
	Type                CampaignMsType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.CampaignMsType" json:"Type,omitempty"`
	Cards               []uint32       `protobuf:"varint,2,rep,packed,name=Cards" json:"Cards,omitempty"`
	TransportTargetCity int32          `protobuf:"varint,3,opt,name=TransportTargetCity,proto3" json:"TransportTargetCity,omitempty"`
}

func (m *AcceptCampaignMissionArg) Reset()         { *m = AcceptCampaignMissionArg{} }
func (m *AcceptCampaignMissionArg) String() string { return proto.CompactTextString(m) }
func (*AcceptCampaignMissionArg) ProtoMessage()    {}
func (*AcceptCampaignMissionArg) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{40}
}

func (m *AcceptCampaignMissionArg) GetType() CampaignMsType {
	if m != nil {
		return m.Type
	}
	return CampaignMsType_UnknowMsType
}

func (m *AcceptCampaignMissionArg) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *AcceptCampaignMissionArg) GetTransportTargetCity() int32 {
	if m != nil {
		return m.TransportTargetCity
	}
	return 0
}

type AcceptCampaignMissionReply struct {
	RemainTime int32              `protobuf:"varint,1,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
	Missions   []*CampaignMission `protobuf:"bytes,2,rep,name=Missions" json:"Missions,omitempty"`
}

func (m *AcceptCampaignMissionReply) Reset()         { *m = AcceptCampaignMissionReply{} }
func (m *AcceptCampaignMissionReply) String() string { return proto.CompactTextString(m) }
func (*AcceptCampaignMissionReply) ProtoMessage()    {}
func (*AcceptCampaignMissionReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{41}
}

func (m *AcceptCampaignMissionReply) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *AcceptCampaignMissionReply) GetMissions() []*CampaignMission {
	if m != nil {
		return m.Missions
	}
	return nil
}

type FetchCityPlayersArg struct {
	CityID int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Page   int32 `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *FetchCityPlayersArg) Reset()                    { *m = FetchCityPlayersArg{} }
func (m *FetchCityPlayersArg) String() string            { return proto.CompactTextString(m) }
func (*FetchCityPlayersArg) ProtoMessage()               {}
func (*FetchCityPlayersArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{42} }

func (m *FetchCityPlayersArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *FetchCityPlayersArg) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SetForagePriceArg struct {
	Price int32 `protobuf:"varint,1,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (m *SetForagePriceArg) Reset()                    { *m = SetForagePriceArg{} }
func (m *SetForagePriceArg) String() string            { return proto.CompactTextString(m) }
func (*SetForagePriceArg) ProtoMessage()               {}
func (*SetForagePriceArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{43} }

func (m *SetForagePriceArg) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type FetchForagePriceReply struct {
	ForageAmount int32 `protobuf:"varint,1,opt,name=ForageAmount,proto3" json:"ForageAmount,omitempty"`
	Price        int32 `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (m *FetchForagePriceReply) Reset()                    { *m = FetchForagePriceReply{} }
func (m *FetchForagePriceReply) String() string            { return proto.CompactTextString(m) }
func (*FetchForagePriceReply) ProtoMessage()               {}
func (*FetchForagePriceReply) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{44} }

func (m *FetchForagePriceReply) GetForageAmount() int32 {
	if m != nil {
		return m.ForageAmount
	}
	return 0
}

func (m *FetchForagePriceReply) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type NewCountryNtArg struct {
	PlayerName  string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	CountryName string `protobuf:"bytes,2,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	CityID      int32  `protobuf:"varint,3,opt,name=CityID,proto3" json:"CityID,omitempty"`
}

func (m *NewCountryNtArg) Reset()                    { *m = NewCountryNtArg{} }
func (m *NewCountryNtArg) String() string            { return proto.CompactTextString(m) }
func (*NewCountryNtArg) ProtoMessage()               {}
func (*NewCountryNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{45} }

func (m *NewCountryNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *NewCountryNtArg) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *NewCountryNtArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

type AppointJobNtArg struct {
	PlayerName       string      `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	TargetPlayerName string      `protobuf:"bytes,2,opt,name=TargetPlayerName,proto3" json:"TargetPlayerName,omitempty"`
	Job              CampaignJob `protobuf:"varint,3,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	CityID           int32       `protobuf:"varint,4,opt,name=CityID,proto3" json:"CityID,omitempty"`
}

func (m *AppointJobNtArg) Reset()                    { *m = AppointJobNtArg{} }
func (m *AppointJobNtArg) String() string            { return proto.CompactTextString(m) }
func (*AppointJobNtArg) ProtoMessage()               {}
func (*AppointJobNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{46} }

func (m *AppointJobNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *AppointJobNtArg) GetTargetPlayerName() string {
	if m != nil {
		return m.TargetPlayerName
	}
	return ""
}

func (m *AppointJobNtArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *AppointJobNtArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

type RecallJobNtArg struct {
	Job    CampaignJob `protobuf:"varint,1,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	CityID int32       `protobuf:"varint,2,opt,name=CityID,proto3" json:"CityID,omitempty"`
}

func (m *RecallJobNtArg) Reset()                    { *m = RecallJobNtArg{} }
func (m *RecallJobNtArg) String() string            { return proto.CompactTextString(m) }
func (*RecallJobNtArg) ProtoMessage()               {}
func (*RecallJobNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{47} }

func (m *RecallJobNtArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *RecallJobNtArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

type AutocephalyNtArg struct {
	Job            CampaignJob `protobuf:"varint,1,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	PlayerName     string      `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	CountryName    string      `protobuf:"bytes,3,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	NewCountryName string      `protobuf:"bytes,4,opt,name=NewCountryName,proto3" json:"NewCountryName,omitempty"`
}

func (m *AutocephalyNtArg) Reset()                    { *m = AutocephalyNtArg{} }
func (m *AutocephalyNtArg) String() string            { return proto.CompactTextString(m) }
func (*AutocephalyNtArg) ProtoMessage()               {}
func (*AutocephalyNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{48} }

func (m *AutocephalyNtArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *AutocephalyNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *AutocephalyNtArg) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *AutocephalyNtArg) GetNewCountryName() string {
	if m != nil {
		return m.NewCountryName
	}
	return ""
}

type KickOutNtArg struct {
	Job        CampaignJob `protobuf:"varint,1,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	PlayerName string      `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	CityID     int32       `protobuf:"varint,3,opt,name=CityID,proto3" json:"CityID,omitempty"`
}

func (m *KickOutNtArg) Reset()                    { *m = KickOutNtArg{} }
func (m *KickOutNtArg) String() string            { return proto.CompactTextString(m) }
func (*KickOutNtArg) ProtoMessage()               {}
func (*KickOutNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{49} }

func (m *KickOutNtArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *KickOutNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *KickOutNtArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

type YourMajestyChangeNtArg struct {
	YourMajestyName    string `protobuf:"bytes,1,opt,name=YourMajestyName,proto3" json:"YourMajestyName,omitempty"`
	NewYourMajestyName string `protobuf:"bytes,2,opt,name=NewYourMajestyName,proto3" json:"NewYourMajestyName,omitempty"`
}

func (m *YourMajestyChangeNtArg) Reset()                    { *m = YourMajestyChangeNtArg{} }
func (m *YourMajestyChangeNtArg) String() string            { return proto.CompactTextString(m) }
func (*YourMajestyChangeNtArg) ProtoMessage()               {}
func (*YourMajestyChangeNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{50} }

func (m *YourMajestyChangeNtArg) GetYourMajestyName() string {
	if m != nil {
		return m.YourMajestyName
	}
	return ""
}

func (m *YourMajestyChangeNtArg) GetNewYourMajestyName() string {
	if m != nil {
		return m.NewYourMajestyName
	}
	return ""
}

type ResignNtArg struct {
	Job        CampaignJob `protobuf:"varint,1,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	PlayerName string      `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	CityID     int32       `protobuf:"varint,3,opt,name=CityID,proto3" json:"CityID,omitempty"`
}

func (m *ResignNtArg) Reset()                    { *m = ResignNtArg{} }
func (m *ResignNtArg) String() string            { return proto.CompactTextString(m) }
func (*ResignNtArg) ProtoMessage()               {}
func (*ResignNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{51} }

func (m *ResignNtArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *ResignNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *ResignNtArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

type BeOccupyNtArg struct {
	CountryName    string `protobuf:"bytes,1,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	BeOccupyCityID int32  `protobuf:"varint,2,opt,name=BeOccupyCityID,proto3" json:"BeOccupyCityID,omitempty"`
	CaptiveAmount  int32  `protobuf:"varint,3,opt,name=CaptiveAmount,proto3" json:"CaptiveAmount,omitempty"`
}

func (m *BeOccupyNtArg) Reset()                    { *m = BeOccupyNtArg{} }
func (m *BeOccupyNtArg) String() string            { return proto.CompactTextString(m) }
func (*BeOccupyNtArg) ProtoMessage()               {}
func (*BeOccupyNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{52} }

func (m *BeOccupyNtArg) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *BeOccupyNtArg) GetBeOccupyCityID() int32 {
	if m != nil {
		return m.BeOccupyCityID
	}
	return 0
}

func (m *BeOccupyNtArg) GetCaptiveAmount() int32 {
	if m != nil {
		return m.CaptiveAmount
	}
	return 0
}

type DestoryCountryNtArg struct {
	CountryName          string `protobuf:"bytes,1,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	BeDestoryCountryName string `protobuf:"bytes,2,opt,name=BeDestoryCountryName,proto3" json:"BeDestoryCountryName,omitempty"`
}

func (m *DestoryCountryNtArg) Reset()                    { *m = DestoryCountryNtArg{} }
func (m *DestoryCountryNtArg) String() string            { return proto.CompactTextString(m) }
func (*DestoryCountryNtArg) ProtoMessage()               {}
func (*DestoryCountryNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{53} }

func (m *DestoryCountryNtArg) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *DestoryCountryNtArg) GetBeDestoryCountryName() string {
	if m != nil {
		return m.BeDestoryCountryName
	}
	return ""
}

type UnifiedWordNtArg struct {
	CountryName     string `protobuf:"bytes,1,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	YourMajestyName string `protobuf:"bytes,2,opt,name=YourMajestyName,proto3" json:"YourMajestyName,omitempty"`
}

func (m *UnifiedWordNtArg) Reset()                    { *m = UnifiedWordNtArg{} }
func (m *UnifiedWordNtArg) String() string            { return proto.CompactTextString(m) }
func (*UnifiedWordNtArg) ProtoMessage()               {}
func (*UnifiedWordNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{54} }

func (m *UnifiedWordNtArg) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *UnifiedWordNtArg) GetYourMajestyName() string {
	if m != nil {
		return m.YourMajestyName
	}
	return ""
}

type AutocephalyVoteNtArg struct {
	Job         CampaignJob `protobuf:"varint,1,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	PlayerName  string      `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	CityID      int32       `protobuf:"varint,3,opt,name=CityID,proto3" json:"CityID,omitempty"`
	CountryName string      `protobuf:"bytes,4,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
}

func (m *AutocephalyVoteNtArg) Reset()                    { *m = AutocephalyVoteNtArg{} }
func (m *AutocephalyVoteNtArg) String() string            { return proto.CompactTextString(m) }
func (*AutocephalyVoteNtArg) ProtoMessage()               {}
func (*AutocephalyVoteNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{55} }

func (m *AutocephalyVoteNtArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *AutocephalyVoteNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *AutocephalyVoteNtArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *AutocephalyVoteNtArg) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

type CapitalInjectionNtArg struct {
	Job        CampaignJob `protobuf:"varint,1,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	PlayerName string      `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	Gold       int32       `protobuf:"varint,3,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (m *CapitalInjectionNtArg) Reset()                    { *m = CapitalInjectionNtArg{} }
func (m *CapitalInjectionNtArg) String() string            { return proto.CompactTextString(m) }
func (*CapitalInjectionNtArg) ProtoMessage()               {}
func (*CapitalInjectionNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{56} }

func (m *CapitalInjectionNtArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *CapitalInjectionNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *CapitalInjectionNtArg) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type ProductionNtArg struct {
	Gold   int32 `protobuf:"varint,1,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Forage int32 `protobuf:"varint,2,opt,name=Forage,proto3" json:"Forage,omitempty"`
}

func (m *ProductionNtArg) Reset()                    { *m = ProductionNtArg{} }
func (m *ProductionNtArg) String() string            { return proto.CompactTextString(m) }
func (*ProductionNtArg) ProtoMessage()               {}
func (*ProductionNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{57} }

func (m *ProductionNtArg) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *ProductionNtArg) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

type SalaryNtArg struct {
	Gold int32 `protobuf:"varint,1,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (m *SalaryNtArg) Reset()                    { *m = SalaryNtArg{} }
func (m *SalaryNtArg) String() string            { return proto.CompactTextString(m) }
func (*SalaryNtArg) ProtoMessage()               {}
func (*SalaryNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{58} }

func (m *SalaryNtArg) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type TransportNtArg struct {
	FromCity      int32             `protobuf:"varint,1,opt,name=FromCity,proto3" json:"FromCity,omitempty"`
	TargetCity    int32             `protobuf:"varint,2,opt,name=TargetCity,proto3" json:"TargetCity,omitempty"`
	TransportType TransportTypeEnum `protobuf:"varint,3,opt,name=TransportType,proto3,enum=pb.TransportTypeEnum" json:"TransportType,omitempty"`
	Amount        int32             `protobuf:"varint,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *TransportNtArg) Reset()                    { *m = TransportNtArg{} }
func (m *TransportNtArg) String() string            { return proto.CompactTextString(m) }
func (*TransportNtArg) ProtoMessage()               {}
func (*TransportNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{59} }

func (m *TransportNtArg) GetFromCity() int32 {
	if m != nil {
		return m.FromCity
	}
	return 0
}

func (m *TransportNtArg) GetTargetCity() int32 {
	if m != nil {
		return m.TargetCity
	}
	return 0
}

func (m *TransportNtArg) GetTransportType() TransportTypeEnum {
	if m != nil {
		return m.TransportType
	}
	return TransportTypeEnum_GoldTT
}

func (m *TransportNtArg) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type OccupyNtArg struct {
	OccupyCityID  int32 `protobuf:"varint,1,opt,name=OccupyCityID,proto3" json:"OccupyCityID,omitempty"`
	CaptiveAmount int32 `protobuf:"varint,2,opt,name=CaptiveAmount,proto3" json:"CaptiveAmount,omitempty"`
}

func (m *OccupyNtArg) Reset()                    { *m = OccupyNtArg{} }
func (m *OccupyNtArg) String() string            { return proto.CompactTextString(m) }
func (*OccupyNtArg) ProtoMessage()               {}
func (*OccupyNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{60} }

func (m *OccupyNtArg) GetOccupyCityID() int32 {
	if m != nil {
		return m.OccupyCityID
	}
	return 0
}

func (m *OccupyNtArg) GetCaptiveAmount() int32 {
	if m != nil {
		return m.CaptiveAmount
	}
	return 0
}

type SurrenderNtArg struct {
	PlayerName string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
}

func (m *SurrenderNtArg) Reset()                    { *m = SurrenderNtArg{} }
func (m *SurrenderNtArg) String() string            { return proto.CompactTextString(m) }
func (*SurrenderNtArg) ProtoMessage()               {}
func (*SurrenderNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{61} }

func (m *SurrenderNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type BetrayNtArg struct {
	PlayerName string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
}

func (m *BetrayNtArg) Reset()                    { *m = BetrayNtArg{} }
func (m *BetrayNtArg) String() string            { return proto.CompactTextString(m) }
func (*BetrayNtArg) ProtoMessage()               {}
func (*BetrayNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{62} }

func (m *BetrayNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type EscapedNtArg struct {
	PlayerName string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
}

func (m *EscapedNtArg) Reset()                    { *m = EscapedNtArg{} }
func (m *EscapedNtArg) String() string            { return proto.CompactTextString(m) }
func (*EscapedNtArg) ProtoMessage()               {}
func (*EscapedNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{63} }

func (m *EscapedNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type EscapedReturnNtArg struct {
	PlayerName string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
}

func (m *EscapedReturnNtArg) Reset()                    { *m = EscapedReturnNtArg{} }
func (m *EscapedReturnNtArg) String() string            { return proto.CompactTextString(m) }
func (*EscapedReturnNtArg) ProtoMessage()               {}
func (*EscapedReturnNtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{64} }

func (m *EscapedReturnNtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type SurrenderCity1NtArg struct {
	PlayerName        string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	CityID            int32  `protobuf:"varint,2,opt,name=CityID,proto3" json:"CityID,omitempty"`
	TargetCountryName string `protobuf:"bytes,3,opt,name=TargetCountryName,proto3" json:"TargetCountryName,omitempty"`
}

func (m *SurrenderCity1NtArg) Reset()                    { *m = SurrenderCity1NtArg{} }
func (m *SurrenderCity1NtArg) String() string            { return proto.CompactTextString(m) }
func (*SurrenderCity1NtArg) ProtoMessage()               {}
func (*SurrenderCity1NtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{65} }

func (m *SurrenderCity1NtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *SurrenderCity1NtArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *SurrenderCity1NtArg) GetTargetCountryName() string {
	if m != nil {
		return m.TargetCountryName
	}
	return ""
}

type SurrenderCity2NtArg struct {
	PlayerName string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	CityID     int32  `protobuf:"varint,2,opt,name=CityID,proto3" json:"CityID,omitempty"`
}

func (m *SurrenderCity2NtArg) Reset()                    { *m = SurrenderCity2NtArg{} }
func (m *SurrenderCity2NtArg) String() string            { return proto.CompactTextString(m) }
func (*SurrenderCity2NtArg) ProtoMessage()               {}
func (*SurrenderCity2NtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{66} }

func (m *SurrenderCity2NtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *SurrenderCity2NtArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

type SurrenderCountry1NtArg struct {
	PlayerName        string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	TargetCountryName string `protobuf:"bytes,2,opt,name=TargetCountryName,proto3" json:"TargetCountryName,omitempty"`
}

func (m *SurrenderCountry1NtArg) Reset()                    { *m = SurrenderCountry1NtArg{} }
func (m *SurrenderCountry1NtArg) String() string            { return proto.CompactTextString(m) }
func (*SurrenderCountry1NtArg) ProtoMessage()               {}
func (*SurrenderCountry1NtArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{67} }

func (m *SurrenderCountry1NtArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *SurrenderCountry1NtArg) GetTargetCountryName() string {
	if m != nil {
		return m.TargetCountryName
	}
	return ""
}

type AutocephalyNt2Arg struct {
	CityID         int32       `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Job            CampaignJob `protobuf:"varint,2,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	PlayerName     string      `protobuf:"bytes,3,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	OldCountryName string      `protobuf:"bytes,4,opt,name=OldCountryName,proto3" json:"OldCountryName,omitempty"`
	NewCountryName string      `protobuf:"bytes,5,opt,name=NewCountryName,proto3" json:"NewCountryName,omitempty"`
}

func (m *AutocephalyNt2Arg) Reset()                    { *m = AutocephalyNt2Arg{} }
func (m *AutocephalyNt2Arg) String() string            { return proto.CompactTextString(m) }
func (*AutocephalyNt2Arg) ProtoMessage()               {}
func (*AutocephalyNt2Arg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{68} }

func (m *AutocephalyNt2Arg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *AutocephalyNt2Arg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *AutocephalyNt2Arg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *AutocephalyNt2Arg) GetOldCountryName() string {
	if m != nil {
		return m.OldCountryName
	}
	return ""
}

func (m *AutocephalyNt2Arg) GetNewCountryName() string {
	if m != nil {
		return m.NewCountryName
	}
	return ""
}

type AutocephalyNt3Arg struct {
	PlayerName     string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	CityID         int32  `protobuf:"varint,2,opt,name=CityID,proto3" json:"CityID,omitempty"`
	NewCountryName string `protobuf:"bytes,3,opt,name=NewCountryName,proto3" json:"NewCountryName,omitempty"`
}

func (m *AutocephalyNt3Arg) Reset()                    { *m = AutocephalyNt3Arg{} }
func (m *AutocephalyNt3Arg) String() string            { return proto.CompactTextString(m) }
func (*AutocephalyNt3Arg) ProtoMessage()               {}
func (*AutocephalyNt3Arg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{69} }

func (m *AutocephalyNt3Arg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *AutocephalyNt3Arg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *AutocephalyNt3Arg) GetNewCountryName() string {
	if m != nil {
		return m.NewCountryName
	}
	return ""
}

// switch CampaignNotice.Type {
// case NewCountryNt:
//   CampaignNotice.Args = NewCountryNtArg
// case AppointJobNt:
//   CampaignNotice.Args = AppointJobNtArg
// case RecallJobNt:
//   CampaignNotice.Args = RecallJobNtArg
// case AutocephalyNt:
//   CampaignNotice.Args = AutocephalyNtArg
// case KickOutNt:
//   CampaignNotice.Args = KickOutNtArg
// case YourMajestyChangeNt:
//   CampaignNotice.Args = YourMajestyChangeNtArg
// case QuitCountryNt:
//   CampaignNotice.Args = QuitCountryNtArg
// case BeOccupyNt:
//   CampaignNotice.Args = BeOccupyNtArg
// case DestoryCountryNt:
//   CampaignNotice.Args = DestoryCountryNtArg
// case UnifiedWordNt:
//   CampaignNotice.Args = UnifiedWordNtArg
// case AutocephalyVoteNt:
//   CampaignNotice.Args = AutocephalyVoteNtArg
// case CapitalInjectionNt:
//   CampaignNotice.Args = CapitalInjectionNtArg
// case ProductionNt:
//   CampaignNotice.Args = ProductionNtArg
// case SalaryNt:
//   CampaignNotice.Args = SalaryNtArg
// case TransportNt:
//   CampaignNotice.Args = TransportNtArg
// case OccupyNt:
//   CampaignNotice.Args = OccupyNtArg
// case SurrenderNt:
//   CampaignNotice.Args = SurrenderNtArg
// case BetrayNt:
//   CampaignNotice.Args = BetrayNtArg
// case EscapedNt:
//   CampaignNotice.Args = EscapedNtArg
// case EscapedReturnNt:
//   CampaignNotice.Args = EscapedReturnNtArg
// case AutoDefOrderNt:
//   CampaignNotice.Args = TargetCity
// case SurrenderCity1Nt:
// case SurrenderCity3Nt:
//   CampaignNotice.Args = SurrenderCity1NtArg
// case SurrenderCity2Nt:
//   CampaignNotice.Args = SurrenderCity2NtArg
// case SurrenderCountry1Nt:
// case SurrenderCountry2Nt:
//   CampaignNotice.Args = SurrenderCountry1NtArg
// case AutocephalyNt2:
//   CampaignNotice.Args = AutocephalyNt2Arg
// case AutocephalyNt3:
//   CampaignNotice.Args = AutocephalyNt3Arg
// }
type CampaignNotice struct {
	ID   int32              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type CampaignNoticeType `protobuf:"varint,2,opt,name=Type,proto3,enum=pb.CampaignNoticeType" json:"Type,omitempty"`
	Time int32              `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`
	Args []byte             `protobuf:"bytes,4,opt,name=Args,proto3" json:"Args,omitempty"`
}

func (m *CampaignNotice) Reset()                    { *m = CampaignNotice{} }
func (m *CampaignNotice) String() string            { return proto.CompactTextString(m) }
func (*CampaignNotice) ProtoMessage()               {}
func (*CampaignNotice) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{70} }

func (m *CampaignNotice) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CampaignNotice) GetType() CampaignNoticeType {
	if m != nil {
		return m.Type
	}
	return CampaignNoticeType_CustomNt
}

func (m *CampaignNotice) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CampaignNotice) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type CampaignNoticeInfo struct {
	Notices []*CampaignNotice `protobuf:"bytes,1,rep,name=Notices" json:"Notices,omitempty"`
}

func (m *CampaignNoticeInfo) Reset()                    { *m = CampaignNoticeInfo{} }
func (m *CampaignNoticeInfo) String() string            { return proto.CompactTextString(m) }
func (*CampaignNoticeInfo) ProtoMessage()               {}
func (*CampaignNoticeInfo) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{71} }

func (m *CampaignNoticeInfo) GetNotices() []*CampaignNotice {
	if m != nil {
		return m.Notices
	}
	return nil
}

type CityPlayerAmount struct {
	CityID              int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	PlayerAmount        int32 `protobuf:"varint,2,opt,name=PlayerAmount,proto3" json:"PlayerAmount,omitempty"`
	Glory               int32 `protobuf:"varint,3,opt,name=Glory,proto3" json:"Glory,omitempty"`
	MaxApplyCountryGold int32 `protobuf:"varint,4,opt,name=MaxApplyCountryGold,proto3" json:"MaxApplyCountryGold,omitempty"`
	AvgMissionReward    int32 `protobuf:"varint,5,opt,name=AvgMissionReward,proto3" json:"AvgMissionReward,omitempty"`
}

func (m *CityPlayerAmount) Reset()                    { *m = CityPlayerAmount{} }
func (m *CityPlayerAmount) String() string            { return proto.CompactTextString(m) }
func (*CityPlayerAmount) ProtoMessage()               {}
func (*CityPlayerAmount) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{72} }

func (m *CityPlayerAmount) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *CityPlayerAmount) GetPlayerAmount() int32 {
	if m != nil {
		return m.PlayerAmount
	}
	return 0
}

func (m *CityPlayerAmount) GetGlory() int32 {
	if m != nil {
		return m.Glory
	}
	return 0
}

func (m *CityPlayerAmount) GetMaxApplyCountryGold() int32 {
	if m != nil {
		return m.MaxApplyCountryGold
	}
	return 0
}

func (m *CityPlayerAmount) GetAvgMissionReward() int32 {
	if m != nil {
		return m.AvgMissionReward
	}
	return 0
}

type AllCityPlayerAmount struct {
	PlayerAmounts []*CityPlayerAmount `protobuf:"bytes,1,rep,name=PlayerAmounts" json:"PlayerAmounts,omitempty"`
}

func (m *AllCityPlayerAmount) Reset()                    { *m = AllCityPlayerAmount{} }
func (m *AllCityPlayerAmount) String() string            { return proto.CompactTextString(m) }
func (*AllCityPlayerAmount) ProtoMessage()               {}
func (*AllCityPlayerAmount) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{73} }

func (m *AllCityPlayerAmount) GetPlayerAmounts() []*CityPlayerAmount {
	if m != nil {
		return m.PlayerAmounts
	}
	return nil
}

type FetchCountryPlayersArg struct {
	CountryID uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	Page      int32  `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *FetchCountryPlayersArg) Reset()                    { *m = FetchCountryPlayersArg{} }
func (m *FetchCountryPlayersArg) String() string            { return proto.CompactTextString(m) }
func (*FetchCountryPlayersArg) ProtoMessage()               {}
func (*FetchCountryPlayersArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{74} }

func (m *FetchCountryPlayersArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *FetchCountryPlayersArg) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CampaignNotifyRedDotArg struct {
	Type CampaignNotifyRedDotArg_RedDotType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.CampaignNotifyRedDotArg_RedDotType" json:"Type,omitempty"`
}

func (m *CampaignNotifyRedDotArg) Reset()                    { *m = CampaignNotifyRedDotArg{} }
func (m *CampaignNotifyRedDotArg) String() string            { return proto.CompactTextString(m) }
func (*CampaignNotifyRedDotArg) ProtoMessage()               {}
func (*CampaignNotifyRedDotArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{75} }

func (m *CampaignNotifyRedDotArg) GetType() CampaignNotifyRedDotArg_RedDotType {
	if m != nil {
		return m.Type
	}
	return CampaignNotifyRedDotArg_Misson
}

type AppointJobArg struct {
	Uid    uint64      `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Job    CampaignJob `protobuf:"varint,2,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
	OldUid uint64      `protobuf:"varint,3,opt,name=OldUid,proto3" json:"OldUid,omitempty"`
}

func (m *AppointJobArg) Reset()                    { *m = AppointJobArg{} }
func (m *AppointJobArg) String() string            { return proto.CompactTextString(m) }
func (*AppointJobArg) ProtoMessage()               {}
func (*AppointJobArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{76} }

func (m *AppointJobArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AppointJobArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

func (m *AppointJobArg) GetOldUid() uint64 {
	if m != nil {
		return m.OldUid
	}
	return 0
}

type RecallJobArg struct {
	Uid uint64      `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Job CampaignJob `protobuf:"varint,2,opt,name=Job,proto3,enum=pb.CampaignJob" json:"Job,omitempty"`
}

func (m *RecallJobArg) Reset()                    { *m = RecallJobArg{} }
func (m *RecallJobArg) String() string            { return proto.CompactTextString(m) }
func (*RecallJobArg) ProtoMessage()               {}
func (*RecallJobArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{77} }

func (m *RecallJobArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RecallJobArg) GetJob() CampaignJob {
	if m != nil {
		return m.Job
	}
	return CampaignJob_UnknowJob
}

type CityDefense struct {
	CityID  int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Defense int32 `protobuf:"varint,2,opt,name=Defense,proto3" json:"Defense,omitempty"`
}

func (m *CityDefense) Reset()                    { *m = CityDefense{} }
func (m *CityDefense) String() string            { return proto.CompactTextString(m) }
func (*CityDefense) ProtoMessage()               {}
func (*CityDefense) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{78} }

func (m *CityDefense) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *CityDefense) GetDefense() int32 {
	if m != nil {
		return m.Defense
	}
	return 0
}

type SyncCityDefenseArg struct {
	CityDefenses []*CityDefense `protobuf:"bytes,1,rep,name=CityDefenses" json:"CityDefenses,omitempty"`
}

func (m *SyncCityDefenseArg) Reset()                    { *m = SyncCityDefenseArg{} }
func (m *SyncCityDefenseArg) String() string            { return proto.CompactTextString(m) }
func (*SyncCityDefenseArg) ProtoMessage()               {}
func (*SyncCityDefenseArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{79} }

func (m *SyncCityDefenseArg) GetCityDefenses() []*CityDefense {
	if m != nil {
		return m.CityDefenses
	}
	return nil
}

type CampaignUpdateJobArg struct {
	CityJob    CampaignJob `protobuf:"varint,1,opt,name=CityJob,proto3,enum=pb.CampaignJob" json:"CityJob,omitempty"`
	CountryJob CampaignJob `protobuf:"varint,2,opt,name=CountryJob,proto3,enum=pb.CampaignJob" json:"CountryJob,omitempty"`
}

func (m *CampaignUpdateJobArg) Reset()                    { *m = CampaignUpdateJobArg{} }
func (m *CampaignUpdateJobArg) String() string            { return proto.CompactTextString(m) }
func (*CampaignUpdateJobArg) ProtoMessage()               {}
func (*CampaignUpdateJobArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{80} }

func (m *CampaignUpdateJobArg) GetCityJob() CampaignJob {
	if m != nil {
		return m.CityJob
	}
	return CampaignJob_UnknowJob
}

func (m *CampaignUpdateJobArg) GetCountryJob() CampaignJob {
	if m != nil {
		return m.CountryJob
	}
	return CampaignJob_UnknowJob
}

type PatrolCityReply struct {
	Contribution int32 `protobuf:"varint,1,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
	Salary       int32 `protobuf:"varint,2,opt,name=Salary,proto3" json:"Salary,omitempty"`
}

func (m *PatrolCityReply) Reset()                    { *m = PatrolCityReply{} }
func (m *PatrolCityReply) String() string            { return proto.CompactTextString(m) }
func (*PatrolCityReply) ProtoMessage()               {}
func (*PatrolCityReply) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{81} }

func (m *PatrolCityReply) GetContribution() int32 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

func (m *PatrolCityReply) GetSalary() int32 {
	if m != nil {
		return m.Salary
	}
	return 0
}

type CityCapitalInjectionArg struct {
	CityID int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Gold   int32 `protobuf:"varint,2,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (m *CityCapitalInjectionArg) Reset()                    { *m = CityCapitalInjectionArg{} }
func (m *CityCapitalInjectionArg) String() string            { return proto.CompactTextString(m) }
func (*CityCapitalInjectionArg) ProtoMessage()               {}
func (*CityCapitalInjectionArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{82} }

func (m *CityCapitalInjectionArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *CityCapitalInjectionArg) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type CityCapitalInjectionReply struct {
	CurGold int32 `protobuf:"varint,1,opt,name=CurGold,proto3" json:"CurGold,omitempty"`
}

func (m *CityCapitalInjectionReply) Reset()         { *m = CityCapitalInjectionReply{} }
func (m *CityCapitalInjectionReply) String() string { return proto.CompactTextString(m) }
func (*CityCapitalInjectionReply) ProtoMessage()    {}
func (*CityCapitalInjectionReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{83}
}

func (m *CityCapitalInjectionReply) GetCurGold() int32 {
	if m != nil {
		return m.CurGold
	}
	return 0
}

type UpdateMyCityArg struct {
	CityID         int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	LocationCityID int32 `protobuf:"varint,2,opt,name=LocationCityID,proto3" json:"LocationCityID,omitempty"`
}

func (m *UpdateMyCityArg) Reset()                    { *m = UpdateMyCityArg{} }
func (m *UpdateMyCityArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateMyCityArg) ProtoMessage()               {}
func (*UpdateMyCityArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{84} }

func (m *UpdateMyCityArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *UpdateMyCityArg) GetLocationCityID() int32 {
	if m != nil {
		return m.LocationCityID
	}
	return 0
}

type CampaignTargetPlayer struct {
	Uid uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (m *CampaignTargetPlayer) Reset()                    { *m = CampaignTargetPlayer{} }
func (m *CampaignTargetPlayer) String() string            { return proto.CompactTextString(m) }
func (*CampaignTargetPlayer) ProtoMessage()               {}
func (*CampaignTargetPlayer) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{85} }

func (m *CampaignTargetPlayer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type UpdateMyCountryArg struct {
	CountryID     uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	LastCountryID uint32 `protobuf:"varint,2,opt,name=LastCountryID,proto3" json:"LastCountryID,omitempty"`
}

func (m *UpdateMyCountryArg) Reset()                    { *m = UpdateMyCountryArg{} }
func (m *UpdateMyCountryArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateMyCountryArg) ProtoMessage()               {}
func (*UpdateMyCountryArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{86} }

func (m *UpdateMyCountryArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *UpdateMyCountryArg) GetLastCountryID() uint32 {
	if m != nil {
		return m.LastCountryID
	}
	return 0
}

type AutocephalyInfo struct {
	CountryName  string            `protobuf:"bytes,1,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	AgreePlayers []*CampaignPlayer `protobuf:"bytes,2,rep,name=AgreePlayers" json:"AgreePlayers,omitempty"`
}

func (m *AutocephalyInfo) Reset()                    { *m = AutocephalyInfo{} }
func (m *AutocephalyInfo) String() string            { return proto.CompactTextString(m) }
func (*AutocephalyInfo) ProtoMessage()               {}
func (*AutocephalyInfo) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{87} }

func (m *AutocephalyInfo) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *AutocephalyInfo) GetAgreePlayers() []*CampaignPlayer {
	if m != nil {
		return m.AgreePlayers
	}
	return nil
}

type AutocephalyArg struct {
	CountryName string `protobuf:"bytes,1,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
}

func (m *AutocephalyArg) Reset()                    { *m = AutocephalyArg{} }
func (m *AutocephalyArg) String() string            { return proto.CompactTextString(m) }
func (*AutocephalyArg) ProtoMessage()               {}
func (*AutocephalyArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{88} }

func (m *AutocephalyArg) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

type VoteAutocephalyArg struct {
	IsAgree  bool  `protobuf:"varint,1,opt,name=IsAgree,proto3" json:"IsAgree,omitempty"`
	NoticeID int32 `protobuf:"varint,2,opt,name=NoticeID,proto3" json:"NoticeID,omitempty"`
}

func (m *VoteAutocephalyArg) Reset()                    { *m = VoteAutocephalyArg{} }
func (m *VoteAutocephalyArg) String() string            { return proto.CompactTextString(m) }
func (*VoteAutocephalyArg) ProtoMessage()               {}
func (*VoteAutocephalyArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{89} }

func (m *VoteAutocephalyArg) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

func (m *VoteAutocephalyArg) GetNoticeID() int32 {
	if m != nil {
		return m.NoticeID
	}
	return 0
}

type AccDefCityLoseLoadingReply struct {
	RemainTime int32 `protobuf:"varint,1,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
}

func (m *AccDefCityLoseLoadingReply) Reset()         { *m = AccDefCityLoseLoadingReply{} }
func (m *AccDefCityLoseLoadingReply) String() string { return proto.CompactTextString(m) }
func (*AccDefCityLoseLoadingReply) ProtoMessage()    {}
func (*AccDefCityLoseLoadingReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{90}
}

func (m *AccDefCityLoseLoadingReply) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

type CountryModifyNameArg struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *CountryModifyNameArg) Reset()                    { *m = CountryModifyNameArg{} }
func (m *CountryModifyNameArg) String() string            { return proto.CompactTextString(m) }
func (*CountryModifyNameArg) ProtoMessage()               {}
func (*CountryModifyNameArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{91} }

func (m *CountryModifyNameArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CountryModifyFlagArg struct {
	Flag string `protobuf:"bytes,1,opt,name=Flag,proto3" json:"Flag,omitempty"`
}

func (m *CountryModifyFlagArg) Reset()                    { *m = CountryModifyFlagArg{} }
func (m *CountryModifyFlagArg) String() string            { return proto.CompactTextString(m) }
func (*CountryModifyFlagArg) ProtoMessage()               {}
func (*CountryModifyFlagArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{92} }

func (m *CountryModifyFlagArg) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

type UpdateCountryNameArg struct {
	CountryID uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *UpdateCountryNameArg) Reset()                    { *m = UpdateCountryNameArg{} }
func (m *UpdateCountryNameArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateCountryNameArg) ProtoMessage()               {}
func (*UpdateCountryNameArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{93} }

func (m *UpdateCountryNameArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *UpdateCountryNameArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateCountryFlagArg struct {
	CountryID uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	Flag      string `protobuf:"bytes,2,opt,name=Flag,proto3" json:"Flag,omitempty"`
}

func (m *UpdateCountryFlagArg) Reset()                    { *m = UpdateCountryFlagArg{} }
func (m *UpdateCountryFlagArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateCountryFlagArg) ProtoMessage()               {}
func (*UpdateCountryFlagArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{94} }

func (m *UpdateCountryFlagArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *UpdateCountryFlagArg) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

type CancelPublishMissionArg struct {
	Type                CampaignMsType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.CampaignMsType" json:"Type,omitempty"`
	TransportTargetCity int32          `protobuf:"varint,5,opt,name=TransportTargetCity,proto3" json:"TransportTargetCity,omitempty"`
}

func (m *CancelPublishMissionArg) Reset()                    { *m = CancelPublishMissionArg{} }
func (m *CancelPublishMissionArg) String() string            { return proto.CompactTextString(m) }
func (*CancelPublishMissionArg) ProtoMessage()               {}
func (*CancelPublishMissionArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{95} }

func (m *CancelPublishMissionArg) GetType() CampaignMsType {
	if m != nil {
		return m.Type
	}
	return CampaignMsType_UnknowMsType
}

func (m *CancelPublishMissionArg) GetTransportTargetCity() int32 {
	if m != nil {
		return m.TransportTargetCity
	}
	return 0
}

type CancelPublishMissionReply struct {
	Gold   int32 `protobuf:"varint,1,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Forage int32 `protobuf:"varint,2,opt,name=Forage,proto3" json:"Forage,omitempty"`
}

func (m *CancelPublishMissionReply) Reset()         { *m = CancelPublishMissionReply{} }
func (m *CancelPublishMissionReply) String() string { return proto.CompactTextString(m) }
func (*CancelPublishMissionReply) ProtoMessage()    {}
func (*CancelPublishMissionReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{96}
}

func (m *CancelPublishMissionReply) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *CancelPublishMissionReply) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

type CampaignTeams struct {
	Teams []*TeamData `protobuf:"bytes,1,rep,name=Teams" json:"Teams,omitempty"`
}

func (m *CampaignTeams) Reset()                    { *m = CampaignTeams{} }
func (m *CampaignTeams) String() string            { return proto.CompactTextString(m) }
func (*CampaignTeams) ProtoMessage()               {}
func (*CampaignTeams) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{97} }

func (m *CampaignTeams) GetTeams() []*TeamData {
	if m != nil {
		return m.Teams
	}
	return nil
}

type CountryDestoryed struct {
	CountryID uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
}

func (m *CountryDestoryed) Reset()                    { *m = CountryDestoryed{} }
func (m *CountryDestoryed) String() string            { return proto.CompactTextString(m) }
func (*CountryDestoryed) ProtoMessage()               {}
func (*CountryDestoryed) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{98} }

func (m *CountryDestoryed) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

type CapitalInjectionRecord struct {
	Player *CampaignPlayer `protobuf:"bytes,1,opt,name=Player" json:"Player,omitempty"`
	Gold   int32           `protobuf:"varint,2,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Time   int32           `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *CapitalInjectionRecord) Reset()                    { *m = CapitalInjectionRecord{} }
func (m *CapitalInjectionRecord) String() string            { return proto.CompactTextString(m) }
func (*CapitalInjectionRecord) ProtoMessage()               {}
func (*CapitalInjectionRecord) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{99} }

func (m *CapitalInjectionRecord) GetPlayer() *CampaignPlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *CapitalInjectionRecord) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *CapitalInjectionRecord) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type CityCapitalInjectionHistory struct {
	Records []*CapitalInjectionRecord `protobuf:"bytes,1,rep,name=Records" json:"Records,omitempty"`
}

func (m *CityCapitalInjectionHistory) Reset()         { *m = CityCapitalInjectionHistory{} }
func (m *CityCapitalInjectionHistory) String() string { return proto.CompactTextString(m) }
func (*CityCapitalInjectionHistory) ProtoMessage()    {}
func (*CityCapitalInjectionHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{100}
}

func (m *CityCapitalInjectionHistory) GetRecords() []*CapitalInjectionRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type UpdateContributionArg struct {
	Contribution    int32 `protobuf:"varint,1,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
	MaxContribution int32 `protobuf:"varint,2,opt,name=MaxContribution,proto3" json:"MaxContribution,omitempty"`
}

func (m *UpdateContributionArg) Reset()                    { *m = UpdateContributionArg{} }
func (m *UpdateContributionArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateContributionArg) ProtoMessage()               {}
func (*UpdateContributionArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{101} }

func (m *UpdateContributionArg) GetContribution() int32 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

func (m *UpdateContributionArg) GetMaxContribution() int32 {
	if m != nil {
		return m.MaxContribution
	}
	return 0
}

type CityNotice struct {
	Notice string `protobuf:"bytes,1,opt,name=Notice,proto3" json:"Notice,omitempty"`
}

func (m *CityNotice) Reset()                    { *m = CityNotice{} }
func (m *CityNotice) String() string            { return proto.CompactTextString(m) }
func (*CityNotice) ProtoMessage()               {}
func (*CityNotice) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{102} }

func (m *CityNotice) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

type FetchCityCapitalInjectionArg struct {
	CityID int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Page   int32 `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *FetchCityCapitalInjectionArg) Reset()         { *m = FetchCityCapitalInjectionArg{} }
func (m *FetchCityCapitalInjectionArg) String() string { return proto.CompactTextString(m) }
func (*FetchCityCapitalInjectionArg) ProtoMessage()    {}
func (*FetchCityCapitalInjectionArg) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{103}
}

func (m *FetchCityCapitalInjectionArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *FetchCityCapitalInjectionArg) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CampaignSimplePlayer struct {
	Uid       uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	HeadImg   string `protobuf:"bytes,3,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	HeadFrame string `protobuf:"bytes,4,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	PvpScore  int32  `protobuf:"varint,5,opt,name=PvpScore,proto3" json:"PvpScore,omitempty"`
}

func (m *CampaignSimplePlayer) Reset()                    { *m = CampaignSimplePlayer{} }
func (m *CampaignSimplePlayer) String() string            { return proto.CompactTextString(m) }
func (*CampaignSimplePlayer) ProtoMessage()               {}
func (*CampaignSimplePlayer) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{104} }

func (m *CampaignSimplePlayer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CampaignSimplePlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CampaignSimplePlayer) GetHeadImg() string {
	if m != nil {
		return m.HeadImg
	}
	return ""
}

func (m *CampaignSimplePlayer) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *CampaignSimplePlayer) GetPvpScore() int32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

type SyncCityPlayerAmount struct {
	CityID int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Amount int32 `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *SyncCityPlayerAmount) Reset()                    { *m = SyncCityPlayerAmount{} }
func (m *SyncCityPlayerAmount) String() string            { return proto.CompactTextString(m) }
func (*SyncCityPlayerAmount) ProtoMessage()               {}
func (*SyncCityPlayerAmount) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{105} }

func (m *SyncCityPlayerAmount) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *SyncCityPlayerAmount) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CampaignSupportCard struct {
	CardIDs []uint32 `protobuf:"varint,1,rep,packed,name=CardIDs" json:"CardIDs,omitempty"`
}

func (m *CampaignSupportCard) Reset()                    { *m = CampaignSupportCard{} }
func (m *CampaignSupportCard) String() string            { return proto.CompactTextString(m) }
func (*CampaignSupportCard) ProtoMessage()               {}
func (*CampaignSupportCard) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{106} }

func (m *CampaignSupportCard) GetCardIDs() []uint32 {
	if m != nil {
		return m.CardIDs
	}
	return nil
}

type SurrenderCityArg struct {
	CountryID uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
}

func (m *SurrenderCityArg) Reset()                    { *m = SurrenderCityArg{} }
func (m *SurrenderCityArg) String() string            { return proto.CompactTextString(m) }
func (*SurrenderCityArg) ProtoMessage()               {}
func (*SurrenderCityArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{107} }

func (m *SurrenderCityArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

type UpdateCityCountryArg struct {
	CityID    int32  `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	CountryID uint32 `protobuf:"varint,2,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
}

func (m *UpdateCityCountryArg) Reset()                    { *m = UpdateCityCountryArg{} }
func (m *UpdateCityCountryArg) String() string            { return proto.CompactTextString(m) }
func (*UpdateCityCountryArg) ProtoMessage()               {}
func (*UpdateCityCountryArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{108} }

func (m *UpdateCityCountryArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *UpdateCityCountryArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

type CitysDefPlayerAmount struct {
	Amounts []*SyncCityPlayerAmount `protobuf:"bytes,1,rep,name=Amounts" json:"Amounts,omitempty"`
}

func (m *CitysDefPlayerAmount) Reset()                    { *m = CitysDefPlayerAmount{} }
func (m *CitysDefPlayerAmount) String() string            { return proto.CompactTextString(m) }
func (*CitysDefPlayerAmount) ProtoMessage()               {}
func (*CitysDefPlayerAmount) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{109} }

func (m *CitysDefPlayerAmount) GetAmounts() []*SyncCityPlayerAmount {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type CampaignBuyGoodsArg struct {
	Type    string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	GoodsID int32  `protobuf:"varint,2,opt,name=GoodsID,proto3" json:"GoodsID,omitempty"`
}

func (m *CampaignBuyGoodsArg) Reset()                    { *m = CampaignBuyGoodsArg{} }
func (m *CampaignBuyGoodsArg) String() string            { return proto.CompactTextString(m) }
func (*CampaignBuyGoodsArg) ProtoMessage()               {}
func (*CampaignBuyGoodsArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{110} }

func (m *CampaignBuyGoodsArg) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CampaignBuyGoodsArg) GetGoodsID() int32 {
	if m != nil {
		return m.GoodsID
	}
	return 0
}

type ContributionReply struct {
	Contribution int32 `protobuf:"varint,1,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
}

func (m *ContributionReply) Reset()                    { *m = ContributionReply{} }
func (m *ContributionReply) String() string            { return proto.CompactTextString(m) }
func (*ContributionReply) ProtoMessage()               {}
func (*ContributionReply) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{111} }

func (m *ContributionReply) GetContribution() int32 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

type GSettleCityArg struct {
	CityID int32                 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Player *CampaignSimplePlayer `protobuf:"bytes,2,opt,name=Player" json:"Player,omitempty"`
}

func (m *GSettleCityArg) Reset()                    { *m = GSettleCityArg{} }
func (m *GSettleCityArg) String() string            { return proto.CompactTextString(m) }
func (*GSettleCityArg) ProtoMessage()               {}
func (*GSettleCityArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{112} }

func (m *GSettleCityArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *GSettleCityArg) GetPlayer() *CampaignSimplePlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

type GCancelCampaignMissionReply struct {
	CardIDs []uint32 `protobuf:"varint,1,rep,packed,name=CardIDs" json:"CardIDs,omitempty"`
}

func (m *GCancelCampaignMissionReply) Reset()         { *m = GCancelCampaignMissionReply{} }
func (m *GCancelCampaignMissionReply) String() string { return proto.CompactTextString(m) }
func (*GCancelCampaignMissionReply) ProtoMessage()    {}
func (*GCancelCampaignMissionReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{113}
}

func (m *GCancelCampaignMissionReply) GetCardIDs() []uint32 {
	if m != nil {
		return m.CardIDs
	}
	return nil
}

type GGetCampaignMissionRewardReply struct {
	Gold    int32    `protobuf:"varint,3,opt,name=Gold,proto3" json:"Gold,omitempty"`
	CardIDs []uint32 `protobuf:"varint,2,rep,packed,name=CardIDs" json:"CardIDs,omitempty"`
}

func (m *GGetCampaignMissionRewardReply) Reset()         { *m = GGetCampaignMissionRewardReply{} }
func (m *GGetCampaignMissionRewardReply) String() string { return proto.CompactTextString(m) }
func (*GGetCampaignMissionRewardReply) ProtoMessage()    {}
func (*GGetCampaignMissionRewardReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{114}
}

func (m *GGetCampaignMissionRewardReply) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *GGetCampaignMissionRewardReply) GetCardIDs() []uint32 {
	if m != nil {
		return m.CardIDs
	}
	return nil
}

type GetMyCountryReply struct {
	CountryID uint32 `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
}

func (m *GetMyCountryReply) Reset()                    { *m = GetMyCountryReply{} }
func (m *GetMyCountryReply) String() string            { return proto.CompactTextString(m) }
func (*GetMyCountryReply) ProtoMessage()               {}
func (*GetMyCountryReply) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{115} }

func (m *GetMyCountryReply) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

type MoveCityArg struct {
	CityID int32 `protobuf:"varint,1,opt,name=CityID,proto3" json:"CityID,omitempty"`
	Gold   int32 `protobuf:"varint,2,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (m *MoveCityArg) Reset()                    { *m = MoveCityArg{} }
func (m *MoveCityArg) String() string            { return proto.CompactTextString(m) }
func (*MoveCityArg) ProtoMessage()               {}
func (*MoveCityArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{116} }

func (m *MoveCityArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *MoveCityArg) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type MoveCityRelpy struct {
	NeedGold bool `protobuf:"varint,1,opt,name=NeedGold,proto3" json:"NeedGold,omitempty"`
}

func (m *MoveCityRelpy) Reset()                    { *m = MoveCityRelpy{} }
func (m *MoveCityRelpy) String() string            { return proto.CompactTextString(m) }
func (*MoveCityRelpy) ProtoMessage()               {}
func (*MoveCityRelpy) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{117} }

func (m *MoveCityRelpy) GetNeedGold() bool {
	if m != nil {
		return m.NeedGold
	}
	return false
}

type CampaignBattleEnd struct {
	IsWin bool `protobuf:"varint,1,opt,name=IsWin,proto3" json:"IsWin,omitempty"`
}

func (m *CampaignBattleEnd) Reset()                    { *m = CampaignBattleEnd{} }
func (m *CampaignBattleEnd) String() string            { return proto.CompactTextString(m) }
func (*CampaignBattleEnd) ProtoMessage()               {}
func (*CampaignBattleEnd) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{118} }

func (m *CampaignBattleEnd) GetIsWin() bool {
	if m != nil {
		return m.IsWin
	}
	return false
}

type GCampaignPlayerInfo struct {
	CountryID   uint32            `protobuf:"varint,1,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	CityID      int32             `protobuf:"varint,2,opt,name=CityID,proto3" json:"CityID,omitempty"`
	CityJob     CampaignJob       `protobuf:"varint,3,opt,name=CityJob,proto3,enum=pb.CampaignJob" json:"CityJob,omitempty"`
	CountryJob  CampaignJob       `protobuf:"varint,4,opt,name=CountryJob,proto3,enum=pb.CampaignJob" json:"CountryJob,omitempty"`
	CountryName string            `protobuf:"bytes,5,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	Notices     []*CampaignNotice `protobuf:"bytes,6,rep,name=Notices" json:"Notices,omitempty"`
}

func (m *GCampaignPlayerInfo) Reset()                    { *m = GCampaignPlayerInfo{} }
func (m *GCampaignPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*GCampaignPlayerInfo) ProtoMessage()               {}
func (*GCampaignPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{119} }

func (m *GCampaignPlayerInfo) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *GCampaignPlayerInfo) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *GCampaignPlayerInfo) GetCityJob() CampaignJob {
	if m != nil {
		return m.CityJob
	}
	return CampaignJob_UnknowJob
}

func (m *GCampaignPlayerInfo) GetCountryJob() CampaignJob {
	if m != nil {
		return m.CountryJob
	}
	return CampaignJob_UnknowJob
}

func (m *GCampaignPlayerInfo) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *GCampaignPlayerInfo) GetNotices() []*CampaignNotice {
	if m != nil {
		return m.Notices
	}
	return nil
}

type GCampaignInfo struct {
	Version       int32 `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	CampaignState int32 `protobuf:"varint,2,opt,name=CampaignState,proto3" json:"CampaignState,omitempty"`
}

func (m *GCampaignInfo) Reset()                    { *m = GCampaignInfo{} }
func (m *GCampaignInfo) String() string            { return proto.CompactTextString(m) }
func (*GCampaignInfo) ProtoMessage()               {}
func (*GCampaignInfo) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{120} }

func (m *GCampaignInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GCampaignInfo) GetCampaignState() int32 {
	if m != nil {
		return m.CampaignState
	}
	return 0
}

type ModifyContributionArg struct {
	Uid    uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Amount int32  `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *ModifyContributionArg) Reset()                    { *m = ModifyContributionArg{} }
func (m *ModifyContributionArg) String() string            { return proto.CompactTextString(m) }
func (*ModifyContributionArg) ProtoMessage()               {}
func (*ModifyContributionArg) Descriptor() ([]byte, []int) { return fileDescriptorCampaign, []int{121} }

func (m *ModifyContributionArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ModifyContributionArg) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type GAcceptCampaignMissionReply struct {
	AcceptReply *AcceptCampaignMissionReply `protobuf:"bytes,1,opt,name=AcceptReply" json:"AcceptReply,omitempty"`
	RewardGold  int32                       `protobuf:"varint,2,opt,name=RewardGold,proto3" json:"RewardGold,omitempty"`
}

func (m *GAcceptCampaignMissionReply) Reset()         { *m = GAcceptCampaignMissionReply{} }
func (m *GAcceptCampaignMissionReply) String() string { return proto.CompactTextString(m) }
func (*GAcceptCampaignMissionReply) ProtoMessage()    {}
func (*GAcceptCampaignMissionReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCampaign, []int{122}
}

func (m *GAcceptCampaignMissionReply) GetAcceptReply() *AcceptCampaignMissionReply {
	if m != nil {
		return m.AcceptReply
	}
	return nil
}

func (m *GAcceptCampaignMissionReply) GetRewardGold() int32 {
	if m != nil {
		return m.RewardGold
	}
	return 0
}

func init() {
	proto.RegisterType((*CampaignState)(nil), "pb.CampaignState")
	proto.RegisterType((*CaStateWarArg)(nil), "pb.CaStateWarArg")
	proto.RegisterType((*CaStateUnifiedArg)(nil), "pb.CaStateUnifiedArg")
	proto.RegisterType((*CaStateWarEndArg)(nil), "pb.CaStateWarEndArg")
	proto.RegisterType((*UpdateCityStateArg)(nil), "pb.UpdateCityStateArg")
	proto.RegisterType((*CampaignPlayerState)(nil), "pb.CampaignPlayerState")
	proto.RegisterType((*CpStateKickOutArg)(nil), "pb.CpStateKickOutArg")
	proto.RegisterType((*CpStateLoadingArg)(nil), "pb.CpStateLoadingArg")
	proto.RegisterType((*CpStateBeCaptiveArg)(nil), "pb.CpStateBeCaptiveArg")
	proto.RegisterType((*CitySimpleData)(nil), "pb.CitySimpleData")
	proto.RegisterType((*TeamData)(nil), "pb.TeamData")
	proto.RegisterType((*UpdateMyTeamStateArg)(nil), "pb.UpdateMyTeamStateArg")
	proto.RegisterType((*MyTeamDisappear)(nil), "pb.MyTeamDisappear")
	proto.RegisterType((*TeamRetreat)(nil), "pb.TeamRetreat")
	proto.RegisterType((*MilitaryOrder)(nil), "pb.MilitaryOrder")
	proto.RegisterType((*PublishMilitaryOrderArg)(nil), "pb.PublishMilitaryOrderArg")
	proto.RegisterType((*PublishMilitaryOrderReply)(nil), "pb.PublishMilitaryOrderReply")
	proto.RegisterType((*CancelMilitaryOrderReply)(nil), "pb.CancelMilitaryOrderReply")
	proto.RegisterType((*MilitaryOrderInfo)(nil), "pb.MilitaryOrderInfo")
	proto.RegisterType((*TargetMilitaryOrder)(nil), "pb.TargetMilitaryOrder")
	proto.RegisterType((*AcceptMilitaryOrderArg)(nil), "pb.AcceptMilitaryOrderArg")
	proto.RegisterType((*AcceptMilitaryOrderReply)(nil), "pb.AcceptMilitaryOrderReply")
	proto.RegisterType((*CountrySimpleData)(nil), "pb.CountrySimpleData")
	proto.RegisterType((*CampaignInfo)(nil), "pb.CampaignInfo")
	proto.RegisterType((*CreateCountryArg)(nil), "pb.CreateCountryArg")
	proto.RegisterType((*TargetCity)(nil), "pb.TargetCity")
	proto.RegisterType((*CountryCreatedArg)(nil), "pb.CountryCreatedArg")
	proto.RegisterType((*CampaignPlayer)(nil), "pb.CampaignPlayer")
	proto.RegisterType((*CampaignPlayerList)(nil), "pb.CampaignPlayerList")
	proto.RegisterType((*CityData)(nil), "pb.CityData")
	proto.RegisterType((*FetchApplyCreateCountryPlayersArg)(nil), "pb.FetchApplyCreateCountryPlayersArg")
	proto.RegisterType((*ApplyCreateCountryPlayer)(nil), "pb.ApplyCreateCountryPlayer")
	proto.RegisterType((*ApplyCreateCountryPlayers)(nil), "pb.ApplyCreateCountryPlayers")
	proto.RegisterType((*ApplyCreateCountryData)(nil), "pb.ApplyCreateCountryData")
	proto.RegisterType((*UpdateForageArg)(nil), "pb.UpdateForageArg")
	proto.RegisterType((*CampaignMission)(nil), "pb.CampaignMission")
	proto.RegisterType((*ExecutingCampaignMission)(nil), "pb.ExecutingCampaignMission")
	proto.RegisterType((*CampaignMissionInfo)(nil), "pb.CampaignMissionInfo")
	proto.RegisterType((*CampaignPublishMissionArg)(nil), "pb.CampaignPublishMissionArg")
	proto.RegisterType((*CampaignPublishMissionReply)(nil), "pb.CampaignPublishMissionReply")
	proto.RegisterType((*AcceptCampaignMissionArg)(nil), "pb.AcceptCampaignMissionArg")
	proto.RegisterType((*AcceptCampaignMissionReply)(nil), "pb.AcceptCampaignMissionReply")
	proto.RegisterType((*FetchCityPlayersArg)(nil), "pb.FetchCityPlayersArg")
	proto.RegisterType((*SetForagePriceArg)(nil), "pb.SetForagePriceArg")
	proto.RegisterType((*FetchForagePriceReply)(nil), "pb.FetchForagePriceReply")
	proto.RegisterType((*NewCountryNtArg)(nil), "pb.NewCountryNtArg")
	proto.RegisterType((*AppointJobNtArg)(nil), "pb.AppointJobNtArg")
	proto.RegisterType((*RecallJobNtArg)(nil), "pb.RecallJobNtArg")
	proto.RegisterType((*AutocephalyNtArg)(nil), "pb.AutocephalyNtArg")
	proto.RegisterType((*KickOutNtArg)(nil), "pb.KickOutNtArg")
	proto.RegisterType((*YourMajestyChangeNtArg)(nil), "pb.YourMajestyChangeNtArg")
	proto.RegisterType((*ResignNtArg)(nil), "pb.ResignNtArg")
	proto.RegisterType((*BeOccupyNtArg)(nil), "pb.BeOccupyNtArg")
	proto.RegisterType((*DestoryCountryNtArg)(nil), "pb.DestoryCountryNtArg")
	proto.RegisterType((*UnifiedWordNtArg)(nil), "pb.UnifiedWordNtArg")
	proto.RegisterType((*AutocephalyVoteNtArg)(nil), "pb.AutocephalyVoteNtArg")
	proto.RegisterType((*CapitalInjectionNtArg)(nil), "pb.CapitalInjectionNtArg")
	proto.RegisterType((*ProductionNtArg)(nil), "pb.ProductionNtArg")
	proto.RegisterType((*SalaryNtArg)(nil), "pb.SalaryNtArg")
	proto.RegisterType((*TransportNtArg)(nil), "pb.TransportNtArg")
	proto.RegisterType((*OccupyNtArg)(nil), "pb.OccupyNtArg")
	proto.RegisterType((*SurrenderNtArg)(nil), "pb.SurrenderNtArg")
	proto.RegisterType((*BetrayNtArg)(nil), "pb.BetrayNtArg")
	proto.RegisterType((*EscapedNtArg)(nil), "pb.EscapedNtArg")
	proto.RegisterType((*EscapedReturnNtArg)(nil), "pb.EscapedReturnNtArg")
	proto.RegisterType((*SurrenderCity1NtArg)(nil), "pb.SurrenderCity1NtArg")
	proto.RegisterType((*SurrenderCity2NtArg)(nil), "pb.SurrenderCity2NtArg")
	proto.RegisterType((*SurrenderCountry1NtArg)(nil), "pb.SurrenderCountry1NtArg")
	proto.RegisterType((*AutocephalyNt2Arg)(nil), "pb.AutocephalyNt2Arg")
	proto.RegisterType((*AutocephalyNt3Arg)(nil), "pb.AutocephalyNt3Arg")
	proto.RegisterType((*CampaignNotice)(nil), "pb.CampaignNotice")
	proto.RegisterType((*CampaignNoticeInfo)(nil), "pb.CampaignNoticeInfo")
	proto.RegisterType((*CityPlayerAmount)(nil), "pb.CityPlayerAmount")
	proto.RegisterType((*AllCityPlayerAmount)(nil), "pb.AllCityPlayerAmount")
	proto.RegisterType((*FetchCountryPlayersArg)(nil), "pb.FetchCountryPlayersArg")
	proto.RegisterType((*CampaignNotifyRedDotArg)(nil), "pb.CampaignNotifyRedDotArg")
	proto.RegisterType((*AppointJobArg)(nil), "pb.AppointJobArg")
	proto.RegisterType((*RecallJobArg)(nil), "pb.RecallJobArg")
	proto.RegisterType((*CityDefense)(nil), "pb.CityDefense")
	proto.RegisterType((*SyncCityDefenseArg)(nil), "pb.SyncCityDefenseArg")
	proto.RegisterType((*CampaignUpdateJobArg)(nil), "pb.CampaignUpdateJobArg")
	proto.RegisterType((*PatrolCityReply)(nil), "pb.PatrolCityReply")
	proto.RegisterType((*CityCapitalInjectionArg)(nil), "pb.CityCapitalInjectionArg")
	proto.RegisterType((*CityCapitalInjectionReply)(nil), "pb.CityCapitalInjectionReply")
	proto.RegisterType((*UpdateMyCityArg)(nil), "pb.UpdateMyCityArg")
	proto.RegisterType((*CampaignTargetPlayer)(nil), "pb.CampaignTargetPlayer")
	proto.RegisterType((*UpdateMyCountryArg)(nil), "pb.UpdateMyCountryArg")
	proto.RegisterType((*AutocephalyInfo)(nil), "pb.AutocephalyInfo")
	proto.RegisterType((*AutocephalyArg)(nil), "pb.AutocephalyArg")
	proto.RegisterType((*VoteAutocephalyArg)(nil), "pb.VoteAutocephalyArg")
	proto.RegisterType((*AccDefCityLoseLoadingReply)(nil), "pb.AccDefCityLoseLoadingReply")
	proto.RegisterType((*CountryModifyNameArg)(nil), "pb.CountryModifyNameArg")
	proto.RegisterType((*CountryModifyFlagArg)(nil), "pb.CountryModifyFlagArg")
	proto.RegisterType((*UpdateCountryNameArg)(nil), "pb.UpdateCountryNameArg")
	proto.RegisterType((*UpdateCountryFlagArg)(nil), "pb.UpdateCountryFlagArg")
	proto.RegisterType((*CancelPublishMissionArg)(nil), "pb.CancelPublishMissionArg")
	proto.RegisterType((*CancelPublishMissionReply)(nil), "pb.CancelPublishMissionReply")
	proto.RegisterType((*CampaignTeams)(nil), "pb.CampaignTeams")
	proto.RegisterType((*CountryDestoryed)(nil), "pb.CountryDestoryed")
	proto.RegisterType((*CapitalInjectionRecord)(nil), "pb.CapitalInjectionRecord")
	proto.RegisterType((*CityCapitalInjectionHistory)(nil), "pb.CityCapitalInjectionHistory")
	proto.RegisterType((*UpdateContributionArg)(nil), "pb.UpdateContributionArg")
	proto.RegisterType((*CityNotice)(nil), "pb.CityNotice")
	proto.RegisterType((*FetchCityCapitalInjectionArg)(nil), "pb.FetchCityCapitalInjectionArg")
	proto.RegisterType((*CampaignSimplePlayer)(nil), "pb.CampaignSimplePlayer")
	proto.RegisterType((*SyncCityPlayerAmount)(nil), "pb.SyncCityPlayerAmount")
	proto.RegisterType((*CampaignSupportCard)(nil), "pb.CampaignSupportCard")
	proto.RegisterType((*SurrenderCityArg)(nil), "pb.SurrenderCityArg")
	proto.RegisterType((*UpdateCityCountryArg)(nil), "pb.UpdateCityCountryArg")
	proto.RegisterType((*CitysDefPlayerAmount)(nil), "pb.CitysDefPlayerAmount")
	proto.RegisterType((*CampaignBuyGoodsArg)(nil), "pb.CampaignBuyGoodsArg")
	proto.RegisterType((*ContributionReply)(nil), "pb.ContributionReply")
	proto.RegisterType((*GSettleCityArg)(nil), "pb.GSettleCityArg")
	proto.RegisterType((*GCancelCampaignMissionReply)(nil), "pb.GCancelCampaignMissionReply")
	proto.RegisterType((*GGetCampaignMissionRewardReply)(nil), "pb.GGetCampaignMissionRewardReply")
	proto.RegisterType((*GetMyCountryReply)(nil), "pb.GetMyCountryReply")
	proto.RegisterType((*MoveCityArg)(nil), "pb.MoveCityArg")
	proto.RegisterType((*MoveCityRelpy)(nil), "pb.MoveCityRelpy")
	proto.RegisterType((*CampaignBattleEnd)(nil), "pb.CampaignBattleEnd")
	proto.RegisterType((*GCampaignPlayerInfo)(nil), "pb.GCampaignPlayerInfo")
	proto.RegisterType((*GCampaignInfo)(nil), "pb.GCampaignInfo")
	proto.RegisterType((*ModifyContributionArg)(nil), "pb.ModifyContributionArg")
	proto.RegisterType((*GAcceptCampaignMissionReply)(nil), "pb.GAcceptCampaignMissionReply")
	proto.RegisterEnum("pb.CityState", CityState_name, CityState_value)
	proto.RegisterEnum("pb.TeamState", TeamState_name, TeamState_value)
	proto.RegisterEnum("pb.MilitaryOrderType", MilitaryOrderType_name, MilitaryOrderType_value)
	proto.RegisterEnum("pb.CampaignJob", CampaignJob_name, CampaignJob_value)
	proto.RegisterEnum("pb.CampaignMsType", CampaignMsType_name, CampaignMsType_value)
	proto.RegisterEnum("pb.TransportTypeEnum", TransportTypeEnum_name, TransportTypeEnum_value)
	proto.RegisterEnum("pb.CampaignNoticeType", CampaignNoticeType_name, CampaignNoticeType_value)
	proto.RegisterEnum("pb.CampaignState_StateEnum", CampaignState_StateEnum_name, CampaignState_StateEnum_value)
	proto.RegisterEnum("pb.CampaignPlayerState_StateEnum", CampaignPlayerState_StateEnum_name, CampaignPlayerState_StateEnum_value)
	proto.RegisterEnum("pb.MyTeamDisappear_ReasonEnum", MyTeamDisappear_ReasonEnum_name, MyTeamDisappear_ReasonEnum_value)
	proto.RegisterEnum("pb.CampaignNotifyRedDotArg_RedDotType", CampaignNotifyRedDotArg_RedDotType_name, CampaignNotifyRedDotArg_RedDotType_value)
}
func (m *CampaignState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State))
	}
	if len(m.Arg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *CaStateWarArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaStateWarArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemainTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RemainTime))
	}
	return i, nil
}

func (m *CaStateUnifiedArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaStateUnifiedArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if len(m.YourMajestyName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.YourMajestyName)))
		i += copy(dAtA[i:], m.YourMajestyName)
	}
	if m.CountryPlayerAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryPlayerAmount))
	}
	return i, nil
}

func (m *CaStateWarEndArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaStateWarEndArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contribution != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Contribution))
	}
	if len(m.LostCitys) > 0 {
		dAtA2 := make([]byte, len(m.LostCitys)*10)
		var j1 int
		for _, num1 := range m.LostCitys {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.OccupyCitys) > 0 {
		dAtA4 := make([]byte, len(m.OccupyCitys)*10)
		var j3 int
		for _, num1 := range m.OccupyCitys {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.NextWarRemainTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.NextWarRemainTime))
	}
	return i, nil
}

func (m *UpdateCityStateArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCityStateArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State))
	}
	if m.CityID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.OccupyCountryID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.OccupyCountryID))
	}
	return i, nil
}

func (m *CampaignPlayerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignPlayerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State))
	}
	if len(m.Arg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *CpStateKickOutArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpStateKickOutArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemainTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RemainTime))
	}
	return i, nil
}

func (m *CpStateLoadingArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpStateLoadingArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MaxTime))
	}
	if m.RemainTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RemainTime))
	}
	return i, nil
}

func (m *CpStateBeCaptiveArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpStateBeCaptiveArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemainTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RemainTime))
	}
	return i, nil
}

func (m *CitySimpleData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CitySimpleData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.CountryID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State))
	}
	if m.Defense != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Defense))
	}
	return i, nil
}

func (m *TeamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.ID))
	}
	if m.CountryID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if len(m.CityPath) > 0 {
		dAtA6 := make([]byte, len(m.CityPath)*10)
		var j5 int
		for _, num1 := range m.CityPath {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Trip != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Trip))
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State))
	}
	if m.TeamAmount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TeamAmount))
	}
	return i, nil
}

func (m *UpdateMyTeamStateArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMyTeamStateArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State))
	}
	if len(m.Arg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *MyTeamDisappear) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyTeamDisappear) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Reason))
	}
	if len(m.Arg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *TeamRetreat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamRetreat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OldCity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.OldCity))
	}
	if m.NewCity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.NewCity))
	}
	return i, nil
}

func (m *MilitaryOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MilitaryOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.Forage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Amount))
	}
	if m.MaxAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MaxAmount))
	}
	if m.TargetCity != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TargetCity))
	}
	return i, nil
}

func (m *PublishMilitaryOrderArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishMilitaryOrderArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.Forage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Amount))
	}
	if len(m.CityPath) > 0 {
		dAtA8 := make([]byte, len(m.CityPath)*10)
		var j7 int
		for _, num1 := range m.CityPath {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *PublishMilitaryOrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishMilitaryOrderReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Forage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	return i, nil
}

func (m *CancelMilitaryOrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelMilitaryOrderReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Forage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	return i, nil
}

func (m *MilitaryOrderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MilitaryOrderInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TargetMilitaryOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetMilitaryOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.TargetCity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TargetCity))
	}
	return i, nil
}

func (m *AcceptMilitaryOrderArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptMilitaryOrderArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.TargetCity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TargetCity))
	}
	if len(m.CardIDs) > 0 {
		dAtA10 := make([]byte, len(m.CardIDs)*10)
		var j9 int
		for _, num := range m.CardIDs {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *AcceptMilitaryOrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptMilitaryOrderReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State.Size()))
		n11, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Team != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Team.Size()))
		n12, err := m.Team.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *CountrySimpleData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountrySimpleData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Flag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Flag)))
		i += copy(dAtA[i:], m.Flag)
	}
	return i, nil
}

func (m *CampaignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Citys) > 0 {
		for _, msg := range m.Citys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Countrys) > 0 {
		for _, msg := range m.Countrys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MyCityID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyCityID))
	}
	if m.MyLocationCityID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyLocationCityID))
	}
	if m.MyCityJob != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyCityJob))
	}
	if m.MyCountryJob != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyCountryJob))
	}
	if m.MyTeam != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyTeam.Size()))
		n13, err := m.MyTeam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0x42
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Forage != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	if m.HasCompleteMission {
		dAtA[i] = 0x50
		i++
		if m.HasCompleteMission {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasNewNotice {
		dAtA[i] = 0x58
		i++
		if m.HasNewNotice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.State != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State.Size()))
		n14, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.MyState != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyState.Size()))
		n15, err := m.MyState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.MyCountryID != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyCountryID))
	}
	if m.Contribution != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Contribution))
	}
	if m.LastCountryID != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.LastCountryID))
	}
	if m.TeamDisappear != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TeamDisappear.Size()))
		n16, err := m.TeamDisappear.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.SupportCards) > 0 {
		dAtA18 := make([]byte, len(m.SupportCards)*10)
		var j17 int
		for _, num := range m.SupportCards {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	if m.MaxContribution != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MaxContribution))
	}
	if m.DefPlayerAmounts != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.DefPlayerAmounts.Size()))
		n19, err := m.DefPlayerAmounts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *CreateCountryArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCountryArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *TargetCity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetCity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	return i, nil
}

func (m *CountryCreatedArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryCreatedArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Flag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Flag)))
		i += copy(dAtA[i:], m.Flag)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.YourMajesty != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.YourMajesty.Size()))
		n20, err := m.YourMajesty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *CampaignPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.HeadImg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.HeadImg)))
		i += copy(dAtA[i:], m.HeadImg)
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if m.CityJob != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryJob))
	}
	if m.PvpScore != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.PvpScore))
	}
	if m.Contribution != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Contribution))
	}
	if m.State != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.State.Size()))
		n21, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *CampaignPlayerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignPlayerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CityData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CityData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if m.PlayerAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.PlayerAmount))
	}
	if m.Agriculture != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Agriculture))
	}
	if m.Business != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Business))
	}
	if m.Defense != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Defense))
	}
	if m.Forage != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	if m.Gold != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	if m.Glory != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Glory))
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ApplyCreateCountry != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.ApplyCreateCountry.Size()))
		n22, err := m.ApplyCreateCountry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.YourMajesty != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.YourMajesty.Size()))
		n23, err := m.YourMajesty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.InCityPlayerAmount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.InCityPlayerAmount))
	}
	return i, nil
}

func (m *FetchApplyCreateCountryPlayersArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchApplyCreateCountryPlayersArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *ApplyCreateCountryPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyCreateCountryPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Player.Size()))
		n24, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.Gold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *ApplyCreateCountryPlayers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyCreateCountryPlayers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ApplyCreateCountryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyCreateCountryData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemainTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RemainTime))
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MyApplyMoney != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyApplyMoney))
	}
	if m.MyCountryName != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MyCountryName))
	}
	return i, nil
}

func (m *UpdateForageArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateForageArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ForageAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.ForageAmount))
	}
	return i, nil
}

func (m *CampaignMission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignMission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.GoldReward != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.GoldReward))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Amount))
	}
	if m.TransportType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TransportType))
	}
	if m.TransportTargetCity != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TransportTargetCity))
	}
	if m.TransportMaxTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TransportMaxTime))
	}
	if m.MaxAmount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MaxAmount))
	}
	if m.Contribution != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Contribution))
	}
	return i, nil
}

func (m *ExecutingCampaignMission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutingCampaignMission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.GoldReward != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.GoldReward))
	}
	if m.RemainTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RemainTime))
	}
	if len(m.Cards) > 0 {
		dAtA26 := make([]byte, len(m.Cards)*10)
		var j25 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j25))
		i += copy(dAtA[i:], dAtA26[:j25])
	}
	if m.MaxTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MaxTime))
	}
	if m.Contribution != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Contribution))
	}
	return i, nil
}

func (m *CampaignMissionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignMissionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Missions) > 0 {
		for _, msg := range m.Missions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ExecutingMission != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.ExecutingMission.Size()))
		n27, err := m.ExecutingMission.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *CampaignPublishMissionArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignPublishMissionArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.GoldReward != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.GoldReward))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Amount))
	}
	if m.TransportType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TransportType))
	}
	if len(m.TransportCityPath) > 0 {
		dAtA29 := make([]byte, len(m.TransportCityPath)*10)
		var j28 int
		for _, num1 := range m.TransportCityPath {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j28))
		i += copy(dAtA[i:], dAtA29[:j28])
	}
	return i, nil
}

func (m *CampaignPublishMissionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignPublishMissionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MissionInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MissionInfo.Size()))
		n30, err := m.MissionInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Gold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	if m.Forage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	return i, nil
}

func (m *AcceptCampaignMissionArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptCampaignMissionArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if len(m.Cards) > 0 {
		dAtA32 := make([]byte, len(m.Cards)*10)
		var j31 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	if m.TransportTargetCity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TransportTargetCity))
	}
	return i, nil
}

func (m *AcceptCampaignMissionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptCampaignMissionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemainTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RemainTime))
	}
	if len(m.Missions) > 0 {
		for _, msg := range m.Missions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FetchCityPlayersArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchCityPlayersArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *SetForagePriceArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetForagePriceArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Price))
	}
	return i, nil
}

func (m *FetchForagePriceReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchForagePriceReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ForageAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.ForageAmount))
	}
	if m.Price != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Price))
	}
	return i, nil
}

func (m *NewCountryNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCountryNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if len(m.CountryName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	return i, nil
}

func (m *AppointJobNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppointJobNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if len(m.TargetPlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.TargetPlayerName)))
		i += copy(dAtA[i:], m.TargetPlayerName)
	}
	if m.Job != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if m.CityID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	return i, nil
}

func (m *RecallJobNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallJobNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if m.CityID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	return i, nil
}

func (m *AutocephalyNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocephalyNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if len(m.CountryName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	if len(m.NewCountryName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.NewCountryName)))
		i += copy(dAtA[i:], m.NewCountryName)
	}
	return i, nil
}

func (m *KickOutNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickOutNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	return i, nil
}

func (m *YourMajestyChangeNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YourMajestyChangeNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.YourMajestyName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.YourMajestyName)))
		i += copy(dAtA[i:], m.YourMajestyName)
	}
	if len(m.NewYourMajestyName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.NewYourMajestyName)))
		i += copy(dAtA[i:], m.NewYourMajestyName)
	}
	return i, nil
}

func (m *ResignNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResignNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	return i, nil
}

func (m *BeOccupyNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeOccupyNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	if m.BeOccupyCityID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.BeOccupyCityID))
	}
	if m.CaptiveAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CaptiveAmount))
	}
	return i, nil
}

func (m *DestoryCountryNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestoryCountryNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	if len(m.BeDestoryCountryName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.BeDestoryCountryName)))
		i += copy(dAtA[i:], m.BeDestoryCountryName)
	}
	return i, nil
}

func (m *UnifiedWordNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnifiedWordNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	if len(m.YourMajestyName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.YourMajestyName)))
		i += copy(dAtA[i:], m.YourMajestyName)
	}
	return i, nil
}

func (m *AutocephalyVoteNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocephalyVoteNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if len(m.CountryName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	return i, nil
}

func (m *CapitalInjectionNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapitalInjectionNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.Gold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *ProductionNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductionNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	if m.Forage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	return i, nil
}

func (m *SalaryNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SalaryNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *TransportNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransportNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromCity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.FromCity))
	}
	if m.TargetCity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TargetCity))
	}
	if m.TransportType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TransportType))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *OccupyNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OccupyNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OccupyCityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.OccupyCityID))
	}
	if m.CaptiveAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CaptiveAmount))
	}
	return i, nil
}

func (m *SurrenderNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurrenderNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *BetrayNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetrayNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *EscapedNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscapedNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *EscapedReturnNtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscapedReturnNtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *SurrenderCity1NtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurrenderCity1NtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if len(m.TargetCountryName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.TargetCountryName)))
		i += copy(dAtA[i:], m.TargetCountryName)
	}
	return i, nil
}

func (m *SurrenderCity2NtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurrenderCity2NtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	return i, nil
}

func (m *SurrenderCountry1NtArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurrenderCountry1NtArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if len(m.TargetCountryName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.TargetCountryName)))
		i += copy(dAtA[i:], m.TargetCountryName)
	}
	return i, nil
}

func (m *AutocephalyNt2Arg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocephalyNt2Arg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Job != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if len(m.OldCountryName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.OldCountryName)))
		i += copy(dAtA[i:], m.OldCountryName)
	}
	if len(m.NewCountryName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.NewCountryName)))
		i += copy(dAtA[i:], m.NewCountryName)
	}
	return i, nil
}

func (m *AutocephalyNt3Arg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocephalyNt3Arg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if len(m.NewCountryName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.NewCountryName)))
		i += copy(dAtA[i:], m.NewCountryName)
	}
	return i, nil
}

func (m *CampaignNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.ID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Time))
	}
	if len(m.Args) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	return i, nil
}

func (m *CampaignNoticeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignNoticeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Notices) > 0 {
		for _, msg := range m.Notices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CityPlayerAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CityPlayerAmount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.PlayerAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.PlayerAmount))
	}
	if m.Glory != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Glory))
	}
	if m.MaxApplyCountryGold != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MaxApplyCountryGold))
	}
	if m.AvgMissionReward != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.AvgMissionReward))
	}
	return i, nil
}

func (m *AllCityPlayerAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllCityPlayerAmount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerAmounts) > 0 {
		for _, msg := range m.PlayerAmounts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FetchCountryPlayersArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchCountryPlayersArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *CampaignNotifyRedDotArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignNotifyRedDotArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *AppointJobArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppointJobArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Uid))
	}
	if m.Job != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	if m.OldUid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.OldUid))
	}
	return i, nil
}

func (m *RecallJobArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallJobArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Uid))
	}
	if m.Job != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Job))
	}
	return i, nil
}

func (m *CityDefense) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CityDefense) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Defense != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Defense))
	}
	return i, nil
}

func (m *SyncCityDefenseArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCityDefenseArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CityDefenses) > 0 {
		for _, msg := range m.CityDefenses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CampaignUpdateJobArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignUpdateJobArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityJob != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryJob))
	}
	return i, nil
}

func (m *PatrolCityReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatrolCityReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contribution != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Contribution))
	}
	if m.Salary != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Salary))
	}
	return i, nil
}

func (m *CityCapitalInjectionArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CityCapitalInjectionArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Gold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *CityCapitalInjectionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CityCapitalInjectionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurGold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CurGold))
	}
	return i, nil
}

func (m *UpdateMyCityArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMyCityArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.LocationCityID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.LocationCityID))
	}
	return i, nil
}

func (m *CampaignTargetPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignTargetPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *UpdateMyCountryArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMyCountryArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if m.LastCountryID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.LastCountryID))
	}
	return i, nil
}

func (m *AutocephalyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocephalyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	if len(m.AgreePlayers) > 0 {
		for _, msg := range m.AgreePlayers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutocephalyArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocephalyArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	return i, nil
}

func (m *VoteAutocephalyArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteAutocephalyArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAgree {
		dAtA[i] = 0x8
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NoticeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.NoticeID))
	}
	return i, nil
}

func (m *AccDefCityLoseLoadingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccDefCityLoseLoadingReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemainTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RemainTime))
	}
	return i, nil
}

func (m *CountryModifyNameArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryModifyNameArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *CountryModifyFlagArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryModifyFlagArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Flag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Flag)))
		i += copy(dAtA[i:], m.Flag)
	}
	return i, nil
}

func (m *UpdateCountryNameArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCountryNameArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *UpdateCountryFlagArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCountryFlagArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if len(m.Flag) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Flag)))
		i += copy(dAtA[i:], m.Flag)
	}
	return i, nil
}

func (m *CancelPublishMissionArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelPublishMissionArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Type))
	}
	if m.TransportTargetCity != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.TransportTargetCity))
	}
	return i, nil
}

func (m *CancelPublishMissionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelPublishMissionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	if m.Forage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Forage))
	}
	return i, nil
}

func (m *CampaignTeams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignTeams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CountryDestoryed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryDestoryed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	return i, nil
}

func (m *CapitalInjectionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapitalInjectionRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Player.Size()))
		n33, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Gold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *CityCapitalInjectionHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CityCapitalInjectionHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateContributionArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContributionArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contribution != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Contribution))
	}
	if m.MaxContribution != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.MaxContribution))
	}
	return i, nil
}

func (m *CityNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CityNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Notice) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	return i, nil
}

func (m *FetchCityCapitalInjectionArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchCityCapitalInjectionArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *CampaignSimplePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignSimplePlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.HeadImg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.HeadImg)))
		i += copy(dAtA[i:], m.HeadImg)
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if m.PvpScore != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.PvpScore))
	}
	return i, nil
}

func (m *SyncCityPlayerAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCityPlayerAmount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *CampaignSupportCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignSupportCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CardIDs) > 0 {
		dAtA35 := make([]byte, len(m.CardIDs)*10)
		var j34 int
		for _, num := range m.CardIDs {
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j34))
		i += copy(dAtA[i:], dAtA35[:j34])
	}
	return i, nil
}

func (m *SurrenderCityArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurrenderCityArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	return i, nil
}

func (m *UpdateCityCountryArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCityCountryArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.CountryID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	return i, nil
}

func (m *CitysDefPlayerAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CitysDefPlayerAmount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, msg := range m.Amounts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CampaignBuyGoodsArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignBuyGoodsArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.GoodsID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.GoodsID))
	}
	return i, nil
}

func (m *ContributionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContributionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contribution != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Contribution))
	}
	return i, nil
}

func (m *GSettleCityArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GSettleCityArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Player != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Player.Size()))
		n36, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *GCancelCampaignMissionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCancelCampaignMissionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CardIDs) > 0 {
		dAtA38 := make([]byte, len(m.CardIDs)*10)
		var j37 int
		for _, num := range m.CardIDs {
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j37))
		i += copy(dAtA[i:], dAtA38[:j37])
	}
	return i, nil
}

func (m *GGetCampaignMissionRewardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GGetCampaignMissionRewardReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CardIDs) > 0 {
		dAtA40 := make([]byte, len(m.CardIDs)*10)
		var j39 int
		for _, num := range m.CardIDs {
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(j39))
		i += copy(dAtA[i:], dAtA40[:j39])
	}
	if m.Gold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *GetMyCountryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMyCountryReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	return i, nil
}

func (m *MoveCityArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveCityArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.Gold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *MoveCityRelpy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveCityRelpy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NeedGold {
		dAtA[i] = 0x8
		i++
		if m.NeedGold {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CampaignBattleEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignBattleEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsWin {
		dAtA[i] = 0x8
		i++
		if m.IsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GCampaignPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCampaignPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryID))
	}
	if m.CityID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityID))
	}
	if m.CityJob != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CountryJob))
	}
	if len(m.CountryName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CountryName)))
		i += copy(dAtA[i:], m.CountryName)
	}
	if len(m.Notices) > 0 {
		for _, msg := range m.Notices {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCampaign(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GCampaignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCampaignInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Version))
	}
	if m.CampaignState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.CampaignState))
	}
	return i, nil
}

func (m *ModifyContributionArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyContributionArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Uid))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *GAcceptCampaignMissionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GAcceptCampaignMissionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AcceptReply != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.AcceptReply.Size()))
		n41, err := m.AcceptReply.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.RewardGold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCampaign(dAtA, i, uint64(m.RewardGold))
	}
	return i, nil
}

func encodeVarintCampaign(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CampaignState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovCampaign(uint64(m.State))
	}
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CaStateWarArg) Size() (n int) {
	var l int
	_ = l
	if m.RemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.RemainTime))
	}
	return n
}

func (m *CaStateUnifiedArg) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	l = len(m.YourMajestyName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CountryPlayerAmount != 0 {
		n += 1 + sovCampaign(uint64(m.CountryPlayerAmount))
	}
	return n
}

func (m *CaStateWarEndArg) Size() (n int) {
	var l int
	_ = l
	if m.Contribution != 0 {
		n += 1 + sovCampaign(uint64(m.Contribution))
	}
	if len(m.LostCitys) > 0 {
		l = 0
		for _, e := range m.LostCitys {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	if len(m.OccupyCitys) > 0 {
		l = 0
		for _, e := range m.OccupyCitys {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	if m.NextWarRemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.NextWarRemainTime))
	}
	return n
}

func (m *UpdateCityStateArg) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovCampaign(uint64(m.State))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.OccupyCountryID != 0 {
		n += 1 + sovCampaign(uint64(m.OccupyCountryID))
	}
	return n
}

func (m *CampaignPlayerState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovCampaign(uint64(m.State))
	}
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CpStateKickOutArg) Size() (n int) {
	var l int
	_ = l
	if m.RemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.RemainTime))
	}
	return n
}

func (m *CpStateLoadingArg) Size() (n int) {
	var l int
	_ = l
	if m.MaxTime != 0 {
		n += 1 + sovCampaign(uint64(m.MaxTime))
	}
	if m.RemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.RemainTime))
	}
	return n
}

func (m *CpStateBeCaptiveArg) Size() (n int) {
	var l int
	_ = l
	if m.RemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.RemainTime))
	}
	return n
}

func (m *CitySimpleData) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	if m.State != 0 {
		n += 1 + sovCampaign(uint64(m.State))
	}
	if m.Defense != 0 {
		n += 1 + sovCampaign(uint64(m.Defense))
	}
	return n
}

func (m *TeamData) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCampaign(uint64(m.ID))
	}
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	if len(m.CityPath) > 0 {
		l = 0
		for _, e := range m.CityPath {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	if m.Trip != 0 {
		n += 1 + sovCampaign(uint64(m.Trip))
	}
	if m.State != 0 {
		n += 1 + sovCampaign(uint64(m.State))
	}
	if m.TeamAmount != 0 {
		n += 1 + sovCampaign(uint64(m.TeamAmount))
	}
	return n
}

func (m *UpdateMyTeamStateArg) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovCampaign(uint64(m.State))
	}
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *MyTeamDisappear) Size() (n int) {
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovCampaign(uint64(m.Reason))
	}
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *TeamRetreat) Size() (n int) {
	var l int
	_ = l
	if m.OldCity != 0 {
		n += 1 + sovCampaign(uint64(m.OldCity))
	}
	if m.NewCity != 0 {
		n += 1 + sovCampaign(uint64(m.NewCity))
	}
	return n
}

func (m *MilitaryOrder) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	if m.Amount != 0 {
		n += 1 + sovCampaign(uint64(m.Amount))
	}
	if m.MaxAmount != 0 {
		n += 1 + sovCampaign(uint64(m.MaxAmount))
	}
	if m.TargetCity != 0 {
		n += 1 + sovCampaign(uint64(m.TargetCity))
	}
	return n
}

func (m *PublishMilitaryOrderArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	if m.Amount != 0 {
		n += 1 + sovCampaign(uint64(m.Amount))
	}
	if len(m.CityPath) > 0 {
		l = 0
		for _, e := range m.CityPath {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	return n
}

func (m *PublishMilitaryOrderReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	return n
}

func (m *CancelMilitaryOrderReply) Size() (n int) {
	var l int
	_ = l
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	return n
}

func (m *MilitaryOrderInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *TargetMilitaryOrder) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.TargetCity != 0 {
		n += 1 + sovCampaign(uint64(m.TargetCity))
	}
	return n
}

func (m *AcceptMilitaryOrderArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.TargetCity != 0 {
		n += 1 + sovCampaign(uint64(m.TargetCity))
	}
	if len(m.CardIDs) > 0 {
		l = 0
		for _, e := range m.CardIDs {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	return n
}

func (m *AcceptMilitaryOrderReply) Size() (n int) {
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CountrySimpleData) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CampaignInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Citys) > 0 {
		for _, e := range m.Citys {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	if len(m.Countrys) > 0 {
		for _, e := range m.Countrys {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	if m.MyCityID != 0 {
		n += 1 + sovCampaign(uint64(m.MyCityID))
	}
	if m.MyLocationCityID != 0 {
		n += 1 + sovCampaign(uint64(m.MyLocationCityID))
	}
	if m.MyCityJob != 0 {
		n += 1 + sovCampaign(uint64(m.MyCityJob))
	}
	if m.MyCountryJob != 0 {
		n += 1 + sovCampaign(uint64(m.MyCountryJob))
	}
	if m.MyTeam != nil {
		l = m.MyTeam.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	if m.HasCompleteMission {
		n += 2
	}
	if m.HasNewNotice {
		n += 2
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.MyState != nil {
		l = m.MyState.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.MyCountryID != 0 {
		n += 1 + sovCampaign(uint64(m.MyCountryID))
	}
	if m.Contribution != 0 {
		n += 1 + sovCampaign(uint64(m.Contribution))
	}
	if m.LastCountryID != 0 {
		n += 2 + sovCampaign(uint64(m.LastCountryID))
	}
	if m.TeamDisappear != nil {
		l = m.TeamDisappear.Size()
		n += 2 + l + sovCampaign(uint64(l))
	}
	if len(m.SupportCards) > 0 {
		l = 0
		for _, e := range m.SupportCards {
			l += sovCampaign(uint64(e))
		}
		n += 2 + sovCampaign(uint64(l)) + l
	}
	if m.MaxContribution != 0 {
		n += 2 + sovCampaign(uint64(m.MaxContribution))
	}
	if m.DefPlayerAmounts != nil {
		l = m.DefPlayerAmounts.Size()
		n += 2 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CreateCountryArg) Size() (n int) {
	var l int
	_ = l
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	return n
}

func (m *TargetCity) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	return n
}

func (m *CountryCreatedArg) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.YourMajesty != nil {
		l = m.YourMajesty.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CampaignPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCampaign(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.HeadImg)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityJob != 0 {
		n += 1 + sovCampaign(uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		n += 1 + sovCampaign(uint64(m.CountryJob))
	}
	if m.PvpScore != 0 {
		n += 1 + sovCampaign(uint64(m.PvpScore))
	}
	if m.Contribution != 0 {
		n += 1 + sovCampaign(uint64(m.Contribution))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CampaignPlayerList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *CityData) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	if m.PlayerAmount != 0 {
		n += 1 + sovCampaign(uint64(m.PlayerAmount))
	}
	if m.Agriculture != 0 {
		n += 1 + sovCampaign(uint64(m.Agriculture))
	}
	if m.Business != 0 {
		n += 1 + sovCampaign(uint64(m.Business))
	}
	if m.Defense != 0 {
		n += 1 + sovCampaign(uint64(m.Defense))
	}
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	if m.Glory != 0 {
		n += 1 + sovCampaign(uint64(m.Glory))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	if m.ApplyCreateCountry != nil {
		l = m.ApplyCreateCountry.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.YourMajesty != nil {
		l = m.YourMajesty.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.InCityPlayerAmount != 0 {
		n += 1 + sovCampaign(uint64(m.InCityPlayerAmount))
	}
	return n
}

func (m *FetchApplyCreateCountryPlayersArg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Page != 0 {
		n += 1 + sovCampaign(uint64(m.Page))
	}
	return n
}

func (m *ApplyCreateCountryPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	return n
}

func (m *ApplyCreateCountryPlayers) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *ApplyCreateCountryData) Size() (n int) {
	var l int
	_ = l
	if m.RemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.RemainTime))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	if m.MyApplyMoney != 0 {
		n += 1 + sovCampaign(uint64(m.MyApplyMoney))
	}
	if m.MyCountryName != 0 {
		n += 1 + sovCampaign(uint64(m.MyCountryName))
	}
	return n
}

func (m *UpdateForageArg) Size() (n int) {
	var l int
	_ = l
	if m.ForageAmount != 0 {
		n += 1 + sovCampaign(uint64(m.ForageAmount))
	}
	return n
}

func (m *CampaignMission) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.GoldReward != 0 {
		n += 1 + sovCampaign(uint64(m.GoldReward))
	}
	if m.Amount != 0 {
		n += 1 + sovCampaign(uint64(m.Amount))
	}
	if m.TransportType != 0 {
		n += 1 + sovCampaign(uint64(m.TransportType))
	}
	if m.TransportTargetCity != 0 {
		n += 1 + sovCampaign(uint64(m.TransportTargetCity))
	}
	if m.TransportMaxTime != 0 {
		n += 1 + sovCampaign(uint64(m.TransportMaxTime))
	}
	if m.MaxAmount != 0 {
		n += 1 + sovCampaign(uint64(m.MaxAmount))
	}
	if m.Contribution != 0 {
		n += 1 + sovCampaign(uint64(m.Contribution))
	}
	return n
}

func (m *ExecutingCampaignMission) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.GoldReward != 0 {
		n += 1 + sovCampaign(uint64(m.GoldReward))
	}
	if m.RemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.RemainTime))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	if m.MaxTime != 0 {
		n += 1 + sovCampaign(uint64(m.MaxTime))
	}
	if m.Contribution != 0 {
		n += 1 + sovCampaign(uint64(m.Contribution))
	}
	return n
}

func (m *CampaignMissionInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Missions) > 0 {
		for _, e := range m.Missions {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	if m.ExecutingMission != nil {
		l = m.ExecutingMission.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CampaignPublishMissionArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.GoldReward != 0 {
		n += 1 + sovCampaign(uint64(m.GoldReward))
	}
	if m.Amount != 0 {
		n += 1 + sovCampaign(uint64(m.Amount))
	}
	if m.TransportType != 0 {
		n += 1 + sovCampaign(uint64(m.TransportType))
	}
	if len(m.TransportCityPath) > 0 {
		l = 0
		for _, e := range m.TransportCityPath {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	return n
}

func (m *CampaignPublishMissionReply) Size() (n int) {
	var l int
	_ = l
	if m.MissionInfo != nil {
		l = m.MissionInfo.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	return n
}

func (m *AcceptCampaignMissionArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	if m.TransportTargetCity != 0 {
		n += 1 + sovCampaign(uint64(m.TransportTargetCity))
	}
	return n
}

func (m *AcceptCampaignMissionReply) Size() (n int) {
	var l int
	_ = l
	if m.RemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.RemainTime))
	}
	if len(m.Missions) > 0 {
		for _, e := range m.Missions {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *FetchCityPlayersArg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Page != 0 {
		n += 1 + sovCampaign(uint64(m.Page))
	}
	return n
}

func (m *SetForagePriceArg) Size() (n int) {
	var l int
	_ = l
	if m.Price != 0 {
		n += 1 + sovCampaign(uint64(m.Price))
	}
	return n
}

func (m *FetchForagePriceReply) Size() (n int) {
	var l int
	_ = l
	if m.ForageAmount != 0 {
		n += 1 + sovCampaign(uint64(m.ForageAmount))
	}
	if m.Price != 0 {
		n += 1 + sovCampaign(uint64(m.Price))
	}
	return n
}

func (m *NewCountryNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	return n
}

func (m *AppointJobNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.TargetPlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	return n
}

func (m *RecallJobNtArg) Size() (n int) {
	var l int
	_ = l
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	return n
}

func (m *AutocephalyNtArg) Size() (n int) {
	var l int
	_ = l
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.NewCountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *KickOutNtArg) Size() (n int) {
	var l int
	_ = l
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	return n
}

func (m *YourMajestyChangeNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.YourMajestyName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.NewYourMajestyName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *ResignNtArg) Size() (n int) {
	var l int
	_ = l
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	return n
}

func (m *BeOccupyNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.BeOccupyCityID != 0 {
		n += 1 + sovCampaign(uint64(m.BeOccupyCityID))
	}
	if m.CaptiveAmount != 0 {
		n += 1 + sovCampaign(uint64(m.CaptiveAmount))
	}
	return n
}

func (m *DestoryCountryNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.BeDestoryCountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *UnifiedWordNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.YourMajestyName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *AutocephalyVoteNtArg) Size() (n int) {
	var l int
	_ = l
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CapitalInjectionNtArg) Size() (n int) {
	var l int
	_ = l
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	return n
}

func (m *ProductionNtArg) Size() (n int) {
	var l int
	_ = l
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	return n
}

func (m *SalaryNtArg) Size() (n int) {
	var l int
	_ = l
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	return n
}

func (m *TransportNtArg) Size() (n int) {
	var l int
	_ = l
	if m.FromCity != 0 {
		n += 1 + sovCampaign(uint64(m.FromCity))
	}
	if m.TargetCity != 0 {
		n += 1 + sovCampaign(uint64(m.TargetCity))
	}
	if m.TransportType != 0 {
		n += 1 + sovCampaign(uint64(m.TransportType))
	}
	if m.Amount != 0 {
		n += 1 + sovCampaign(uint64(m.Amount))
	}
	return n
}

func (m *OccupyNtArg) Size() (n int) {
	var l int
	_ = l
	if m.OccupyCityID != 0 {
		n += 1 + sovCampaign(uint64(m.OccupyCityID))
	}
	if m.CaptiveAmount != 0 {
		n += 1 + sovCampaign(uint64(m.CaptiveAmount))
	}
	return n
}

func (m *SurrenderNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *BetrayNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *EscapedNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *EscapedReturnNtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *SurrenderCity1NtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	l = len(m.TargetCountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *SurrenderCity2NtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	return n
}

func (m *SurrenderCountry1NtArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.TargetCountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *AutocephalyNt2Arg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.OldCountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.NewCountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *AutocephalyNt3Arg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	l = len(m.NewCountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CampaignNotice) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCampaign(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.Time != 0 {
		n += 1 + sovCampaign(uint64(m.Time))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CampaignNoticeInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Notices) > 0 {
		for _, e := range m.Notices {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *CityPlayerAmount) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.PlayerAmount != 0 {
		n += 1 + sovCampaign(uint64(m.PlayerAmount))
	}
	if m.Glory != 0 {
		n += 1 + sovCampaign(uint64(m.Glory))
	}
	if m.MaxApplyCountryGold != 0 {
		n += 1 + sovCampaign(uint64(m.MaxApplyCountryGold))
	}
	if m.AvgMissionReward != 0 {
		n += 1 + sovCampaign(uint64(m.AvgMissionReward))
	}
	return n
}

func (m *AllCityPlayerAmount) Size() (n int) {
	var l int
	_ = l
	if len(m.PlayerAmounts) > 0 {
		for _, e := range m.PlayerAmounts {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *FetchCountryPlayersArg) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	if m.Page != 0 {
		n += 1 + sovCampaign(uint64(m.Page))
	}
	return n
}

func (m *CampaignNotifyRedDotArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	return n
}

func (m *AppointJobArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCampaign(uint64(m.Uid))
	}
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	if m.OldUid != 0 {
		n += 1 + sovCampaign(uint64(m.OldUid))
	}
	return n
}

func (m *RecallJobArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCampaign(uint64(m.Uid))
	}
	if m.Job != 0 {
		n += 1 + sovCampaign(uint64(m.Job))
	}
	return n
}

func (m *CityDefense) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Defense != 0 {
		n += 1 + sovCampaign(uint64(m.Defense))
	}
	return n
}

func (m *SyncCityDefenseArg) Size() (n int) {
	var l int
	_ = l
	if len(m.CityDefenses) > 0 {
		for _, e := range m.CityDefenses {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *CampaignUpdateJobArg) Size() (n int) {
	var l int
	_ = l
	if m.CityJob != 0 {
		n += 1 + sovCampaign(uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		n += 1 + sovCampaign(uint64(m.CountryJob))
	}
	return n
}

func (m *PatrolCityReply) Size() (n int) {
	var l int
	_ = l
	if m.Contribution != 0 {
		n += 1 + sovCampaign(uint64(m.Contribution))
	}
	if m.Salary != 0 {
		n += 1 + sovCampaign(uint64(m.Salary))
	}
	return n
}

func (m *CityCapitalInjectionArg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	return n
}

func (m *CityCapitalInjectionReply) Size() (n int) {
	var l int
	_ = l
	if m.CurGold != 0 {
		n += 1 + sovCampaign(uint64(m.CurGold))
	}
	return n
}

func (m *UpdateMyCityArg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.LocationCityID != 0 {
		n += 1 + sovCampaign(uint64(m.LocationCityID))
	}
	return n
}

func (m *CampaignTargetPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCampaign(uint64(m.Uid))
	}
	return n
}

func (m *UpdateMyCountryArg) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	if m.LastCountryID != 0 {
		n += 1 + sovCampaign(uint64(m.LastCountryID))
	}
	return n
}

func (m *AutocephalyInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if len(m.AgreePlayers) > 0 {
		for _, e := range m.AgreePlayers {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *AutocephalyArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *VoteAutocephalyArg) Size() (n int) {
	var l int
	_ = l
	if m.IsAgree {
		n += 2
	}
	if m.NoticeID != 0 {
		n += 1 + sovCampaign(uint64(m.NoticeID))
	}
	return n
}

func (m *AccDefCityLoseLoadingReply) Size() (n int) {
	var l int
	_ = l
	if m.RemainTime != 0 {
		n += 1 + sovCampaign(uint64(m.RemainTime))
	}
	return n
}

func (m *CountryModifyNameArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CountryModifyFlagArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *UpdateCountryNameArg) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *UpdateCountryFlagArg) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *CancelPublishMissionArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCampaign(uint64(m.Type))
	}
	if m.TransportTargetCity != 0 {
		n += 1 + sovCampaign(uint64(m.TransportTargetCity))
	}
	return n
}

func (m *CancelPublishMissionReply) Size() (n int) {
	var l int
	_ = l
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	if m.Forage != 0 {
		n += 1 + sovCampaign(uint64(m.Forage))
	}
	return n
}

func (m *CampaignTeams) Size() (n int) {
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *CountryDestoryed) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	return n
}

func (m *CapitalInjectionRecord) Size() (n int) {
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	if m.Time != 0 {
		n += 1 + sovCampaign(uint64(m.Time))
	}
	return n
}

func (m *CityCapitalInjectionHistory) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *UpdateContributionArg) Size() (n int) {
	var l int
	_ = l
	if m.Contribution != 0 {
		n += 1 + sovCampaign(uint64(m.Contribution))
	}
	if m.MaxContribution != 0 {
		n += 1 + sovCampaign(uint64(m.MaxContribution))
	}
	return n
}

func (m *CityNotice) Size() (n int) {
	var l int
	_ = l
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *FetchCityCapitalInjectionArg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Page != 0 {
		n += 1 + sovCampaign(uint64(m.Page))
	}
	return n
}

func (m *CampaignSimplePlayer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCampaign(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.HeadImg)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.PvpScore != 0 {
		n += 1 + sovCampaign(uint64(m.PvpScore))
	}
	return n
}

func (m *SyncCityPlayerAmount) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Amount != 0 {
		n += 1 + sovCampaign(uint64(m.Amount))
	}
	return n
}

func (m *CampaignSupportCard) Size() (n int) {
	var l int
	_ = l
	if len(m.CardIDs) > 0 {
		l = 0
		for _, e := range m.CardIDs {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	return n
}

func (m *SurrenderCityArg) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	return n
}

func (m *UpdateCityCountryArg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	return n
}

func (m *CitysDefPlayerAmount) Size() (n int) {
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *CampaignBuyGoodsArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.GoodsID != 0 {
		n += 1 + sovCampaign(uint64(m.GoodsID))
	}
	return n
}

func (m *ContributionReply) Size() (n int) {
	var l int
	_ = l
	if m.Contribution != 0 {
		n += 1 + sovCampaign(uint64(m.Contribution))
	}
	return n
}

func (m *GSettleCityArg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *GCancelCampaignMissionReply) Size() (n int) {
	var l int
	_ = l
	if len(m.CardIDs) > 0 {
		l = 0
		for _, e := range m.CardIDs {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	return n
}

func (m *GGetCampaignMissionRewardReply) Size() (n int) {
	var l int
	_ = l
	if len(m.CardIDs) > 0 {
		l = 0
		for _, e := range m.CardIDs {
			l += sovCampaign(uint64(e))
		}
		n += 1 + sovCampaign(uint64(l)) + l
	}
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	return n
}

func (m *GetMyCountryReply) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	return n
}

func (m *MoveCityArg) Size() (n int) {
	var l int
	_ = l
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.Gold != 0 {
		n += 1 + sovCampaign(uint64(m.Gold))
	}
	return n
}

func (m *MoveCityRelpy) Size() (n int) {
	var l int
	_ = l
	if m.NeedGold {
		n += 2
	}
	return n
}

func (m *CampaignBattleEnd) Size() (n int) {
	var l int
	_ = l
	if m.IsWin {
		n += 2
	}
	return n
}

func (m *GCampaignPlayerInfo) Size() (n int) {
	var l int
	_ = l
	if m.CountryID != 0 {
		n += 1 + sovCampaign(uint64(m.CountryID))
	}
	if m.CityID != 0 {
		n += 1 + sovCampaign(uint64(m.CityID))
	}
	if m.CityJob != 0 {
		n += 1 + sovCampaign(uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		n += 1 + sovCampaign(uint64(m.CountryJob))
	}
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if len(m.Notices) > 0 {
		for _, e := range m.Notices {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func (m *GCampaignInfo) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovCampaign(uint64(m.Version))
	}
	if m.CampaignState != 0 {
		n += 1 + sovCampaign(uint64(m.CampaignState))
	}
	return n
}

func (m *ModifyContributionArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCampaign(uint64(m.Uid))
	}
	if m.Amount != 0 {
		n += 1 + sovCampaign(uint64(m.Amount))
	}
	return n
}

func (m *GAcceptCampaignMissionReply) Size() (n int) {
	var l int
	_ = l
	if m.AcceptReply != nil {
		l = m.AcceptReply.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.RewardGold != 0 {
		n += 1 + sovCampaign(uint64(m.RewardGold))
	}
	return n
}

func sovCampaign(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCampaign(x uint64) (n int) {
	return sovCampaign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CampaignState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CampaignState_StateEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaStateWarArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaStateWarArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaStateWarArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaStateUnifiedArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaStateUnifiedArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaStateUnifiedArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YourMajestyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YourMajestyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryPlayerAmount", wireType)
			}
			m.CountryPlayerAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryPlayerAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaStateWarEndArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaStateWarEndArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaStateWarEndArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			m.Contribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LostCitys = append(m.LostCitys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LostCitys = append(m.LostCitys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LostCitys", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OccupyCitys = append(m.OccupyCitys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OccupyCitys = append(m.OccupyCitys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OccupyCitys", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextWarRemainTime", wireType)
			}
			m.NextWarRemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextWarRemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCityStateArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCityStateArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCityStateArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CityState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccupyCountryID", wireType)
			}
			m.OccupyCountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OccupyCountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignPlayerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignPlayerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignPlayerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CampaignPlayerState_StateEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpStateKickOutArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpStateKickOutArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpStateKickOutArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpStateLoadingArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpStateLoadingArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpStateLoadingArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTime", wireType)
			}
			m.MaxTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpStateBeCaptiveArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpStateBeCaptiveArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpStateBeCaptiveArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CitySimpleData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CitySimpleData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CitySimpleData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CityState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defense", wireType)
			}
			m.Defense = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defense |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CityPath = append(m.CityPath, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CityPath = append(m.CityPath, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CityPath", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			m.Trip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Trip |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TeamState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAmount", wireType)
			}
			m.TeamAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMyTeamStateArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMyTeamStateArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMyTeamStateArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TeamState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyTeamDisappear) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyTeamDisappear: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyTeamDisappear: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (MyTeamDisappear_ReasonEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamRetreat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamRetreat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamRetreat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldCity", wireType)
			}
			m.OldCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCity", wireType)
			}
			m.NewCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MilitaryOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MilitaryOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MilitaryOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MilitaryOrderType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			m.MaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCity", wireType)
			}
			m.TargetCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishMilitaryOrderArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishMilitaryOrderArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishMilitaryOrderArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MilitaryOrderType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CityPath = append(m.CityPath, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CityPath = append(m.CityPath, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CityPath", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishMilitaryOrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishMilitaryOrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishMilitaryOrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &MilitaryOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelMilitaryOrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelMilitaryOrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelMilitaryOrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MilitaryOrderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MilitaryOrderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MilitaryOrderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &MilitaryOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetMilitaryOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetMilitaryOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetMilitaryOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MilitaryOrderType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCity", wireType)
			}
			m.TargetCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptMilitaryOrderArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptMilitaryOrderArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptMilitaryOrderArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MilitaryOrderType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCity", wireType)
			}
			m.TargetCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardIDs = append(m.CardIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardIDs = append(m.CardIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptMilitaryOrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptMilitaryOrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptMilitaryOrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &CampaignPlayerState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &TeamData{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountrySimpleData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountrySimpleData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountrySimpleData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Citys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Citys = append(m.Citys, &CitySimpleData{})
			if err := m.Citys[len(m.Citys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countrys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Countrys = append(m.Countrys, &CountrySimpleData{})
			if err := m.Countrys[len(m.Countrys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCityID", wireType)
			}
			m.MyCityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyCityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLocationCityID", wireType)
			}
			m.MyLocationCityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyLocationCityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCityJob", wireType)
			}
			m.MyCityJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyCityJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCountryJob", wireType)
			}
			m.MyCountryJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyCountryJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyTeam == nil {
				m.MyTeam = &TeamData{}
			}
			if err := m.MyTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &TeamData{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasCompleteMission", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasCompleteMission = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasNewNotice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasNewNotice = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &CampaignState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyState == nil {
				m.MyState = &CampaignPlayerState{}
			}
			if err := m.MyState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCountryID", wireType)
			}
			m.MyCountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyCountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			m.Contribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCountryID", wireType)
			}
			m.LastCountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamDisappear", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamDisappear == nil {
				m.TeamDisappear = &MyTeamDisappear{}
			}
			if err := m.TeamDisappear.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportCards = append(m.SupportCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportCards = append(m.SupportCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportCards", wireType)
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxContribution", wireType)
			}
			m.MaxContribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxContribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefPlayerAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefPlayerAmounts == nil {
				m.DefPlayerAmounts = &CitysDefPlayerAmount{}
			}
			if err := m.DefPlayerAmounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCountryArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCountryArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCountryArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetCity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetCity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetCity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryCreatedArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryCreatedArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryCreatedArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YourMajesty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YourMajesty == nil {
				m.YourMajesty = &CampaignSimplePlayer{}
			}
			if err := m.YourMajesty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityJob", wireType)
			}
			m.CityJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryJob", wireType)
			}
			m.CountryJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpScore", wireType)
			}
			m.PvpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			m.Contribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &CampaignPlayerState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignPlayerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignPlayerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignPlayerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &CampaignPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CityData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CityData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CityData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAmount", wireType)
			}
			m.PlayerAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agriculture", wireType)
			}
			m.Agriculture = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Agriculture |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defense", wireType)
			}
			m.Defense = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defense |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glory", wireType)
			}
			m.Glory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Glory |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &CampaignPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyCreateCountry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyCreateCountry == nil {
				m.ApplyCreateCountry = &ApplyCreateCountryData{}
			}
			if err := m.ApplyCreateCountry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YourMajesty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YourMajesty == nil {
				m.YourMajesty = &CampaignSimplePlayer{}
			}
			if err := m.YourMajesty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InCityPlayerAmount", wireType)
			}
			m.InCityPlayerAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InCityPlayerAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchApplyCreateCountryPlayersArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchApplyCreateCountryPlayersArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchApplyCreateCountryPlayersArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyCreateCountryPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyCreateCountryPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyCreateCountryPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &CampaignPlayer{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyCreateCountryPlayers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyCreateCountryPlayers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyCreateCountryPlayers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &ApplyCreateCountryPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyCreateCountryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyCreateCountryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyCreateCountryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &ApplyCreateCountryPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyApplyMoney", wireType)
			}
			m.MyApplyMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyApplyMoney |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCountryName", wireType)
			}
			m.MyCountryName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyCountryName |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateForageArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateForageArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateForageArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForageAmount", wireType)
			}
			m.ForageAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForageAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignMission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignMission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignMission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CampaignMsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldReward", wireType)
			}
			m.GoldReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldReward |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportType", wireType)
			}
			m.TransportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportType |= (TransportTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportTargetCity", wireType)
			}
			m.TransportTargetCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportTargetCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportMaxTime", wireType)
			}
			m.TransportMaxTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportMaxTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			m.MaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			m.Contribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutingCampaignMission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutingCampaignMission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutingCampaignMission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CampaignMsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldReward", wireType)
			}
			m.GoldReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldReward |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTime", wireType)
			}
			m.MaxTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			m.Contribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignMissionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignMissionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignMissionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Missions = append(m.Missions, &CampaignMission{})
			if err := m.Missions[len(m.Missions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutingMission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutingMission == nil {
				m.ExecutingMission = &ExecutingCampaignMission{}
			}
			if err := m.ExecutingMission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignPublishMissionArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignPublishMissionArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignPublishMissionArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CampaignMsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldReward", wireType)
			}
			m.GoldReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldReward |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportType", wireType)
			}
			m.TransportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportType |= (TransportTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TransportCityPath = append(m.TransportCityPath, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TransportCityPath = append(m.TransportCityPath, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportCityPath", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignPublishMissionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignPublishMissionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignPublishMissionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MissionInfo == nil {
				m.MissionInfo = &CampaignMissionInfo{}
			}
			if err := m.MissionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptCampaignMissionArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptCampaignMissionArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptCampaignMissionArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CampaignMsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportTargetCity", wireType)
			}
			m.TransportTargetCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportTargetCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptCampaignMissionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptCampaignMissionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptCampaignMissionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Missions = append(m.Missions, &CampaignMission{})
			if err := m.Missions[len(m.Missions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchCityPlayersArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchCityPlayersArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchCityPlayersArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetForagePriceArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetForagePriceArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetForagePriceArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchForagePriceReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchForagePriceReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchForagePriceReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForageAmount", wireType)
			}
			m.ForageAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForageAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCountryNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCountryNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCountryNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppointJobNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointJobNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointJobNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetPlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallJobNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallJobNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallJobNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocephalyNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocephalyNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocephalyNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickOutNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickOutNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickOutNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YourMajestyChangeNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YourMajestyChangeNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YourMajestyChangeNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YourMajestyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YourMajestyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewYourMajestyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewYourMajestyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResignNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResignNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResignNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeOccupyNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeOccupyNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeOccupyNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeOccupyCityID", wireType)
			}
			m.BeOccupyCityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeOccupyCityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptiveAmount", wireType)
			}
			m.CaptiveAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptiveAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestoryCountryNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestoryCountryNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestoryCountryNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeDestoryCountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeDestoryCountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnifiedWordNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnifiedWordNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnifiedWordNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YourMajestyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YourMajestyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocephalyVoteNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocephalyVoteNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocephalyVoteNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapitalInjectionNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapitalInjectionNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapitalInjectionNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductionNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductionNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductionNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SalaryNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SalaryNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SalaryNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransportNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransportNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransportNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromCity", wireType)
			}
			m.FromCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCity", wireType)
			}
			m.TargetCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportType", wireType)
			}
			m.TransportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportType |= (TransportTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OccupyNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OccupyNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OccupyNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccupyCityID", wireType)
			}
			m.OccupyCityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OccupyCityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptiveAmount", wireType)
			}
			m.CaptiveAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptiveAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SurrenderNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurrenderNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurrenderNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetrayNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetrayNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetrayNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscapedNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscapedNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscapedNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscapedReturnNtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscapedReturnNtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscapedReturnNtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SurrenderCity1NtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurrenderCity1NtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurrenderCity1NtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SurrenderCity2NtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurrenderCity2NtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurrenderCity2NtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SurrenderCountry1NtArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurrenderCountry1NtArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurrenderCountry1NtArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocephalyNt2Arg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocephalyNt2Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocephalyNt2Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldCountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldCountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocephalyNt3Arg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocephalyNt3Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocephalyNt3Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CampaignNoticeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args[:0], dAtA[iNdEx:postIndex]...)
			if m.Args == nil {
				m.Args = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignNoticeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignNoticeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignNoticeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notices = append(m.Notices, &CampaignNotice{})
			if err := m.Notices[len(m.Notices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CityPlayerAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CityPlayerAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CityPlayerAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAmount", wireType)
			}
			m.PlayerAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glory", wireType)
			}
			m.Glory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Glory |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxApplyCountryGold", wireType)
			}
			m.MaxApplyCountryGold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxApplyCountryGold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgMissionReward", wireType)
			}
			m.AvgMissionReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgMissionReward |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllCityPlayerAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllCityPlayerAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllCityPlayerAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAmounts = append(m.PlayerAmounts, &CityPlayerAmount{})
			if err := m.PlayerAmounts[len(m.PlayerAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchCountryPlayersArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchCountryPlayersArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchCountryPlayersArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignNotifyRedDotArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignNotifyRedDotArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignNotifyRedDotArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CampaignNotifyRedDotArg_RedDotType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppointJobArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointJobArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointJobArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldUid", wireType)
			}
			m.OldUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallJobArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallJobArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallJobArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CityDefense) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CityDefense: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CityDefense: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defense", wireType)
			}
			m.Defense = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defense |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCityDefenseArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCityDefenseArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCityDefenseArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityDefenses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityDefenses = append(m.CityDefenses, &CityDefense{})
			if err := m.CityDefenses[len(m.CityDefenses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignUpdateJobArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignUpdateJobArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignUpdateJobArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityJob", wireType)
			}
			m.CityJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryJob", wireType)
			}
			m.CountryJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatrolCityReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatrolCityReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatrolCityReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			m.Contribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			m.Salary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salary |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CityCapitalInjectionArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CityCapitalInjectionArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CityCapitalInjectionArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CityCapitalInjectionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CityCapitalInjectionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CityCapitalInjectionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurGold", wireType)
			}
			m.CurGold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurGold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMyCityArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMyCityArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMyCityArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationCityID", wireType)
			}
			m.LocationCityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocationCityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignTargetPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignTargetPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignTargetPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMyCountryArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMyCountryArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMyCountryArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCountryID", wireType)
			}
			m.LastCountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocephalyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocephalyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocephalyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreePlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgreePlayers = append(m.AgreePlayers, &CampaignPlayer{})
			if err := m.AgreePlayers[len(m.AgreePlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocephalyArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocephalyArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocephalyArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteAutocephalyArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteAutocephalyArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteAutocephalyArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeID", wireType)
			}
			m.NoticeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccDefCityLoseLoadingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccDefCityLoseLoadingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccDefCityLoseLoadingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryModifyNameArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryModifyNameArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryModifyNameArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryModifyFlagArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryModifyFlagArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryModifyFlagArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCountryNameArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCountryNameArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCountryNameArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCountryFlagArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCountryFlagArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCountryFlagArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelPublishMissionArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelPublishMissionArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelPublishMissionArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CampaignMsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportTargetCity", wireType)
			}
			m.TransportTargetCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportTargetCity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelPublishMissionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelPublishMissionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelPublishMissionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignTeams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignTeams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignTeams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &TeamData{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryDestoryed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryDestoryed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryDestoryed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapitalInjectionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapitalInjectionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapitalInjectionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &CampaignPlayer{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CityCapitalInjectionHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CityCapitalInjectionHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CityCapitalInjectionHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &CapitalInjectionRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContributionArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContributionArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContributionArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			m.Contribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxContribution", wireType)
			}
			m.MaxContribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxContribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CityNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CityNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CityNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchCityCapitalInjectionArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchCityCapitalInjectionArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchCityCapitalInjectionArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignSimplePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignSimplePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignSimplePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpScore", wireType)
			}
			m.PvpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCityPlayerAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCityPlayerAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCityPlayerAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignSupportCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignSupportCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignSupportCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardIDs = append(m.CardIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardIDs = append(m.CardIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SurrenderCityArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurrenderCityArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurrenderCityArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCityCountryArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCityCountryArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCityCountryArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CitysDefPlayerAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CitysDefPlayerAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CitysDefPlayerAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, &SyncCityPlayerAmount{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignBuyGoodsArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignBuyGoodsArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignBuyGoodsArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsID", wireType)
			}
			m.GoodsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContributionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContributionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContributionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			m.Contribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GSettleCityArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GSettleCityArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GSettleCityArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &CampaignSimplePlayer{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCancelCampaignMissionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCancelCampaignMissionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCancelCampaignMissionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardIDs = append(m.CardIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardIDs = append(m.CardIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GGetCampaignMissionRewardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GGetCampaignMissionRewardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GGetCampaignMissionRewardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardIDs = append(m.CardIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCampaign
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampaign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardIDs = append(m.CardIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIDs", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMyCountryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMyCountryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMyCountryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveCityArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveCityArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveCityArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveCityRelpy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveCityRelpy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveCityRelpy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedGold", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedGold = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignBattleEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignBattleEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignBattleEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCampaignPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCampaignPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCampaignPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityJob", wireType)
			}
			m.CityJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryJob", wireType)
			}
			m.CountryJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notices = append(m.Notices, &CampaignNotice{})
			if err := m.Notices[len(m.Notices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCampaignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCampaignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCampaignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignState", wireType)
			}
			m.CampaignState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyContributionArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyContributionArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyContributionArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GAcceptCampaignMissionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GAcceptCampaignMissionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GAcceptCampaignMissionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptReply == nil {
				m.AcceptReply = &AcceptCampaignMissionReply{}
			}
			if err := m.AcceptReply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardGold", wireType)
			}
			m.RewardGold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardGold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCampaign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCampaign
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCampaign
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCampaign(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCampaign = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCampaign   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("campaign.proto", fileDescriptorCampaign) }

var fileDescriptorCampaign = []byte{
	// 4069 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3b, 0x4d, 0x6f, 0x1c, 0x47,
	0x76, 0xea, 0x9e, 0x2f, 0xf2, 0xcd, 0x07, 0x8b, 0x4d, 0x8a, 0x1a, 0x49, 0x8e, 0x20, 0x57, 0x0c,
	0x45, 0x62, 0x6c, 0x5a, 0xa2, 0xd6, 0x36, 0xec, 0x7c, 0x92, 0x43, 0x8a, 0x22, 0x57, 0x33, 0xa4,
	0x9b, 0xe3, 0x55, 0x76, 0x11, 0x2c, 0xd2, 0x9c, 0x29, 0x8e, 0x7a, 0xd5, 0xec, 0x1e, 0x74, 0xf7,
	0x58, 0x1a, 0x18, 0xc1, 0x5e, 0x92, 0x4b, 0x80, 0x00, 0x06, 0x72, 0xd9, 0x5b, 0x10, 0x20, 0x87,
	0x20, 0x40, 0x7e, 0x40, 0x72, 0x48, 0x80, 0x9c, 0x12, 0x20, 0x58, 0xe4, 0xb4, 0xe7, 0xc0, 0x09,
	0xf2, 0x17, 0x72, 0x0d, 0xea, 0xab, 0xbb, 0xaa, 0xbb, 0x87, 0x33, 0x94, 0x2c, 0x60, 0x2f, 0x64,
	0xd7, 0xab, 0x57, 0x55, 0xaf, 0x5e, 0xbd, 0x7a, 0x9f, 0x35, 0xd0, 0x1a, 0x38, 0x17, 0x63, 0xc7,
	0x1d, 0xf9, 0x5b, 0xe3, 0x30, 0x88, 0x03, 0xcb, 0x1c, 0x9f, 0xe1, 0xbf, 0x37, 0xa0, 0xd9, 0x11,
	0xe0, 0xd3, 0xd8, 0x89, 0x89, 0xf5, 0x08, 0x2a, 0xec, 0xa3, 0x6d, 0xdc, 0x35, 0xee, 0xb7, 0xb6,
	0x6f, 0x6f, 0x8d, 0xcf, 0xb6, 0x34, 0x8c, 0x2d, 0xf6, 0x77, 0xdf, 0x9f, 0x5c, 0xd8, 0x1c, 0xd3,
	0x42, 0x50, 0xda, 0x09, 0x47, 0x6d, 0xf3, 0xae, 0x71, 0xbf, 0x61, 0xd3, 0x4f, 0xdc, 0x87, 0xe5,
	0x04, 0xcb, 0x02, 0xa8, 0xf6, 0x82, 0xf0, 0xc2, 0xf1, 0xd0, 0x35, 0xab, 0x01, 0x4b, 0x36, 0x71,
	0x86, 0xd3, 0xe7, 0x4e, 0x88, 0x0c, 0x6b, 0x19, 0x2a, 0x87, 0x3e, 0xfd, 0x34, 0x29, 0xd2, 0x73,
	0x27, 0xdc, 0xf7, 0x87, 0xa8, 0x64, 0xd5, 0xa1, 0xf6, 0x95, 0xef, 0x9e, 0xbb, 0x64, 0x88, 0xca,
	0x14, 0xe7, 0xc4, 0x99, 0x44, 0x04, 0x55, 0xf0, 0xc7, 0x94, 0x56, 0x36, 0xef, 0x73, 0x27, 0xdc,
	0x09, 0x47, 0xd6, 0x1d, 0x00, 0x9b, 0x5c, 0x38, 0xae, 0xdf, 0x77, 0x2f, 0x38, 0xc1, 0x15, 0x5b,
	0x81, 0xe0, 0xbf, 0x34, 0x60, 0x55, 0x8c, 0x10, 0x13, 0xd2, 0x51, 0xef, 0xc1, 0x72, 0x27, 0x98,
	0xf8, 0x71, 0x38, 0x3d, 0xdc, 0x63, 0x83, 0x9a, 0x76, 0x0a, 0xb0, 0xee, 0xc3, 0xca, 0x8f, 0x83,
	0x49, 0xd8, 0x75, 0x7e, 0x46, 0xa2, 0x78, 0xda, 0x73, 0x2e, 0x08, 0xdb, 0xd8, 0xb2, 0x9d, 0x05,
	0x5b, 0x0f, 0x61, 0x4d, 0x0c, 0x3b, 0xf1, 0x9c, 0x29, 0x09, 0x77, 0x2e, 0x68, 0xab, 0x5d, 0x62,
	0x64, 0x14, 0x75, 0xe1, 0xbf, 0x35, 0x00, 0xa5, 0x3b, 0xd8, 0xf7, 0x19, 0x39, 0x18, 0x1a, 0x9d,
	0xc0, 0x8f, 0x43, 0xf7, 0x6c, 0x12, 0xbb, 0x81, 0x2f, 0xb6, 0xa1, 0xc1, 0x28, 0xc9, 0xcf, 0x82,
	0x28, 0xee, 0xb8, 0xf1, 0x34, 0x6a, 0x9b, 0x77, 0x4b, 0xf7, 0x2b, 0x76, 0x0a, 0xb0, 0xee, 0x42,
	0xfd, 0x78, 0x30, 0x98, 0x8c, 0xa7, 0xbc, 0xbf, 0xc4, 0xfa, 0x55, 0x90, 0xf5, 0x21, 0xac, 0xf6,
	0xc8, 0xeb, 0xf8, 0xb9, 0x13, 0x2a, 0xfc, 0x2a, 0xb3, 0x85, 0xf2, 0x1d, 0xf8, 0x1b, 0xb0, 0xbe,
	0x1a, 0x0f, 0x9d, 0x98, 0xd0, 0xc1, 0x8c, 0x5a, 0x4a, 0xe7, 0x6f, 0xea, 0x82, 0xd1, 0x64, 0x82,
	0x21, 0x11, 0xa4, 0x28, 0x6c, 0x40, 0x95, 0xc2, 0x0e, 0xf7, 0x18, 0xd3, 0x2a, 0xb6, 0x68, 0x51,
	0xae, 0x0a, 0x7a, 0x12, 0xce, 0x97, 0x18, 0xe7, 0xb3, 0x60, 0xfc, 0x2b, 0x03, 0xd6, 0xa4, 0xbc,
	0x71, 0xe6, 0xf1, 0x99, 0x3f, 0xd3, 0x97, 0x7f, 0x5f, 0x95, 0x4b, 0x05, 0x6f, 0x11, 0xe9, 0x8c,
	0x67, 0x49, 0x67, 0x13, 0x96, 0x77, 0x49, 0xc7, 0x19, 0xc7, 0xee, 0xd7, 0x04, 0x19, 0x54, 0x0e,
	0x7f, 0xe8, 0x0e, 0x5e, 0x1e, 0x4f, 0x62, 0x64, 0xd2, 0xc6, 0xe9, 0x64, 0x3c, 0x0e, 0xc2, 0x18,
	0x95, 0xac, 0x16, 0xc0, 0xfe, 0xeb, 0x31, 0x19, 0xba, 0xf4, 0x74, 0x50, 0x99, 0x76, 0xee, 0x91,
	0x73, 0xba, 0x57, 0x54, 0xa1, 0x0d, 0x9b, 0x0c, 0x62, 0xf7, 0x7c, 0x8a, 0xaa, 0xd6, 0x12, 0x94,
	0x6d, 0x12, 0xc5, 0xa8, 0x86, 0x1f, 0xc3, 0x6a, 0x67, 0xcc, 0xd6, 0x15, 0x93, 0x2e, 0x22, 0xc1,
	0xdd, 0x64, 0xd0, 0xb3, 0xc0, 0x19, 0xba, 0xfe, 0x88, 0x0e, 0x6a, 0x43, 0xad, 0xeb, 0xbc, 0x56,
	0x46, 0xc8, 0x66, 0x66, 0x3a, 0x33, 0x37, 0xdd, 0x27, 0xb0, 0x26, 0xa6, 0x4b, 0xf6, 0xb9, 0x08,
	0x15, 0x7f, 0x6e, 0x40, 0x8b, 0x1d, 0xb5, 0x7b, 0x31, 0xf6, 0xc8, 0x9e, 0x13, 0x3b, 0xca, 0x41,
	0x1b, 0xda, 0x41, 0x6b, 0x97, 0xcb, 0xcc, 0x5e, 0xae, 0x44, 0x86, 0x4a, 0x97, 0xc8, 0x50, 0x9b,
	0x31, 0x93, 0xf8, 0x91, 0x14, 0x51, 0xd9, 0xc4, 0xff, 0x60, 0xc0, 0x52, 0x9f, 0x38, 0x17, 0x8c,
	0x82, 0x16, 0x98, 0xc9, 0xea, 0xe6, 0xdc, 0x95, 0x6f, 0xc1, 0x12, 0x5d, 0xe8, 0xc4, 0x89, 0x5f,
	0x88, 0x0b, 0x92, 0xb4, 0x2d, 0x0b, 0xca, 0xfd, 0xd0, 0x1d, 0x8b, 0xd5, 0xd8, 0x77, 0x4a, 0x69,
	0x25, 0xa5, 0x94, 0x2e, 0xad, 0x51, 0x7a, 0x07, 0x80, 0xc2, 0xc4, 0xc5, 0xaf, 0x72, 0xbe, 0xa5,
	0x10, 0xdc, 0x85, 0x75, 0x7e, 0x91, 0xba, 0xd3, 0x64, 0xec, 0xac, 0xab, 0x94, 0x9b, 0x3c, 0x2f,
	0xb7, 0xff, 0x6e, 0xc0, 0x0a, 0x9f, 0x69, 0xcf, 0x8d, 0x9c, 0xf1, 0x98, 0x38, 0xa1, 0xf5, 0x29,
	0x54, 0x6d, 0xe2, 0x44, 0x42, 0x6f, 0xb4, 0xb6, 0xef, 0xd0, 0xb9, 0x32, 0x48, 0x5b, 0x1c, 0x83,
	0x5d, 0x0a, 0x81, 0x5d, 0x30, 0xbb, 0x47, 0x85, 0x40, 0xe2, 0x71, 0x21, 0x8e, 0x43, 0xe2, 0xc4,
	0xe8, 0x9a, 0x85, 0xa0, 0x41, 0x99, 0xb5, 0x4b, 0xf8, 0x65, 0x45, 0x06, 0xbd, 0x00, 0xa9, 0x7e,
	0x41, 0x26, 0xbd, 0x39, 0xfb, 0x7e, 0x4c, 0x42, 0xd6, 0x2c, 0x51, 0x35, 0xdf, 0x0b, 0x9e, 0x04,
	0xa1, 0x33, 0x22, 0xa8, 0x6c, 0x59, 0xd0, 0x12, 0x07, 0xb1, 0x47, 0xa2, 0x38, 0x08, 0xa7, 0xa8,
	0x82, 0x77, 0xa0, 0x4e, 0x69, 0x14, 0x6b, 0xd0, 0x33, 0x3f, 0xf6, 0x86, 0x74, 0xb4, 0x14, 0x69,
	0xd1, 0xa4, 0x3d, 0x3d, 0xf2, 0x8a, 0xf5, 0x70, 0x79, 0x96, 0x4d, 0xfc, 0x77, 0x06, 0x34, 0xbb,
	0xae, 0xe7, 0xc6, 0x4e, 0x38, 0x3d, 0x0e, 0x87, 0x24, 0xb4, 0x1e, 0x40, 0xb9, 0x3f, 0x1d, 0x4b,
	0xb6, 0x5e, 0x67, 0xac, 0x50, 0x11, 0x68, 0xa7, 0xcd, 0x50, 0xa8, 0xfc, 0x72, 0xfa, 0xa4, 0xa2,
	0xe2, 0x2d, 0x0a, 0xd7, 0xf4, 0xb8, 0x68, 0x51, 0xe9, 0xea, 0x3a, 0xaf, 0x45, 0x17, 0x17, 0x94,
	0x14, 0xc0, 0x04, 0xc1, 0x09, 0x47, 0x84, 0x29, 0x64, 0x26, 0x32, 0x54, 0x10, 0x12, 0x08, 0xfe,
	0xd6, 0x80, 0x1b, 0x27, 0x93, 0x33, 0xcf, 0x8d, 0x5e, 0x68, 0x04, 0x51, 0x61, 0x78, 0x87, 0x44,
	0xab, 0x42, 0x5f, 0xd6, 0x85, 0x1e, 0xff, 0x14, 0x6e, 0x16, 0x51, 0x64, 0x93, 0xb1, 0x37, 0xb5,
	0x1e, 0x40, 0x95, 0xb5, 0xa2, 0xb6, 0x71, 0xb7, 0x74, 0xbf, 0xbe, 0xbd, 0x9a, 0xa3, 0xca, 0x16,
	0x08, 0xb3, 0x68, 0xc2, 0xdb, 0xd0, 0xee, 0x38, 0xfe, 0x80, 0x78, 0x05, 0xd3, 0xa7, 0x63, 0x0c,
	0x6d, 0xcc, 0xef, 0xc3, 0xaa, 0x86, 0x7d, 0xe8, 0x9f, 0x07, 0x57, 0xa0, 0x05, 0xff, 0x09, 0xac,
	0x71, 0xa6, 0xbf, 0xb1, 0x58, 0xe8, 0x07, 0x69, 0xe6, 0x0e, 0xf2, 0x4f, 0x61, 0x63, 0x67, 0x30,
	0x20, 0xe3, 0xf8, 0x6d, 0x8e, 0x71, 0xce, 0x22, 0x54, 0xe4, 0x3b, 0x4e, 0x38, 0x3c, 0xdc, 0xe3,
	0xb6, 0xbc, 0x69, 0xcb, 0x26, 0x7e, 0x09, 0xed, 0x82, 0xe5, 0x39, 0x53, 0x3f, 0x52, 0x95, 0x4a,
	0x7d, 0xfb, 0xc6, 0x0c, 0x03, 0x29, 0xd5, 0xcb, 0x5d, 0x28, 0xd3, 0x0b, 0xc8, 0x96, 0xaf, 0x6f,
	0x37, 0xa4, 0x0a, 0xa2, 0xaa, 0xd5, 0x66, 0x3d, 0xf8, 0xc7, 0xb0, 0x2a, 0xae, 0xad, 0xa2, 0xf7,
	0x2f, 0x77, 0x9e, 0x2c, 0x28, 0x2b, 0x1e, 0x13, 0xfb, 0xa6, 0xb0, 0x27, 0x9e, 0x33, 0x62, 0xa2,
	0xb9, 0x6c, 0xb3, 0x6f, 0xfc, 0x3f, 0x55, 0x68, 0x48, 0xda, 0xd8, 0x21, 0xdf, 0x87, 0x0a, 0x77,
	0x5e, 0xf8, 0x19, 0x5b, 0x89, 0x61, 0x48, 0x56, 0xb6, 0x39, 0x82, 0xf5, 0x08, 0x96, 0xc4, 0x7a,
	0xdc, 0x13, 0xaa, 0x73, 0x5e, 0xe7, 0x28, 0xb5, 0x13, 0x34, 0x7a, 0x0d, 0xba, 0x53, 0x61, 0xad,
	0xf8, 0x05, 0x49, 0xda, 0xd6, 0x26, 0xa0, 0xee, 0xf4, 0x59, 0x30, 0x70, 0xa8, 0x25, 0x17, 0x38,
	0xfc, 0x7a, 0xe7, 0xe0, 0xd6, 0x47, 0xb0, 0xcc, 0xc7, 0x1d, 0x05, 0x67, 0xc2, 0x2e, 0xac, 0xa8,
	0x5c, 0x3e, 0x0a, 0xce, 0xec, 0x14, 0xc3, 0x7a, 0x0c, 0x8d, 0xae, 0x74, 0x6c, 0xe8, 0x88, 0x6a,
	0xf1, 0x08, 0x0d, 0xc9, 0xfa, 0x00, 0xaa, 0x5c, 0x7b, 0xb7, 0x6b, 0x05, 0x07, 0x23, 0xfa, 0x2c,
	0x0c, 0x15, 0xfa, 0x3f, 0x6a, 0x2f, 0x31, 0x0e, 0xe8, 0x48, 0xbc, 0x4b, 0xb9, 0x64, 0xcb, 0x9a,
	0xb2, 0xd8, 0x02, 0xeb, 0xa9, 0x13, 0x75, 0x02, 0xca, 0xa8, 0x98, 0x74, 0xdd, 0x28, 0xa2, 0x5e,
	0x27, 0xdc, 0x35, 0xee, 0x2f, 0xd9, 0x05, 0x3d, 0xd4, 0x3f, 0x7d, 0xea, 0x44, 0x3d, 0xf2, 0xaa,
	0x17, 0xc4, 0xee, 0x80, 0xb4, 0xeb, 0x0c, 0x53, 0x83, 0x59, 0xbf, 0x25, 0x65, 0xaf, 0xc1, 0x88,
	0x5e, 0xcd, 0x05, 0x0d, 0x52, 0xea, 0x1e, 0x41, 0xad, 0xcb, 0xad, 0x7d, 0xbb, 0x79, 0xb9, 0x98,
	0x4a, 0x3c, 0xea, 0xdd, 0x76, 0x15, 0xb7, 0xb1, 0xc5, 0x64, 0x4e, 0x05, 0xe5, 0x3c, 0xe8, 0x95,
	0x02, 0x0f, 0xfa, 0x03, 0x68, 0x3e, 0x73, 0xa2, 0x38, 0x9d, 0x07, 0xb1, 0x79, 0x74, 0xa0, 0xf5,
	0x39, 0x34, 0x35, 0xcb, 0xd9, 0x5e, 0x65, 0x44, 0xae, 0x15, 0x18, 0x55, 0x5b, 0xc7, 0xa4, 0x44,
	0x08, 0xff, 0x90, 0x5e, 0xd6, 0xa8, 0x6d, 0xb1, 0x9b, 0xab, 0xc1, 0xa8, 0x17, 0xdc, 0x75, 0x5e,
	0x6b, 0xb4, 0xae, 0x31, 0x5a, 0xb3, 0x60, 0x6b, 0x0f, 0xd0, 0x1e, 0x39, 0x57, 0x83, 0x87, 0xa8,
	0xbd, 0xce, 0x68, 0x69, 0xcb, 0xab, 0x11, 0x65, 0x10, 0xec, 0xdc, 0x08, 0x7c, 0x0f, 0x50, 0x87,
	0x9a, 0x57, 0x22, 0x76, 0x48, 0xf5, 0x94, 0x05, 0xe5, 0x83, 0xc0, 0x1b, 0x0a, 0xcd, 0xcb, 0xbe,
	0xf1, 0x07, 0xaa, 0x42, 0x9a, 0xe5, 0xda, 0x51, 0xef, 0x4b, 0x2a, 0x04, 0x3e, 0xeb, 0x02, 0xd1,
	0xd4, 0x82, 0x0a, 0x41, 0x59, 0xb3, 0xac, 0xb9, 0x93, 0x5f, 0x40, 0x5d, 0x09, 0xbb, 0xd8, 0xa5,
	0x93, 0x2c, 0x90, 0xe2, 0xc5, 0x6e, 0x3c, 0xdf, 0xb7, 0xad, 0x22, 0xe3, 0x7f, 0x34, 0xa1, 0xa5,
	0x4b, 0x16, 0xf5, 0x7a, 0xbe, 0x72, 0xf9, 0xde, 0xcb, 0x36, 0xfd, 0x2c, 0x24, 0xb0, 0x0d, 0xb5,
	0xa7, 0xc4, 0x19, 0x1e, 0x5e, 0x48, 0x1a, 0x65, 0x93, 0x6e, 0x96, 0x7e, 0x3e, 0x09, 0x1d, 0x11,
	0x3f, 0x2d, 0xdb, 0x29, 0xc0, 0x7a, 0x00, 0xb5, 0x39, 0xda, 0x41, 0xf6, 0x5b, 0x1f, 0x03, 0xcc,
	0xd7, 0x0c, 0x0a, 0x0a, 0xd5, 0x61, 0x27, 0x5f, 0x8f, 0x4f, 0x07, 0x41, 0x48, 0x98, 0x66, 0xa8,
	0xd8, 0x49, 0x3b, 0x27, 0xff, 0x4b, 0x05, 0xf2, 0x9f, 0x58, 0x87, 0xe5, 0x45, 0xac, 0x03, 0xde,
	0x05, 0x4b, 0xef, 0x7d, 0xe6, 0x46, 0xb1, 0xf5, 0x21, 0xd4, 0x78, 0x4b, 0xd7, 0xd3, 0x1a, 0xa2,
	0x2d, 0x51, 0xf0, 0x7f, 0x94, 0xb8, 0xfb, 0xb1, 0x80, 0xdd, 0xc0, 0xd0, 0xd0, 0x62, 0x68, 0x6e,
	0x13, 0x35, 0x18, 0xd5, 0x03, 0x3b, 0xa3, 0xd0, 0x1d, 0x4c, 0xbc, 0x78, 0x12, 0x12, 0xa1, 0xc8,
	0x55, 0x10, 0xe5, 0xd1, 0xee, 0x24, 0x72, 0x7d, 0x12, 0x45, 0x42, 0x8c, 0x92, 0xb6, 0x1a, 0x54,
	0x54, 0xb4, 0xa0, 0x42, 0xd1, 0x93, 0x55, 0x4d, 0x4f, 0xca, 0x8b, 0x52, 0x4b, 0x2f, 0x8a, 0xb5,
	0x0e, 0x95, 0x03, 0x2f, 0x08, 0xa7, 0x82, 0xc5, 0xbc, 0xa1, 0xb2, 0x65, 0x79, 0x2e, 0x5b, 0xac,
	0x23, 0xb0, 0x76, 0xc6, 0x63, 0x6f, 0xaa, 0xdd, 0x4c, 0xa6, 0x7f, 0xeb, 0xdb, 0xb7, 0xe8, 0xc0,
	0x7c, 0x2f, 0x53, 0xeb, 0x05, 0xa3, 0xb2, 0xd7, 0xa3, 0x7e, 0x85, 0xeb, 0x41, 0xed, 0xc0, 0x21,
	0xb3, 0x6c, 0x1a, 0xe7, 0x1b, 0x6c, 0x63, 0x05, 0x3d, 0xf8, 0x18, 0xde, 0x7f, 0x42, 0xe2, 0xc1,
	0x8b, 0x3c, 0x19, 0x62, 0x67, 0x54, 0x1b, 0xcc, 0x0a, 0x0b, 0x2d, 0x28, 0x9f, 0xa4, 0x3e, 0x22,
	0xfb, 0xc6, 0x3f, 0x81, 0xf6, 0xac, 0xb9, 0xac, 0x4d, 0xa8, 0xf2, 0x2f, 0xe1, 0xcd, 0x14, 0x71,
	0x54, 0x60, 0x24, 0x07, 0x65, 0x2a, 0x1a, 0xed, 0x14, 0x6e, 0xce, 0xa4, 0xd3, 0xfa, 0x34, 0x2b,
	0xc6, 0xef, 0x15, 0xb3, 0x3d, 0x2b, 0xd0, 0xff, 0x64, 0xc0, 0x46, 0xf1, 0xe1, 0xcc, 0x8b, 0xa0,
	0xd5, 0x25, 0xcd, 0x2b, 0x2c, 0x49, 0x2f, 0x46, 0x77, 0xca, 0xd0, 0xba, 0x81, 0x4f, 0xa6, 0x42,
	0xea, 0x35, 0x18, 0x35, 0x6d, 0x89, 0x35, 0xec, 0x39, 0x49, 0x62, 0x47, 0x07, 0xe2, 0x4f, 0x60,
	0x85, 0xc7, 0xa2, 0x5c, 0xbc, 0x45, 0xe6, 0x49, 0x34, 0xf8, 0xd9, 0x8b, 0xcc, 0x93, 0x0a, 0xc3,
	0xbf, 0x34, 0x61, 0x45, 0xf2, 0x5d, 0x7a, 0x04, 0xf7, 0x34, 0x57, 0x57, 0x3b, 0x9a, 0x6e, 0xa4,
	0xfb, 0xb9, 0xf4, 0x30, 0x6c, 0xf2, 0xca, 0x09, 0xe5, 0xf1, 0x28, 0x90, 0x99, 0x61, 0xcb, 0xef,
	0x40, 0xb3, 0x1f, 0x3a, 0x7e, 0x44, 0x0d, 0x27, 0x5b, 0xa8, 0x9c, 0xfa, 0xd4, 0x5a, 0x07, 0x8b,
	0x68, 0x75, 0x5c, 0xeb, 0x21, 0xac, 0xa5, 0x80, 0x6c, 0x4c, 0x56, 0xd4, 0x45, 0x5d, 0xc0, 0x04,
	0x2c, 0xf3, 0x2a, 0x5c, 0x15, 0xe4, 0xe0, 0x7a, 0x18, 0x58, 0xcb, 0x86, 0x81, 0x0b, 0x28, 0x62,
	0xfc, 0x2b, 0x03, 0xda, 0xfb, 0xaf, 0xc9, 0x60, 0x12, 0xbb, 0xfe, 0xe8, 0x5d, 0x71, 0x56, 0x17,
	0xc7, 0x52, 0x4e, 0x1c, 0xd7, 0xa1, 0xc2, 0xbd, 0x94, 0x32, 0xf3, 0x52, 0x78, 0x43, 0xcd, 0x2b,
	0x55, 0xf4, 0xbc, 0x52, 0x76, 0x63, 0xd5, 0x82, 0x8d, 0x7d, 0xab, 0x24, 0xee, 0xc4, 0x7e, 0x98,
	0x6b, 0xff, 0x31, 0x2c, 0x89, 0xa6, 0xbc, 0x6e, 0x6b, 0xda, 0xbe, 0x78, 0x9f, 0x9d, 0x20, 0x59,
	0x4f, 0x01, 0x25, 0x0c, 0x92, 0xee, 0x29, 0x8f, 0x52, 0xd8, 0xa5, 0x99, 0xc5, 0x3c, 0x3b, 0x37,
	0x0a, 0xff, 0xaf, 0x01, 0x37, 0x13, 0xa5, 0x21, 0x83, 0x5d, 0xd6, 0x45, 0xc5, 0xff, 0xd7, 0x5a,
	0x8c, 0x3f, 0x84, 0xd5, 0x04, 0x90, 0xc4, 0xf0, 0x15, 0x16, 0xc3, 0xe7, 0x3b, 0xf0, 0x9f, 0x19,
	0x70, 0xbb, 0x78, 0xa3, 0x3c, 0x36, 0xfc, 0x1c, 0xea, 0xca, 0x91, 0x14, 0x45, 0x88, 0x4a, 0xb7,
	0xad, 0xe2, 0x16, 0x69, 0x57, 0xc5, 0x64, 0x96, 0xb4, 0xf8, 0xfd, 0x2f, 0x0c, 0x19, 0x9f, 0x66,
	0xa6, 0xbd, 0x0a, 0xbb, 0x13, 0xd9, 0x34, 0x55, 0xd9, 0x9c, 0x71, 0xad, 0x4b, 0x33, 0xaf, 0x35,
	0xbe, 0x80, 0x5b, 0x85, 0xb4, 0x70, 0x8e, 0xcc, 0x53, 0xd8, 0xaa, 0xd4, 0x9a, 0x0b, 0x48, 0x2d,
	0xde, 0x81, 0x35, 0x66, 0x1e, 0x53, 0xbb, 0x79, 0x65, 0x83, 0xf8, 0x00, 0x56, 0x4f, 0x49, 0xcc,
	0x79, 0x79, 0x12, 0xba, 0x03, 0xa6, 0xa4, 0xd7, 0xa1, 0xc2, 0xbe, 0xc5, 0x78, 0xde, 0xc0, 0x5f,
	0xc2, 0x75, 0xb6, 0x9a, 0x82, 0xcc, 0xf7, 0xb5, 0x80, 0x4e, 0x4f, 0xa7, 0x34, 0xd5, 0x29, 0x5f,
	0xc2, 0x4a, 0x8f, 0xbc, 0x92, 0x26, 0x43, 0x66, 0xa7, 0xf9, 0x56, 0x98, 0x59, 0x31, 0x98, 0xbf,
	0xab, 0x40, 0xa8, 0x4b, 0xa6, 0xda, 0x1d, 0xee, 0x43, 0xab, 0x20, 0x65, 0xfb, 0x25, 0x2d, 0x96,
	0xf8, 0x85, 0x01, 0x2b, 0x3b, 0xe3, 0x71, 0xe0, 0xfa, 0xf1, 0x51, 0x70, 0xb6, 0xd8, 0x6a, 0x54,
	0x4f, 0xb3, 0xe3, 0x55, 0xb0, 0xf8, 0x92, 0x39, 0xb8, 0xf5, 0x3e, 0x94, 0xa8, 0x63, 0x5d, 0x2a,
	0x76, 0xac, 0x69, 0xdf, 0xac, 0x90, 0x03, 0xff, 0x10, 0x5a, 0x36, 0x19, 0x38, 0x9e, 0x97, 0x10,
	0x26, 0x26, 0x33, 0x16, 0x9a, 0x4c, 0xab, 0x7b, 0xe0, 0xbf, 0x36, 0x00, 0xed, 0x4c, 0xe2, 0x60,
	0x40, 0xc6, 0x2f, 0x1c, 0x6f, 0xba, 0xf0, 0x7c, 0x3a, 0x2f, 0xcc, 0x79, 0x9c, 0x2f, 0xe5, 0x39,
	0x7f, 0x0f, 0x5a, 0xca, 0x71, 0xa6, 0xf1, 0x4a, 0x06, 0x8a, 0x5d, 0x68, 0x88, 0x7a, 0xc4, 0xf7,
	0x46, 0xdc, 0xac, 0x43, 0x0f, 0x61, 0x43, 0x71, 0x40, 0x3b, 0x2f, 0x1c, 0x7f, 0x44, 0xf8, 0xa2,
	0x05, 0x45, 0x37, 0xa3, 0xb8, 0xe8, 0xb6, 0x05, 0x56, 0x8f, 0xbc, 0x2a, 0xae, 0xd0, 0x15, 0xf4,
	0xe0, 0x17, 0x50, 0xb7, 0x49, 0xe4, 0x8e, 0xfc, 0x77, 0xbe, 0xbb, 0x9f, 0x43, 0x53, 0x26, 0xc8,
	0xf9, 0x5a, 0x99, 0x33, 0x32, 0x0a, 0xcf, 0x48, 0x0e, 0xd1, 0xa4, 0x27, 0x03, 0xa5, 0x1e, 0x9e,
	0xac, 0xd6, 0xa8, 0x86, 0x46, 0x07, 0xe2, 0x97, 0xb0, 0x26, 0xf2, 0xeb, 0xda, 0x25, 0x9e, 0x4f,
	0xc6, 0x36, 0xac, 0xef, 0x92, 0xcc, 0xd0, 0x74, 0xef, 0x85, 0x7d, 0xf8, 0xa7, 0x80, 0x44, 0x49,
	0xf5, 0x79, 0x10, 0x0e, 0x17, 0x5d, 0x69, 0xe1, 0xe2, 0x2a, 0xfe, 0x2b, 0x03, 0xd6, 0x95, 0x8b,
	0xf3, 0xa3, 0x20, 0x26, 0xef, 0xfa, 0x04, 0xb3, 0xf4, 0x97, 0x73, 0xf4, 0x63, 0x1f, 0xae, 0x77,
	0x9c, 0xb1, 0x1b, 0x3b, 0xde, 0xa1, 0xff, 0x33, 0x32, 0xa0, 0x7e, 0xcf, 0xf7, 0x46, 0x95, 0x34,
	0xb4, 0x25, 0x25, 0x8c, 0xf9, 0x3d, 0x58, 0x39, 0x09, 0x83, 0xe1, 0x44, 0x59, 0xa9, 0x20, 0x7f,
	0x33, 0x33, 0x07, 0xff, 0x3e, 0xd4, 0x4f, 0x1d, 0xcf, 0x91, 0x92, 0x50, 0x94, 0xfa, 0xf9, 0x1b,
	0x03, 0x5a, 0x89, 0xf5, 0xe4, 0x68, 0xb7, 0x60, 0xe9, 0x49, 0x18, 0x5c, 0x28, 0xc5, 0x98, 0xa4,
	0x3d, 0x37, 0x75, 0x9d, 0xf3, 0x79, 0x4a, 0x57, 0xf0, 0x79, 0x52, 0x47, 0xaa, 0xac, 0x3a, 0x52,
	0xf8, 0xb9, 0xac, 0x6f, 0x73, 0xfa, 0x30, 0x34, 0xb4, 0x3b, 0x23, 0x4c, 0xdc, 0xe5, 0x37, 0xc6,
	0x2c, 0xba, 0x31, 0x0f, 0xa1, 0x75, 0x3a, 0x09, 0x43, 0xe2, 0x0f, 0x49, 0xb8, 0x90, 0x0d, 0xc2,
	0x1f, 0x41, 0x7d, 0x97, 0xc4, 0xa1, 0xb3, 0x98, 0x81, 0xc4, 0x5b, 0xd0, 0xd8, 0x8f, 0x06, 0xce,
	0x98, 0x0c, 0x17, 0xc3, 0xff, 0x01, 0x58, 0x02, 0xdf, 0x26, 0xf1, 0x24, 0xf4, 0x17, 0x1b, 0xf5,
	0x0d, 0xac, 0x25, 0xdb, 0xa0, 0xfb, 0x7f, 0xb4, 0x98, 0x3d, 0x9d, 0x55, 0xab, 0xa7, 0xae, 0x27,
	0x3f, 0xd1, 0x9c, 0x85, 0xc9, 0x77, 0xe0, 0x6e, 0x66, 0xf1, 0xed, 0xb7, 0x5a, 0x1c, 0x9f, 0xc3,
	0x46, 0x3a, 0x1d, 0x5f, 0x66, 0xc1, 0xed, 0x14, 0x92, 0x6d, 0xce, 0x22, 0xfb, 0x9f, 0x0d, 0x58,
	0xd5, 0x0c, 0xf3, 0xf6, 0x65, 0xde, 0x9a, 0xb8, 0xde, 0xe6, 0xc2, 0xd7, 0xbb, 0x94, 0x23, 0xef,
	0x1e, 0xb4, 0x8e, 0xbd, 0x61, 0x81, 0x3d, 0xd6, 0xa1, 0x05, 0x76, 0xbb, 0x52, 0x68, 0xb7, 0xa3,
	0x0c, 0xfd, 0x8f, 0xdf, 0xe6, 0xc8, 0xf3, 0x8b, 0x96, 0x0a, 0x17, 0x8d, 0xd3, 0x8c, 0xaa, 0xc8,
	0xfc, 0x67, 0xab, 0xf0, 0x9b, 0xc2, 0xcb, 0xe7, 0xac, 0xda, 0x50, 0x59, 0xc5, 0x47, 0x28, 0x9e,
	0xbe, 0x05, 0x65, 0x25, 0x3e, 0x65, 0xdf, 0x14, 0xb6, 0x13, 0x8e, 0x78, 0xfe, 0xae, 0x61, 0xb3,
	0x6f, 0x35, 0x19, 0xc9, 0xe7, 0x60, 0x81, 0xc9, 0x87, 0x50, 0xe3, 0xad, 0xc2, 0x64, 0x24, 0xef,
	0xb2, 0x25, 0x0a, 0xfe, 0x57, 0x03, 0x50, 0x36, 0xa5, 0x35, 0xf3, 0xb8, 0x17, 0x49, 0x47, 0x26,
	0xa9, 0xc0, 0x92, 0x9a, 0x0a, 0x7c, 0x08, 0x6b, 0x5d, 0xe7, 0x35, 0xcf, 0xeb, 0x70, 0xbe, 0x31,
	0x8d, 0xcb, 0xf5, 0x59, 0x51, 0x17, 0xf5, 0x6a, 0x77, 0xbe, 0x1e, 0x25, 0xb1, 0x09, 0x8b, 0x31,
	0x79, 0xf4, 0x9d, 0x83, 0xe3, 0x2f, 0x61, 0x6d, 0xc7, 0xf3, 0x72, 0xdb, 0xf8, 0x02, 0x9a, 0x7a,
	0xa5, 0x80, 0xf3, 0x63, 0x5d, 0x56, 0x0a, 0xb4, 0x2a, 0x81, 0x8e, 0x8a, 0x8f, 0x60, 0x83, 0x87,
	0x2d, 0xb9, 0x54, 0xde, 0xdc, 0xc4, 0x7e, 0x2e, 0x7e, 0xf9, 0x06, 0x6e, 0xa8, 0xec, 0x3f, 0x9f,
	0xda, 0x64, 0xb8, 0x17, 0xb0, 0xcb, 0xfb, 0x85, 0x16, 0xfc, 0xdd, 0xcb, 0x9e, 0x94, 0x82, 0xba,
	0xc5, 0xbf, 0x52, 0x31, 0xc1, 0x1f, 0xd0, 0x50, 0x4d, 0xc2, 0x2c, 0x80, 0x2a, 0x65, 0x4a, 0xe0,
	0xa3, 0x6b, 0xfc, 0xed, 0x0e, 0x3d, 0x5f, 0x64, 0xe0, 0x3f, 0x86, 0x66, 0x1a, 0x50, 0xd0, 0x25,
	0xf3, 0xb9, 0xfe, 0x05, 0x6e, 0xf1, 0x06, 0x54, 0x8f, 0xbd, 0x21, 0x1d, 0x57, 0x62, 0xe3, 0x44,
	0x0b, 0x77, 0xa0, 0x91, 0x04, 0x05, 0x6f, 0x3a, 0x39, 0xfe, 0x03, 0xa8, 0xb3, 0x7c, 0x78, 0x9a,
	0x78, 0x2e, 0x94, 0x3e, 0x25, 0x55, 0x6d, 0xea, 0xef, 0x5f, 0x0e, 0xc1, 0x3a, 0x9d, 0xfa, 0x03,
	0x65, 0x12, 0x4a, 0xcb, 0x63, 0xfe, 0x3a, 0x43, 0x40, 0xe4, 0xe9, 0xaf, 0xc8, 0xd3, 0x17, 0x70,
	0x5b, 0x43, 0xc2, 0x21, 0xac, 0x4b, 0xfa, 0x78, 0x5a, 0x50, 0x6c, 0x4c, 0xa9, 0x61, 0x18, 0x57,
	0xaa, 0x61, 0x98, 0x73, 0x6b, 0x18, 0xb8, 0x0b, 0x2b, 0x27, 0x4e, 0x1c, 0x06, 0x4c, 0x82, 0x93,
	0x70, 0x75, 0xee, 0xe3, 0xb7, 0x0d, 0xa8, 0x72, 0x2f, 0x46, 0x2a, 0x2d, 0xde, 0xc2, 0xfb, 0x70,
	0x83, 0x4e, 0x94, 0x75, 0xc8, 0xe6, 0x44, 0xdd, 0xb9, 0x54, 0xf1, 0x27, 0x70, 0xb3, 0x68, 0x1a,
	0x4e, 0x5f, 0x1b, 0x6a, 0x9d, 0x49, 0xa8, 0x78, 0x4d, 0xb2, 0x89, 0xbf, 0x94, 0xf9, 0x54, 0x5e,
	0xf0, 0xbd, 0x6c, 0xd5, 0x7b, 0xd0, 0xca, 0x54, 0x98, 0x85, 0x9b, 0xaf, 0x43, 0xf1, 0xfd, 0xf4,
	0x4c, 0xd4, 0x80, 0x36, 0x2f, 0x6c, 0xf8, 0x8f, 0xe4, 0x0b, 0xbd, 0x24, 0xc7, 0x3b, 0xff, 0xc6,
	0xe6, 0x2a, 0xa0, 0x66, 0x41, 0x05, 0x14, 0xbf, 0x84, 0x15, 0xc5, 0xac, 0x30, 0x45, 0x3b, 0xdf,
	0xad, 0xff, 0x14, 0x1a, 0x3b, 0xa3, 0x90, 0x10, 0x3d, 0xc5, 0x5d, 0x94, 0xb3, 0xd7, 0xf0, 0xf0,
	0x36, 0xb4, 0x94, 0xc5, 0x16, 0x0a, 0x21, 0xf0, 0x11, 0x58, 0x34, 0x18, 0xc8, 0x8c, 0x6b, 0x43,
	0xed, 0x30, 0x62, 0x73, 0xb3, 0x31, 0x4b, 0xb6, 0x6c, 0x52, 0x6f, 0x56, 0x18, 0x0d, 0xc9, 0xf6,
	0xa4, 0x8d, 0x7f, 0x97, 0xa5, 0x88, 0xc4, 0xcb, 0xbd, 0x67, 0x41, 0x24, 0x1f, 0xd9, 0x2d, 0x94,
	0x22, 0xc2, 0x9b, 0xb0, 0x2e, 0x08, 0xeb, 0x06, 0x43, 0xf7, 0x9c, 0x91, 0x27, 0xdc, 0x6c, 0x85,
	0x78, 0xf6, 0x9d, 0xc3, 0x7d, 0xe2, 0x39, 0x23, 0x81, 0xcb, 0x6a, 0xa1, 0x86, 0xf2, 0x38, 0xe2,
	0xa9, 0x7c, 0x35, 0xa6, 0x6c, 0xfb, 0x8d, 0x2a, 0xad, 0xb9, 0x99, 0xe4, 0xaa, 0x73, 0x67, 0x62,
	0x34, 0x99, 0x0a, 0x4d, 0x11, 0x55, 0xed, 0xfe, 0x80, 0x78, 0x6f, 0x9e, 0x46, 0xbd, 0x72, 0x62,
	0x1e, 0x1f, 0xc0, 0xcd, 0xa2, 0x45, 0xf9, 0xe9, 0x5c, 0x25, 0x0e, 0x7a, 0x9c, 0x3e, 0x72, 0xe6,
	0x6f, 0x23, 0x92, 0xf7, 0x13, 0xc6, 0xcc, 0xf7, 0x13, 0xf8, 0x21, 0x20, 0xfd, 0xd5, 0x1a, 0x19,
	0x5e, 0xce, 0x38, 0xec, 0xc1, 0x46, 0x5e, 0x8b, 0x0c, 0x82, 0x70, 0xf8, 0xb6, 0xe5, 0xac, 0x22,
	0x4f, 0x09, 0x9f, 0xc2, 0xed, 0x22, 0xbd, 0xf5, 0xd4, 0x65, 0xc4, 0x5a, 0x3f, 0x60, 0xaf, 0x50,
	0x83, 0x70, 0x28, 0x37, 0x79, 0x8b, 0xaf, 0x59, 0x44, 0x9f, 0x2d, 0x51, 0x31, 0x81, 0xeb, 0x52,
	0x62, 0x52, 0x0d, 0xbc, 0xe8, 0x2b, 0xe5, 0x82, 0xe7, 0x0d, 0x66, 0xe1, 0xf3, 0x06, 0x6a, 0xd2,
	0x29, 0xed, 0xc2, 0x87, 0xdc, 0x90, 0x66, 0x5c, 0x5c, 0x03, 0xd1, 0xc2, 0x47, 0xf0, 0x5e, 0x92,
	0x52, 0xbd, 0xa2, 0x96, 0xcf, 0xf9, 0x26, 0xdf, 0x1a, 0xa9, 0x72, 0x55, 0x6b, 0xa2, 0xef, 0xf8,
	0x49, 0x80, 0x5a, 0xb6, 0xaf, 0xe8, 0x65, 0x7b, 0xfc, 0x04, 0xd6, 0xa5, 0x35, 0x5f, 0xc8, 0x2b,
	0x4d, 0xc3, 0x63, 0x53, 0x0b, 0x8f, 0x3f, 0x4e, 0xeb, 0x2e, 0xca, 0x6b, 0x13, 0xf5, 0x15, 0x99,
	0xa1, 0xbf, 0x22, 0x7b, 0x08, 0x48, 0x0b, 0xd9, 0xe6, 0xaa, 0x04, 0xfc, 0x2c, 0x51, 0x24, 0xf4,
	0x28, 0x52, 0x8b, 0xf3, 0x46, 0xaf, 0x80, 0xf1, 0x11, 0xac, 0x17, 0x3d, 0x60, 0xb1, 0xb6, 0xa1,
	0xa6, 0x7b, 0xb0, 0xac, 0x92, 0x5d, 0xc4, 0x23, 0x5b, 0x22, 0xe2, 0x4e, 0xba, 0xf9, 0xdd, 0xc9,
	0xf4, 0x20, 0x08, 0x86, 0x91, 0xd0, 0xab, 0x89, 0x52, 0x5a, 0x16, 0x0a, 0xa8, 0x0d, 0x35, 0xd6,
	0x9f, 0x18, 0x02, 0xd9, 0xc4, 0x9f, 0xc1, 0xaa, 0x2a, 0x9e, 0x0b, 0xbb, 0x26, 0xf8, 0x27, 0xd0,
	0x3a, 0x38, 0x25, 0x71, 0xec, 0x91, 0x79, 0x3e, 0xc0, 0xc3, 0x44, 0x03, 0x98, 0x73, 0x8a, 0xf4,
	0x02, 0x0f, 0x7f, 0x06, 0xb7, 0x0f, 0xb8, 0xfa, 0x2b, 0x2c, 0x60, 0xcc, 0x3e, 0xde, 0x1e, 0xdc,
	0x39, 0x38, 0x20, 0xf9, 0xb2, 0x07, 0x0d, 0x21, 0x72, 0x63, 0x4d, 0x6d, 0x6c, 0x61, 0x12, 0xea,
	0x11, 0xac, 0x1e, 0x90, 0x38, 0xf1, 0x34, 0xf8, 0x14, 0x97, 0xcb, 0xcb, 0xe7, 0x50, 0xef, 0x06,
	0x5f, 0xcf, 0x65, 0x4a, 0x91, 0x3b, 0xf6, 0xdb, 0xd0, 0x94, 0x43, 0x6d, 0xe2, 0x8d, 0xa7, 0xcc,
	0x80, 0x13, 0x32, 0x4c, 0x94, 0xfd, 0x92, 0x9d, 0xb4, 0xf1, 0x03, 0x58, 0x4d, 0x4e, 0xdf, 0xa1,
	0xc7, 0xb0, 0xef, 0xb3, 0x47, 0x1a, 0x87, 0xd1, 0x73, 0xd7, 0x17, 0xd8, 0xbc, 0x81, 0xff, 0xcf,
	0x80, 0xb5, 0x03, 0x5d, 0xe5, 0x32, 0xef, 0xe6, 0x72, 0x5b, 0x38, 0x2b, 0x60, 0x56, 0xdc, 0xe4,
	0xd2, 0x95, 0xdc, 0xe4, 0xf2, 0xfc, 0xa7, 0x3e, 0x19, 0x1f, 0xa8, 0x92, 0xf7, 0xb7, 0x94, 0xd0,
	0xb7, 0x3a, 0x3f, 0xf4, 0x3d, 0x86, 0xe6, 0x81, 0xf6, 0xd8, 0xb2, 0x0d, 0xb5, 0x1f, 0x91, 0x30,
	0x4a, 0x85, 0x5a, 0x36, 0x79, 0xda, 0x4c, 0x79, 0xb6, 0x97, 0xa6, 0xcd, 0x14, 0x20, 0xde, 0x81,
	0xeb, 0xdc, 0x8b, 0xc9, 0x1a, 0x89, 0xbc, 0x2e, 0x9d, 0xa5, 0xb3, 0x7e, 0x0e, 0xb7, 0x0f, 0x2e,
	0xa9, 0xce, 0xfd, 0x21, 0xd4, 0x79, 0x2f, 0x6b, 0x0a, 0xa3, 0xc9, 0x9e, 0xb6, 0xcf, 0x1e, 0x64,
	0xab, 0x43, 0xb8, 0xf3, 0x46, 0x25, 0x5e, 0x11, 0x30, 0x05, 0xb2, 0xf9, 0x39, 0x2c, 0x27, 0x3f,
	0x3c, 0xe0, 0xcf, 0xd5, 0xc3, 0x0b, 0xc7, 0xeb, 0x9c, 0xa2, 0x6b, 0x56, 0x0b, 0x60, 0x97, 0xec,
	0xc4, 0xb1, 0x33, 0x78, 0xd9, 0x39, 0xe5, 0x6f, 0xdd, 0x93, 0x7c, 0xfc, 0x29, 0x32, 0x37, 0xff,
	0xc5, 0x80, 0xe5, 0xe4, 0xb5, 0x7e, 0x3a, 0xb6, 0x4f, 0xc7, 0xae, 0x42, 0xf3, 0x89, 0x4b, 0xbc,
	0x21, 0x97, 0xc6, 0x3e, 0x1d, 0xbe, 0x06, 0x2b, 0x1d, 0xc7, 0x17, 0xf3, 0xb9, 0xf1, 0xb4, 0x7f,
	0x8a, 0x4c, 0x0a, 0xe4, 0x10, 0xd7, 0x1f, 0x09, 0x60, 0xc9, 0x5a, 0x81, 0x7a, 0xf2, 0x9e, 0xb0,
	0x7f, 0x8a, 0xca, 0xd6, 0x3a, 0x20, 0x65, 0xb6, 0x7d, 0x7f, 0xd8, 0x3f, 0x45, 0x15, 0x3e, 0x96,
	0x4d, 0x95, 0xac, 0x52, 0xa5, 0x40, 0xe1, 0xc7, 0x26, 0xc0, 0x9a, 0xb5, 0x01, 0x96, 0x06, 0xe4,
	0x33, 0x2c, 0x6d, 0x76, 0x32, 0xef, 0xac, 0x99, 0x7a, 0x6c, 0xc2, 0xb2, 0x30, 0x1f, 0xdd, 0x3e,
	0x7f, 0xf3, 0x9f, 0xfe, 0xc4, 0xa5, 0xdb, 0x47, 0x06, 0x45, 0x10, 0xb3, 0x75, 0xfb, 0xc8, 0xdc,
	0x8c, 0xa1, 0xae, 0x48, 0x30, 0xed, 0xfd, 0xca, 0x7f, 0xe9, 0x07, 0xaf, 0x8e, 0x82, 0x33, 0x74,
	0x8d, 0xee, 0x45, 0x49, 0xe9, 0x73, 0x2e, 0x52, 0x11, 0x8e, 0x88, 0xe7, 0x05, 0x21, 0xff, 0x3d,
	0xcd, 0x01, 0xf1, 0x49, 0xe8, 0x78, 0xfc, 0x17, 0x5f, 0x27, 0x21, 0x39, 0x27, 0x83, 0x98, 0xff,
	0xe2, 0x6b, 0x6f, 0xf2, 0x9c, 0xb8, 0xa8, 0x42, 0x89, 0x60, 0x0c, 0x38, 0x3e, 0x3f, 0x77, 0x07,
	0x24, 0x44, 0xd5, 0x4d, 0x92, 0x66, 0xa0, 0xb8, 0x77, 0x49, 0x71, 0xf8, 0xc2, 0xbc, 0xcd, 0x0f,
	0xf0, 0x30, 0x0c, 0xdd, 0x11, 0x8b, 0xad, 0xf8, 0xcf, 0xcc, 0xfa, 0xa1, 0x33, 0x24, 0xc8, 0xa4,
	0x9f, 0xbb, 0x13, 0xd7, 0x1b, 0xa2, 0x12, 0x25, 0x38, 0x71, 0x3a, 0x51, 0x99, 0x9e, 0xe3, 0x9e,
	0x1b, 0x8d, 0x9d, 0x78, 0xf0, 0x02, 0x55, 0x36, 0x3f, 0x52, 0xca, 0xef, 0x32, 0x5d, 0x6d, 0x01,
	0x54, 0xa9, 0xec, 0xf4, 0xfb, 0xfc, 0x87, 0x6c, 0xdc, 0xb9, 0xec, 0xf7, 0x91, 0xb1, 0xf9, 0xcb,
	0x72, 0x36, 0x45, 0xc5, 0x48, 0x6b, 0xc0, 0x52, 0x67, 0x12, 0xc5, 0xc1, 0x45, 0x4f, 0xfc, 0x8a,
	0x42, 0x2d, 0xb0, 0x22, 0x83, 0x42, 0xd4, 0x22, 0x28, 0x32, 0x29, 0xdb, 0x94, 0xe2, 0x23, 0x2a,
	0x51, 0x81, 0xd2, 0xd2, 0x7c, 0xa8, 0x4c, 0x09, 0x4f, 0x2a, 0x76, 0xa8, 0x62, 0xdd, 0x80, 0xb5,
	0x82, 0xaa, 0x1a, 0xaa, 0xf2, 0xdf, 0xda, 0xf1, 0xd2, 0x17, 0xaa, 0xb1, 0x1f, 0x61, 0x78, 0xc4,
	0x09, 0xc5, 0x95, 0xe9, 0xc5, 0x68, 0x49, 0x95, 0xec, 0x5e, 0x8c, 0x96, 0xa9, 0xbc, 0x65, 0x2b,
	0x48, 0x08, 0x28, 0x09, 0x5a, 0xa9, 0x07, 0xd5, 0xad, 0xeb, 0x5a, 0xf2, 0x91, 0x17, 0x67, 0x50,
	0x83, 0xca, 0x5b, 0xbe, 0x3c, 0x82, 0x9a, 0x74, 0x9f, 0x6a, 0x19, 0x03, 0xb5, 0x28, 0x6d, 0xb2,
	0x32, 0x81, 0x56, 0xe8, 0xae, 0x95, 0x1a, 0x04, 0x42, 0xb4, 0x3b, 0x21, 0x6b, 0x95, 0x76, 0x2b,
	0x69, 0x7a, 0x64, 0xd1, 0x6e, 0x99, 0x85, 0x47, 0x6b, 0xec, 0xb7, 0x27, 0x32, 0xc9, 0x8e, 0xd6,
	0xe9, 0x4d, 0xc8, 0xe4, 0xd0, 0xd1, 0x75, 0xba, 0x7b, 0x4a, 0xf0, 0x1e, 0x39, 0x67, 0x02, 0xdf,
	0x8b, 0xd1, 0x06, 0xdd, 0x6d, 0x36, 0x6d, 0x8e, 0x6e, 0xe4, 0xa0, 0xdb, 0xbd, 0x18, 0xb5, 0x73,
	0xd0, 0xc7, 0xbd, 0x18, 0xdd, 0xa4, 0xac, 0x2f, 0x48, 0x56, 0xa3, 0x5b, 0x45, 0x1d, 0x74, 0x9e,
	0xdb, 0x92, 0x8e, 0x34, 0xeb, 0x8c, 0xde, 0xcb, 0xc1, 0x1e, 0xa3, 0xdf, 0xd8, 0x45, 0xff, 0xf6,
	0xdd, 0x1d, 0xe3, 0x3f, 0xbf, 0xbb, 0x63, 0xfc, 0xd7, 0x77, 0x77, 0x8c, 0x5f, 0xfc, 0xf7, 0x9d,
	0x6b, 0x67, 0x55, 0xf6, 0xa3, 0xcd, 0xc7, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xca, 0xed, 0xdb,
	0xe9, 0xc6, 0x39, 0x00, 0x00,
}
