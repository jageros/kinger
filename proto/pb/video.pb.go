// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: video.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VideoFighter struct {
	Name       string       `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Uid        uint64       `protobuf:"varint,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	FightCards []*SkinGCard `protobuf:"bytes,3,rep,name=FightCards" json:"FightCards,omitempty"`
	NameText   int32        `protobuf:"varint,4,opt,name=NameText,proto3" json:"NameText,omitempty"`
}

func (m *VideoFighter) Reset()                    { *m = VideoFighter{} }
func (m *VideoFighter) String() string            { return proto.CompactTextString(m) }
func (*VideoFighter) ProtoMessage()               {}
func (*VideoFighter) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{0} }

func (m *VideoFighter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VideoFighter) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *VideoFighter) GetFightCards() []*SkinGCard {
	if m != nil {
		return m.FightCards
	}
	return nil
}

func (m *VideoFighter) GetNameText() int32 {
	if m != nil {
		return m.NameText
	}
	return 0
}

type VideoItem struct {
	VideoID         uint64        `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	Fighter1        *VideoFighter `protobuf:"bytes,2,opt,name=Fighter1" json:"Fighter1,omitempty"`
	Fighter2        *VideoFighter `protobuf:"bytes,3,opt,name=Fighter2" json:"Fighter2,omitempty"`
	WinnerUid       uint64        `protobuf:"varint,4,opt,name=WinnerUid,proto3" json:"WinnerUid,omitempty"`
	WatchTimes      int32         `protobuf:"varint,5,opt,name=WatchTimes,proto3" json:"WatchTimes,omitempty"`
	Like            int32         `protobuf:"varint,6,opt,name=Like,proto3" json:"Like,omitempty"`
	Time            int32         `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
	SharePlayerName string        `protobuf:"bytes,8,opt,name=SharePlayerName,proto3" json:"SharePlayerName,omitempty"`
	IsLike          bool          `protobuf:"varint,9,opt,name=IsLike,proto3" json:"IsLike,omitempty"`
	CommentsAmount  int32         `protobuf:"varint,10,opt,name=CommentsAmount,proto3" json:"CommentsAmount,omitempty"`
	Name            string        `protobuf:"bytes,11,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *VideoItem) Reset()                    { *m = VideoItem{} }
func (m *VideoItem) String() string            { return proto.CompactTextString(m) }
func (*VideoItem) ProtoMessage()               {}
func (*VideoItem) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{1} }

func (m *VideoItem) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *VideoItem) GetFighter1() *VideoFighter {
	if m != nil {
		return m.Fighter1
	}
	return nil
}

func (m *VideoItem) GetFighter2() *VideoFighter {
	if m != nil {
		return m.Fighter2
	}
	return nil
}

func (m *VideoItem) GetWinnerUid() uint64 {
	if m != nil {
		return m.WinnerUid
	}
	return 0
}

func (m *VideoItem) GetWatchTimes() int32 {
	if m != nil {
		return m.WatchTimes
	}
	return 0
}

func (m *VideoItem) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *VideoItem) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VideoItem) GetSharePlayerName() string {
	if m != nil {
		return m.SharePlayerName
	}
	return ""
}

func (m *VideoItem) GetIsLike() bool {
	if m != nil {
		return m.IsLike
	}
	return false
}

func (m *VideoItem) GetCommentsAmount() int32 {
	if m != nil {
		return m.CommentsAmount
	}
	return 0
}

func (m *VideoItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VideoList struct {
	Videos []*VideoItem `protobuf:"bytes,1,rep,name=Videos" json:"Videos,omitempty"`
}

func (m *VideoList) Reset()                    { *m = VideoList{} }
func (m *VideoList) String() string            { return proto.CompactTextString(m) }
func (*VideoList) ProtoMessage()               {}
func (*VideoList) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{2} }

func (m *VideoList) GetVideos() []*VideoItem {
	if m != nil {
		return m.Videos
	}
	return nil
}

type WatchVideoArg struct {
	VideoID uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
}

func (m *WatchVideoArg) Reset()                    { *m = WatchVideoArg{} }
func (m *WatchVideoArg) String() string            { return proto.CompactTextString(m) }
func (*WatchVideoArg) ProtoMessage()               {}
func (*WatchVideoArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{3} }

func (m *WatchVideoArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

type WatchVideoResp struct {
	VideoData     *VideoBattleData `protobuf:"bytes,1,opt,name=VideoData" json:"VideoData,omitempty"`
	CurWatchTimes int32            `protobuf:"varint,2,opt,name=CurWatchTimes,proto3" json:"CurWatchTimes,omitempty"`
	CurLike       int32            `protobuf:"varint,3,opt,name=CurLike,proto3" json:"CurLike,omitempty"`
}

func (m *WatchVideoResp) Reset()                    { *m = WatchVideoResp{} }
func (m *WatchVideoResp) String() string            { return proto.CompactTextString(m) }
func (*WatchVideoResp) ProtoMessage()               {}
func (*WatchVideoResp) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{4} }

func (m *WatchVideoResp) GetVideoData() *VideoBattleData {
	if m != nil {
		return m.VideoData
	}
	return nil
}

func (m *WatchVideoResp) GetCurWatchTimes() int32 {
	if m != nil {
		return m.CurWatchTimes
	}
	return 0
}

func (m *WatchVideoResp) GetCurLike() int32 {
	if m != nil {
		return m.CurLike
	}
	return 0
}

type FetchSelfVideoListArg struct {
	Page int32 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *FetchSelfVideoListArg) Reset()                    { *m = FetchSelfVideoListArg{} }
func (m *FetchSelfVideoListArg) String() string            { return proto.CompactTextString(m) }
func (*FetchSelfVideoListArg) ProtoMessage()               {}
func (*FetchSelfVideoListArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{5} }

func (m *FetchSelfVideoListArg) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type LikeVideoArg struct {
	VideoID uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
}

func (m *LikeVideoArg) Reset()                    { *m = LikeVideoArg{} }
func (m *LikeVideoArg) String() string            { return proto.CompactTextString(m) }
func (*LikeVideoArg) ProtoMessage()               {}
func (*LikeVideoArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{6} }

func (m *LikeVideoArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

type LikeVideoResp struct {
	CurWatchTimes int32 `protobuf:"varint,1,opt,name=CurWatchTimes,proto3" json:"CurWatchTimes,omitempty"`
	CurLike       int32 `protobuf:"varint,2,opt,name=CurLike,proto3" json:"CurLike,omitempty"`
}

func (m *LikeVideoResp) Reset()                    { *m = LikeVideoResp{} }
func (m *LikeVideoResp) String() string            { return proto.CompactTextString(m) }
func (*LikeVideoResp) ProtoMessage()               {}
func (*LikeVideoResp) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{7} }

func (m *LikeVideoResp) GetCurWatchTimes() int32 {
	if m != nil {
		return m.CurWatchTimes
	}
	return 0
}

func (m *LikeVideoResp) GetCurLike() int32 {
	if m != nil {
		return m.CurLike
	}
	return 0
}

type ShareVideoArg struct {
	VideoID uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *ShareVideoArg) Reset()                    { *m = ShareVideoArg{} }
func (m *ShareVideoArg) String() string            { return proto.CompactTextString(m) }
func (*ShareVideoArg) ProtoMessage()               {}
func (*ShareVideoArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{8} }

func (m *ShareVideoArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *ShareVideoArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VideoFighterData struct {
	Uid       uint64       `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name      string       `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	PvpScore  int32        `protobuf:"varint,3,opt,name=PvpScore,proto3" json:"PvpScore,omitempty"`
	Camp      int32        `protobuf:"varint,4,opt,name=Camp,proto3" json:"Camp,omitempty"`
	HandCards []*SkinGCard `protobuf:"bytes,5,rep,name=HandCards" json:"HandCards,omitempty"`
	IsRobot   bool         `protobuf:"varint,6,opt,name=IsRobot,proto3" json:"IsRobot,omitempty"`
	NameText  int32        `protobuf:"varint,7,opt,name=NameText,proto3" json:"NameText,omitempty"`
}

func (m *VideoFighterData) Reset()                    { *m = VideoFighterData{} }
func (m *VideoFighterData) String() string            { return proto.CompactTextString(m) }
func (*VideoFighterData) ProtoMessage()               {}
func (*VideoFighterData) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{9} }

func (m *VideoFighterData) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *VideoFighterData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VideoFighterData) GetPvpScore() int32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *VideoFighterData) GetCamp() int32 {
	if m != nil {
		return m.Camp
	}
	return 0
}

func (m *VideoFighterData) GetHandCards() []*SkinGCard {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *VideoFighterData) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *VideoFighterData) GetNameText() int32 {
	if m != nil {
		return m.NameText
	}
	return 0
}

type SaveVideoArg struct {
	VideoID  uint64            `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	Fighter1 *VideoFighterData `protobuf:"bytes,2,opt,name=Fighter1" json:"Fighter1,omitempty"`
	Fighter2 *VideoFighterData `protobuf:"bytes,3,opt,name=Fighter2" json:"Fighter2,omitempty"`
	Winner   uint64            `protobuf:"varint,4,opt,name=Winner,proto3" json:"Winner,omitempty"`
}

func (m *SaveVideoArg) Reset()                    { *m = SaveVideoArg{} }
func (m *SaveVideoArg) String() string            { return proto.CompactTextString(m) }
func (*SaveVideoArg) ProtoMessage()               {}
func (*SaveVideoArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{10} }

func (m *SaveVideoArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *SaveVideoArg) GetFighter1() *VideoFighterData {
	if m != nil {
		return m.Fighter1
	}
	return nil
}

func (m *SaveVideoArg) GetFighter2() *VideoFighterData {
	if m != nil {
		return m.Fighter2
	}
	return nil
}

func (m *SaveVideoArg) GetWinner() uint64 {
	if m != nil {
		return m.Winner
	}
	return 0
}

type FetchVideoCommentsArg struct {
	VideoID   uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	CurAmount int32  `protobuf:"varint,2,opt,name=CurAmount,proto3" json:"CurAmount,omitempty"`
}

func (m *FetchVideoCommentsArg) Reset()                    { *m = FetchVideoCommentsArg{} }
func (m *FetchVideoCommentsArg) String() string            { return proto.CompactTextString(m) }
func (*FetchVideoCommentsArg) ProtoMessage()               {}
func (*FetchVideoCommentsArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{11} }

func (m *FetchVideoCommentsArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *FetchVideoCommentsArg) GetCurAmount() int32 {
	if m != nil {
		return m.CurAmount
	}
	return 0
}

type VideoComments struct {
	ID          int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Content     string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Like        int32  `protobuf:"varint,4,opt,name=Like,proto3" json:"Like,omitempty"`
	IsLike      bool   `protobuf:"varint,5,opt,name=IsLike,proto3" json:"IsLike,omitempty"`
	HeadImgUrl  string `protobuf:"bytes,6,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	Time        int32  `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
	Country     string `protobuf:"bytes,8,opt,name=Country,proto3" json:"Country,omitempty"`
	Uid         uint64 `protobuf:"varint,9,opt,name=Uid,proto3" json:"Uid,omitempty"`
	HeadFrame   string `protobuf:"bytes,10,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	CountryFlag string `protobuf:"bytes,11,opt,name=CountryFlag,proto3" json:"CountryFlag,omitempty"`
}

func (m *VideoComments) Reset()                    { *m = VideoComments{} }
func (m *VideoComments) String() string            { return proto.CompactTextString(m) }
func (*VideoComments) ProtoMessage()               {}
func (*VideoComments) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{12} }

func (m *VideoComments) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *VideoComments) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VideoComments) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *VideoComments) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *VideoComments) GetIsLike() bool {
	if m != nil {
		return m.IsLike
	}
	return false
}

func (m *VideoComments) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *VideoComments) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VideoComments) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *VideoComments) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *VideoComments) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *VideoComments) GetCountryFlag() string {
	if m != nil {
		return m.CountryFlag
	}
	return ""
}

type FetchVideoCommentsReply struct {
	CommentsList []*VideoComments `protobuf:"bytes,1,rep,name=CommentsList" json:"CommentsList,omitempty"`
	HasMore      bool             `protobuf:"varint,2,opt,name=HasMore,proto3" json:"HasMore,omitempty"`
}

func (m *FetchVideoCommentsReply) Reset()                    { *m = FetchVideoCommentsReply{} }
func (m *FetchVideoCommentsReply) String() string            { return proto.CompactTextString(m) }
func (*FetchVideoCommentsReply) ProtoMessage()               {}
func (*FetchVideoCommentsReply) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{13} }

func (m *FetchVideoCommentsReply) GetCommentsList() []*VideoComments {
	if m != nil {
		return m.CommentsList
	}
	return nil
}

func (m *FetchVideoCommentsReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type LikeVideoCommentsArg struct {
	VideoID    uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	CommentsID int32  `protobuf:"varint,2,opt,name=CommentsID,proto3" json:"CommentsID,omitempty"`
}

func (m *LikeVideoCommentsArg) Reset()                    { *m = LikeVideoCommentsArg{} }
func (m *LikeVideoCommentsArg) String() string            { return proto.CompactTextString(m) }
func (*LikeVideoCommentsArg) ProtoMessage()               {}
func (*LikeVideoCommentsArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{14} }

func (m *LikeVideoCommentsArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *LikeVideoCommentsArg) GetCommentsID() int32 {
	if m != nil {
		return m.CommentsID
	}
	return 0
}

type LikeVideoCommentsReply struct {
	CurLike int32 `protobuf:"varint,1,opt,name=CurLike,proto3" json:"CurLike,omitempty"`
}

func (m *LikeVideoCommentsReply) Reset()                    { *m = LikeVideoCommentsReply{} }
func (m *LikeVideoCommentsReply) String() string            { return proto.CompactTextString(m) }
func (*LikeVideoCommentsReply) ProtoMessage()               {}
func (*LikeVideoCommentsReply) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{15} }

func (m *LikeVideoCommentsReply) GetCurLike() int32 {
	if m != nil {
		return m.CurLike
	}
	return 0
}

type CommentsVideoArg struct {
	VideoID uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *CommentsVideoArg) Reset()                    { *m = CommentsVideoArg{} }
func (m *CommentsVideoArg) String() string            { return proto.CompactTextString(m) }
func (*CommentsVideoArg) ProtoMessage()               {}
func (*CommentsVideoArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{16} }

func (m *CommentsVideoArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *CommentsVideoArg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CommentsVideoReply struct {
	CommentsID int32 `protobuf:"varint,1,opt,name=CommentsID,proto3" json:"CommentsID,omitempty"`
	Time       int32 `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *CommentsVideoReply) Reset()                    { *m = CommentsVideoReply{} }
func (m *CommentsVideoReply) String() string            { return proto.CompactTextString(m) }
func (*CommentsVideoReply) ProtoMessage()               {}
func (*CommentsVideoReply) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{17} }

func (m *CommentsVideoReply) GetCommentsID() int32 {
	if m != nil {
		return m.CommentsID
	}
	return 0
}

func (m *CommentsVideoReply) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type GCommentsVideoArg struct {
	VideoID     uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	Content     string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	HeadImgUrl  string `protobuf:"bytes,4,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	Country     string `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
	Uid         uint64 `protobuf:"varint,6,opt,name=Uid,proto3" json:"Uid,omitempty"`
	HeadFrame   string `protobuf:"bytes,7,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	CountryFlag string `protobuf:"bytes,8,opt,name=CountryFlag,proto3" json:"CountryFlag,omitempty"`
}

func (m *GCommentsVideoArg) Reset()                    { *m = GCommentsVideoArg{} }
func (m *GCommentsVideoArg) String() string            { return proto.CompactTextString(m) }
func (*GCommentsVideoArg) ProtoMessage()               {}
func (*GCommentsVideoArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{18} }

func (m *GCommentsVideoArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *GCommentsVideoArg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GCommentsVideoArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GCommentsVideoArg) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *GCommentsVideoArg) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *GCommentsVideoArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GCommentsVideoArg) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *GCommentsVideoArg) GetCountryFlag() string {
	if m != nil {
		return m.CountryFlag
	}
	return ""
}

type FetchVideoItemArg struct {
	VideoID uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
}

func (m *FetchVideoItemArg) Reset()                    { *m = FetchVideoItemArg{} }
func (m *FetchVideoItemArg) String() string            { return proto.CompactTextString(m) }
func (*FetchVideoItemArg) ProtoMessage()               {}
func (*FetchVideoItemArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{19} }

func (m *FetchVideoItemArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

type GShareVideoArg struct {
	VideoID uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Area    int32  `protobuf:"varint,3,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *GShareVideoArg) Reset()                    { *m = GShareVideoArg{} }
func (m *GShareVideoArg) String() string            { return proto.CompactTextString(m) }
func (*GShareVideoArg) ProtoMessage()               {}
func (*GShareVideoArg) Descriptor() ([]byte, []int) { return fileDescriptorVideo, []int{20} }

func (m *GShareVideoArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *GShareVideoArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GShareVideoArg) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func init() {
	proto.RegisterType((*VideoFighter)(nil), "pb.VideoFighter")
	proto.RegisterType((*VideoItem)(nil), "pb.VideoItem")
	proto.RegisterType((*VideoList)(nil), "pb.VideoList")
	proto.RegisterType((*WatchVideoArg)(nil), "pb.WatchVideoArg")
	proto.RegisterType((*WatchVideoResp)(nil), "pb.WatchVideoResp")
	proto.RegisterType((*FetchSelfVideoListArg)(nil), "pb.FetchSelfVideoListArg")
	proto.RegisterType((*LikeVideoArg)(nil), "pb.LikeVideoArg")
	proto.RegisterType((*LikeVideoResp)(nil), "pb.LikeVideoResp")
	proto.RegisterType((*ShareVideoArg)(nil), "pb.ShareVideoArg")
	proto.RegisterType((*VideoFighterData)(nil), "pb.VideoFighterData")
	proto.RegisterType((*SaveVideoArg)(nil), "pb.SaveVideoArg")
	proto.RegisterType((*FetchVideoCommentsArg)(nil), "pb.FetchVideoCommentsArg")
	proto.RegisterType((*VideoComments)(nil), "pb.VideoComments")
	proto.RegisterType((*FetchVideoCommentsReply)(nil), "pb.FetchVideoCommentsReply")
	proto.RegisterType((*LikeVideoCommentsArg)(nil), "pb.LikeVideoCommentsArg")
	proto.RegisterType((*LikeVideoCommentsReply)(nil), "pb.LikeVideoCommentsReply")
	proto.RegisterType((*CommentsVideoArg)(nil), "pb.CommentsVideoArg")
	proto.RegisterType((*CommentsVideoReply)(nil), "pb.CommentsVideoReply")
	proto.RegisterType((*GCommentsVideoArg)(nil), "pb.GCommentsVideoArg")
	proto.RegisterType((*FetchVideoItemArg)(nil), "pb.FetchVideoItemArg")
	proto.RegisterType((*GShareVideoArg)(nil), "pb.GShareVideoArg")
}
func (m *VideoFighter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoFighter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Uid))
	}
	if len(m.FightCards) > 0 {
		for _, msg := range m.FightCards {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVideo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NameText != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.NameText))
	}
	return i, nil
}

func (m *VideoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	if m.Fighter1 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Fighter1.Size()))
		n1, err := m.Fighter1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Fighter2 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Fighter2.Size()))
		n2, err := m.Fighter2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.WinnerUid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.WinnerUid))
	}
	if m.WatchTimes != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.WatchTimes))
	}
	if m.Like != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Like))
	}
	if m.Time != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Time))
	}
	if len(m.SharePlayerName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.SharePlayerName)))
		i += copy(dAtA[i:], m.SharePlayerName)
	}
	if m.IsLike {
		dAtA[i] = 0x48
		i++
		if m.IsLike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CommentsAmount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CommentsAmount))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *VideoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Videos) > 0 {
		for _, msg := range m.Videos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVideo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WatchVideoArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchVideoArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	return i, nil
}

func (m *WatchVideoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchVideoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoData.Size()))
		n3, err := m.VideoData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.CurWatchTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CurWatchTimes))
	}
	if m.CurLike != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CurLike))
	}
	return i, nil
}

func (m *FetchSelfVideoListArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchSelfVideoListArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *LikeVideoArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeVideoArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	return i, nil
}

func (m *LikeVideoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeVideoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurWatchTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CurWatchTimes))
	}
	if m.CurLike != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CurLike))
	}
	return i, nil
}

func (m *ShareVideoArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareVideoArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *VideoFighterData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoFighterData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PvpScore != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.PvpScore))
	}
	if m.Camp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Camp))
	}
	if len(m.HandCards) > 0 {
		for _, msg := range m.HandCards {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVideo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsRobot {
		dAtA[i] = 0x30
		i++
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NameText != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.NameText))
	}
	return i, nil
}

func (m *SaveVideoArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveVideoArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	if m.Fighter1 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Fighter1.Size()))
		n4, err := m.Fighter1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Fighter2 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Fighter2.Size()))
		n5, err := m.Fighter2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Winner != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Winner))
	}
	return i, nil
}

func (m *FetchVideoCommentsArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchVideoCommentsArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	if m.CurAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CurAmount))
	}
	return i, nil
}

func (m *VideoComments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoComments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Like != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Like))
	}
	if m.IsLike {
		dAtA[i] = 0x28
		i++
		if m.IsLike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if m.Time != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Time))
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Uid))
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if len(m.CountryFlag) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.CountryFlag)))
		i += copy(dAtA[i:], m.CountryFlag)
	}
	return i, nil
}

func (m *FetchVideoCommentsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchVideoCommentsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentsList) > 0 {
		for _, msg := range m.CommentsList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVideo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasMore {
		dAtA[i] = 0x10
		i++
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LikeVideoCommentsArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeVideoCommentsArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	if m.CommentsID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CommentsID))
	}
	return i, nil
}

func (m *LikeVideoCommentsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeVideoCommentsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurLike != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CurLike))
	}
	return i, nil
}

func (m *CommentsVideoArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentsVideoArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *CommentsVideoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentsVideoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CommentsID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CommentsID))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *GCommentsVideoArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCommentsVideoArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Uid))
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if len(m.CountryFlag) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.CountryFlag)))
		i += copy(dAtA[i:], m.CountryFlag)
	}
	return i, nil
}

func (m *FetchVideoItemArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchVideoItemArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	return i, nil
}

func (m *GShareVideoArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GShareVideoArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Area != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func encodeVarintVideo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VideoFighter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovVideo(uint64(m.Uid))
	}
	if len(m.FightCards) > 0 {
		for _, e := range m.FightCards {
			l = e.Size()
			n += 1 + l + sovVideo(uint64(l))
		}
	}
	if m.NameText != 0 {
		n += 1 + sovVideo(uint64(m.NameText))
	}
	return n
}

func (m *VideoItem) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	if m.Fighter1 != nil {
		l = m.Fighter1.Size()
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Fighter2 != nil {
		l = m.Fighter2.Size()
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.WinnerUid != 0 {
		n += 1 + sovVideo(uint64(m.WinnerUid))
	}
	if m.WatchTimes != 0 {
		n += 1 + sovVideo(uint64(m.WatchTimes))
	}
	if m.Like != 0 {
		n += 1 + sovVideo(uint64(m.Like))
	}
	if m.Time != 0 {
		n += 1 + sovVideo(uint64(m.Time))
	}
	l = len(m.SharePlayerName)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.IsLike {
		n += 2
	}
	if m.CommentsAmount != 0 {
		n += 1 + sovVideo(uint64(m.CommentsAmount))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	return n
}

func (m *VideoList) Size() (n int) {
	var l int
	_ = l
	if len(m.Videos) > 0 {
		for _, e := range m.Videos {
			l = e.Size()
			n += 1 + l + sovVideo(uint64(l))
		}
	}
	return n
}

func (m *WatchVideoArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	return n
}

func (m *WatchVideoResp) Size() (n int) {
	var l int
	_ = l
	if m.VideoData != nil {
		l = m.VideoData.Size()
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.CurWatchTimes != 0 {
		n += 1 + sovVideo(uint64(m.CurWatchTimes))
	}
	if m.CurLike != 0 {
		n += 1 + sovVideo(uint64(m.CurLike))
	}
	return n
}

func (m *FetchSelfVideoListArg) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovVideo(uint64(m.Page))
	}
	return n
}

func (m *LikeVideoArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	return n
}

func (m *LikeVideoResp) Size() (n int) {
	var l int
	_ = l
	if m.CurWatchTimes != 0 {
		n += 1 + sovVideo(uint64(m.CurWatchTimes))
	}
	if m.CurLike != 0 {
		n += 1 + sovVideo(uint64(m.CurLike))
	}
	return n
}

func (m *ShareVideoArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	return n
}

func (m *VideoFighterData) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovVideo(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.PvpScore != 0 {
		n += 1 + sovVideo(uint64(m.PvpScore))
	}
	if m.Camp != 0 {
		n += 1 + sovVideo(uint64(m.Camp))
	}
	if len(m.HandCards) > 0 {
		for _, e := range m.HandCards {
			l = e.Size()
			n += 1 + l + sovVideo(uint64(l))
		}
	}
	if m.IsRobot {
		n += 2
	}
	if m.NameText != 0 {
		n += 1 + sovVideo(uint64(m.NameText))
	}
	return n
}

func (m *SaveVideoArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	if m.Fighter1 != nil {
		l = m.Fighter1.Size()
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Fighter2 != nil {
		l = m.Fighter2.Size()
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Winner != 0 {
		n += 1 + sovVideo(uint64(m.Winner))
	}
	return n
}

func (m *FetchVideoCommentsArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	if m.CurAmount != 0 {
		n += 1 + sovVideo(uint64(m.CurAmount))
	}
	return n
}

func (m *VideoComments) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovVideo(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Like != 0 {
		n += 1 + sovVideo(uint64(m.Like))
	}
	if m.IsLike {
		n += 2
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovVideo(uint64(m.Time))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovVideo(uint64(m.Uid))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	l = len(m.CountryFlag)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	return n
}

func (m *FetchVideoCommentsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.CommentsList) > 0 {
		for _, e := range m.CommentsList {
			l = e.Size()
			n += 1 + l + sovVideo(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	return n
}

func (m *LikeVideoCommentsArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	if m.CommentsID != 0 {
		n += 1 + sovVideo(uint64(m.CommentsID))
	}
	return n
}

func (m *LikeVideoCommentsReply) Size() (n int) {
	var l int
	_ = l
	if m.CurLike != 0 {
		n += 1 + sovVideo(uint64(m.CurLike))
	}
	return n
}

func (m *CommentsVideoArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	return n
}

func (m *CommentsVideoReply) Size() (n int) {
	var l int
	_ = l
	if m.CommentsID != 0 {
		n += 1 + sovVideo(uint64(m.CommentsID))
	}
	if m.Time != 0 {
		n += 1 + sovVideo(uint64(m.Time))
	}
	return n
}

func (m *GCommentsVideoArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovVideo(uint64(m.Uid))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	l = len(m.CountryFlag)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	return n
}

func (m *FetchVideoItemArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	return n
}

func (m *GShareVideoArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovVideo(uint64(m.VideoID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.Area != 0 {
		n += 1 + sovVideo(uint64(m.Area))
	}
	return n
}

func sovVideo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVideo(x uint64) (n int) {
	return sovVideo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VideoFighter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoFighter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoFighter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FightCards = append(m.FightCards, &SkinGCard{})
			if err := m.FightCards[len(m.FightCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameText", wireType)
			}
			m.NameText = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameText |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighter1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fighter1 == nil {
				m.Fighter1 = &VideoFighter{}
			}
			if err := m.Fighter1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighter2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fighter2 == nil {
				m.Fighter2 = &VideoFighter{}
			}
			if err := m.Fighter2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerUid", wireType)
			}
			m.WinnerUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinnerUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchTimes", wireType)
			}
			m.WatchTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLike = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsAmount", wireType)
			}
			m.CommentsAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentsAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Videos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Videos = append(m.Videos, &VideoItem{})
			if err := m.Videos[len(m.Videos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchVideoArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchVideoArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchVideoArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchVideoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchVideoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchVideoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoData == nil {
				m.VideoData = &VideoBattleData{}
			}
			if err := m.VideoData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurWatchTimes", wireType)
			}
			m.CurWatchTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurWatchTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurLike", wireType)
			}
			m.CurLike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurLike |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchSelfVideoListArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchSelfVideoListArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchSelfVideoListArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeVideoArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeVideoArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeVideoArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeVideoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeVideoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeVideoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurWatchTimes", wireType)
			}
			m.CurWatchTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurWatchTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurLike", wireType)
			}
			m.CurLike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurLike |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareVideoArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareVideoArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareVideoArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoFighterData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoFighterData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoFighterData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpScore", wireType)
			}
			m.PvpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Camp", wireType)
			}
			m.Camp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Camp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandCards = append(m.HandCards, &SkinGCard{})
			if err := m.HandCards[len(m.HandCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameText", wireType)
			}
			m.NameText = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameText |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveVideoArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveVideoArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveVideoArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighter1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fighter1 == nil {
				m.Fighter1 = &VideoFighterData{}
			}
			if err := m.Fighter1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighter2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fighter2 == nil {
				m.Fighter2 = &VideoFighterData{}
			}
			if err := m.Fighter2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			m.Winner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Winner |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchVideoCommentsArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchVideoCommentsArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchVideoCommentsArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurAmount", wireType)
			}
			m.CurAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoComments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoComments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoComments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLike = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchVideoCommentsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchVideoCommentsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchVideoCommentsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentsList = append(m.CommentsList, &VideoComments{})
			if err := m.CommentsList[len(m.CommentsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeVideoCommentsArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeVideoCommentsArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeVideoCommentsArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsID", wireType)
			}
			m.CommentsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentsID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeVideoCommentsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeVideoCommentsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeVideoCommentsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurLike", wireType)
			}
			m.CurLike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurLike |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentsVideoArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentsVideoArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentsVideoArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentsVideoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentsVideoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentsVideoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsID", wireType)
			}
			m.CommentsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentsID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCommentsVideoArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCommentsVideoArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCommentsVideoArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchVideoItemArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchVideoItemArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchVideoItemArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GShareVideoArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GShareVideoArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GShareVideoArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVideo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVideo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVideo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVideo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVideo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVideo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("video.proto", fileDescriptorVideo) }

var fileDescriptorVideo = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0x67, 0x9d, 0x3f, 0x8d, 0x27, 0x49, 0x49, 0x97, 0xe3, 0xb0, 0xaa, 0x2a, 0x8a, 0x2c, 0x40,
	0x41, 0xc7, 0x55, 0x77, 0x41, 0x3c, 0xf2, 0xd0, 0x4b, 0x95, 0x36, 0xd2, 0xc1, 0x55, 0x9b, 0x3b,
	0xee, 0x79, 0xd3, 0x2c, 0xa9, 0xb9, 0xd8, 0x8e, 0xd6, 0x9b, 0x8a, 0x3e, 0xf1, 0xc0, 0x97, 0x80,
	0x77, 0x3e, 0x0c, 0x12, 0x2f, 0x7c, 0x04, 0x54, 0x84, 0xf8, 0x1a, 0x68, 0xc7, 0xeb, 0xb5, 0x9d,
	0xa4, 0x6d, 0x24, 0x78, 0xdb, 0x99, 0x9d, 0xdd, 0xfd, 0xcd, 0xcc, 0x6f, 0x7e, 0x36, 0x34, 0xaf,
	0x83, 0x99, 0x88, 0x8f, 0x97, 0x32, 0x56, 0x31, 0x75, 0x96, 0xd3, 0xc3, 0xd6, 0x94, 0x2b, 0xb5,
	0x10, 0xa9, 0xe7, 0x10, 0x2e, 0xb9, 0x9c, 0xa5, 0x6b, 0xff, 0x47, 0x68, 0x7d, 0xab, 0x83, 0x47,
	0xc1, 0xfc, 0x4a, 0x09, 0x49, 0x29, 0x54, 0xbf, 0xe1, 0xa1, 0xf0, 0x48, 0x8f, 0xf4, 0x5d, 0x86,
	0x6b, 0xda, 0x81, 0xca, 0x9b, 0x60, 0xe6, 0x39, 0x3d, 0xd2, 0xaf, 0x32, 0xbd, 0xa4, 0x4f, 0x01,
	0xf0, 0xc0, 0x90, 0xcb, 0x59, 0xe2, 0x55, 0x7a, 0x95, 0x7e, 0x73, 0xd0, 0x3e, 0x5e, 0x4e, 0x8f,
	0x27, 0xef, 0x82, 0xe8, 0x4c, 0x7b, 0x59, 0x21, 0x80, 0x1e, 0x42, 0x43, 0x5f, 0xf4, 0x5a, 0xfc,
	0xa0, 0xbc, 0x6a, 0x8f, 0xf4, 0x6b, 0xcc, 0xda, 0xfe, 0xdf, 0x0e, 0xb8, 0x88, 0x60, 0xac, 0x44,
	0x48, 0x3d, 0xd8, 0x4b, 0x8d, 0x53, 0x44, 0x50, 0x65, 0x99, 0x49, 0x3f, 0x87, 0x86, 0xc1, 0xf8,
	0x1c, 0x91, 0x34, 0x07, 0x1d, 0xfd, 0x60, 0x11, 0x3c, 0xb3, 0x11, 0x85, 0xe8, 0x81, 0x57, 0x79,
	0x20, 0x7a, 0x40, 0x8f, 0xc0, 0x7d, 0x1b, 0x44, 0x91, 0x90, 0x3a, 0xcd, 0x2a, 0xbe, 0x9b, 0x3b,
	0x68, 0x17, 0xe0, 0x2d, 0x57, 0x97, 0x57, 0xaf, 0x83, 0x50, 0x24, 0x5e, 0x0d, 0xf1, 0x17, 0x3c,
	0xba, 0x64, 0x2f, 0x83, 0x77, 0xc2, 0xab, 0xe3, 0x0e, 0xae, 0xb5, 0x4f, 0x6f, 0x7a, 0x7b, 0xa9,
	0x4f, 0xaf, 0x69, 0x1f, 0xde, 0x9f, 0x5c, 0x71, 0x29, 0x2e, 0x16, 0xfc, 0x46, 0x48, 0xac, 0x72,
	0x03, 0xab, 0xbc, 0xee, 0xa6, 0x8f, 0xa1, 0x3e, 0x4e, 0xf0, 0x4e, 0xb7, 0x47, 0xfa, 0x0d, 0x66,
	0x2c, 0xfa, 0x29, 0xec, 0x0f, 0xe3, 0x30, 0x14, 0x91, 0x4a, 0x4e, 0xc2, 0x78, 0x15, 0x29, 0x0f,
	0xf0, 0xfe, 0x35, 0xaf, 0x6d, 0x62, 0x33, 0x6f, 0xa2, 0x3f, 0x30, 0x65, 0x7e, 0x19, 0x24, 0x8a,
	0x7e, 0x02, 0x75, 0x34, 0x12, 0x8f, 0xe4, 0xbd, 0xb3, 0x5d, 0x60, 0x66, 0xd3, 0xff, 0x0c, 0xda,
	0x98, 0x27, 0x9a, 0x27, 0x72, 0x7e, 0x77, 0x7b, 0xfc, 0x9f, 0x08, 0xec, 0xe7, 0xb1, 0x4c, 0x24,
	0x4b, 0xfa, 0xdc, 0xbc, 0x78, 0xca, 0x15, 0xc7, 0xf0, 0xe6, 0xe0, 0x03, 0xfb, 0xce, 0x0b, 0x24,
	0xa4, 0xde, 0x62, 0x79, 0x14, 0xfd, 0x18, 0xda, 0xc3, 0x95, 0x2c, 0x54, 0xdb, 0xc1, 0xfc, 0xca,
	0x4e, 0x8d, 0x62, 0xb8, 0x92, 0x58, 0x9f, 0x0a, 0xee, 0x67, 0xa6, 0xff, 0x04, 0x3e, 0x1c, 0x09,
	0x75, 0x79, 0x35, 0x11, 0x8b, 0xef, 0x6c, 0xb6, 0x1a, 0x38, 0x85, 0xea, 0x05, 0x9f, 0xa7, 0xb4,
	0xae, 0x31, 0x5c, 0xfb, 0x7d, 0x68, 0xe9, 0x43, 0x3b, 0x24, 0xf7, 0x0a, 0xda, 0x36, 0x12, 0x53,
	0xdb, 0xc0, 0x49, 0x1e, 0xc0, 0xe9, 0x94, 0x71, 0x7e, 0x05, 0x6d, 0xec, 0xf9, 0xc3, 0x6f, 0xdb,
	0x5e, 0x3a, 0x85, 0x5e, 0xfe, 0x4e, 0xa0, 0x53, 0xa4, 0x32, 0xd6, 0xce, 0x4c, 0x29, 0xc9, 0xa7,
	0x74, 0xcb, 0x51, 0x3d, 0x8a, 0x17, 0xd7, 0xcb, 0xc9, 0x65, 0x2c, 0xb3, 0xe2, 0x59, 0x5b, 0xc7,
	0x0f, 0x79, 0xb8, 0x34, 0x23, 0x8a, 0x6b, 0xfa, 0x04, 0xdc, 0x73, 0x1e, 0xcd, 0xd2, 0x41, 0xaf,
	0x6d, 0x1b, 0xf4, 0x7c, 0x5f, 0x67, 0x31, 0x4e, 0x58, 0x3c, 0x8d, 0x15, 0x0e, 0x43, 0x83, 0x65,
	0x66, 0x49, 0x01, 0xf6, 0xd6, 0x14, 0xe0, 0x57, 0x02, 0xad, 0x09, 0xbf, 0xde, 0xa5, 0x18, 0xcf,
	0x36, 0x44, 0xe0, 0xd1, 0xfa, 0x58, 0x23, 0xa5, 0x72, 0x21, 0x78, 0xb6, 0x21, 0x04, 0xf7, 0x9f,
	0x18, 0xe8, 0xe1, 0x4b, 0x67, 0xdf, 0x28, 0x81, 0xb1, 0xfc, 0x57, 0x86, 0x5b, 0x78, 0xd4, 0x0e,
	0xdc, 0xbd, 0x70, 0x8f, 0xc0, 0x1d, 0xae, 0xa4, 0x19, 0xd5, 0x94, 0x02, 0xb9, 0xc3, 0xff, 0xc5,
	0x81, 0x76, 0xe9, 0x32, 0xba, 0x0f, 0x8e, 0xb9, 0xa4, 0xc6, 0x9c, 0xed, 0xbd, 0x47, 0x52, 0xc5,
	0x91, 0x12, 0x91, 0xc2, 0x7c, 0x5c, 0x96, 0x99, 0x56, 0x87, 0xaa, 0x05, 0x1d, 0xca, 0x95, 0xa4,
	0x56, 0x52, 0x92, 0x2e, 0xc0, 0xb9, 0xe0, 0xb3, 0x71, 0x38, 0x7f, 0x23, 0x17, 0xd8, 0x2c, 0x97,
	0x15, 0x3c, 0x5b, 0xf5, 0x0b, 0x5f, 0x5e, 0x45, 0x4a, 0xde, 0x18, 0xdd, 0xca, 0xcc, 0x8c, 0x7a,
	0x6e, 0x4e, 0xbd, 0x23, 0x70, 0xf5, 0x6d, 0x23, 0xa9, 0xe1, 0x03, 0x46, 0xe7, 0x0e, 0xda, 0x83,
	0xa6, 0x39, 0x3a, 0x5a, 0xf0, 0xb9, 0x91, 0xa9, 0xa2, 0xcb, 0xff, 0x1e, 0x3e, 0xda, 0x2c, 0x36,
	0x13, 0xcb, 0xc5, 0x0d, 0xfd, 0x12, 0x5a, 0x99, 0x43, 0x4f, 0xb7, 0x51, 0xb0, 0x03, 0xdb, 0x55,
	0x1b, 0x5d, 0x0a, 0xd3, 0xe8, 0xcf, 0x79, 0xf2, 0xb5, 0xe6, 0xbd, 0x93, 0x72, 0xd3, 0x98, 0xfe,
	0x05, 0x3c, 0xb2, 0xd3, 0xbd, 0x5b, 0x5f, 0xbb, 0x00, 0x59, 0xe0, 0xf8, 0xd4, 0x34, 0xb6, 0xe0,
	0xf1, 0x07, 0xf0, 0x78, 0xe3, 0xc6, 0x14, 0x7c, 0x41, 0x12, 0x48, 0x59, 0x12, 0x46, 0xd0, 0xc9,
	0x42, 0x77, 0x18, 0x84, 0x02, 0x0b, 0x9c, 0x12, 0x0b, 0xfc, 0x73, 0xa0, 0xa5, 0x7b, 0xd2, 0x77,
	0xcb, 0x88, 0xc9, 0x3a, 0x62, 0xdb, 0x6f, 0x27, 0xef, 0xb7, 0xff, 0x0f, 0x81, 0x83, 0xb3, 0xff,
	0x03, 0x93, 0xe5, 0x71, 0xa5, 0xc0, 0xe3, 0x32, 0x03, 0xab, 0x1b, 0x0c, 0x2c, 0xb0, 0xad, 0xb6,
	0x95, 0x6d, 0xf5, 0x3b, 0xd8, 0xb6, 0xf7, 0x00, 0xdb, 0x1a, 0x9b, 0x6c, 0x7b, 0x0a, 0x07, 0x39,
	0xdb, 0xf4, 0x17, 0xf0, 0xfe, 0xcf, 0x01, 0x83, 0xfd, 0xb3, 0xff, 0x20, 0xdf, 0xda, 0x77, 0x22,
	0x05, 0x37, 0xfa, 0x8b, 0xeb, 0x17, 0x9d, 0xdf, 0x6e, 0xbb, 0xe4, 0x8f, 0xdb, 0x2e, 0xf9, 0xf3,
	0xb6, 0x4b, 0x7e, 0xfe, 0xab, 0xfb, 0xde, 0xb4, 0x8e, 0x3f, 0x68, 0x5f, 0xfc, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x4f, 0x72, 0x0f, 0xd7, 0xcd, 0x09, 0x00, 0x00,
}
