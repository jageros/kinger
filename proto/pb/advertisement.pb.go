// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: advertisement.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ShopFreeAdsType int32

const (
	ShopFreeAdsType_GoldAds     ShopFreeAdsType = 0
	ShopFreeAdsType_TreasureAds ShopFreeAdsType = 1
	ShopFreeAdsType_JadeAds     ShopFreeAdsType = 2
)

var ShopFreeAdsType_name = map[int32]string{
	0: "GoldAds",
	1: "TreasureAds",
	2: "JadeAds",
}
var ShopFreeAdsType_value = map[string]int32{
	"GoldAds":     0,
	"TreasureAds": 1,
	"JadeAds":     2,
}

func (x ShopFreeAdsType) String() string {
	return proto.EnumName(ShopFreeAdsType_name, int32(x))
}
func (ShopFreeAdsType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAdvertisement, []int{0} }

type TreasureReadAdsArg struct {
	TreasureID    uint32 `protobuf:"varint,1,opt,name=TreasureID,proto3" json:"TreasureID,omitempty"`
	IsConsumeJade bool   `protobuf:"varint,2,opt,name=IsConsumeJade,proto3" json:"IsConsumeJade,omitempty"`
}

func (m *TreasureReadAdsArg) Reset()                    { *m = TreasureReadAdsArg{} }
func (m *TreasureReadAdsArg) String() string            { return proto.CompactTextString(m) }
func (*TreasureReadAdsArg) ProtoMessage()               {}
func (*TreasureReadAdsArg) Descriptor() ([]byte, []int) { return fileDescriptorAdvertisement, []int{0} }

func (m *TreasureReadAdsArg) GetTreasureID() uint32 {
	if m != nil {
		return m.TreasureID
	}
	return 0
}

func (m *TreasureReadAdsArg) GetIsConsumeJade() bool {
	if m != nil {
		return m.IsConsumeJade
	}
	return false
}

type TreasureReadAdsReply struct {
	RemainTime int32 `protobuf:"varint,1,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
}

func (m *TreasureReadAdsReply) Reset()         { *m = TreasureReadAdsReply{} }
func (m *TreasureReadAdsReply) String() string { return proto.CompactTextString(m) }
func (*TreasureReadAdsReply) ProtoMessage()    {}
func (*TreasureReadAdsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{1}
}

func (m *TreasureReadAdsReply) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

type DailyTreasureReadAdsArg struct {
	IsConsumeJade bool `protobuf:"varint,1,opt,name=IsConsumeJade,proto3" json:"IsConsumeJade,omitempty"`
}

func (m *DailyTreasureReadAdsArg) Reset()         { *m = DailyTreasureReadAdsArg{} }
func (m *DailyTreasureReadAdsArg) String() string { return proto.CompactTextString(m) }
func (*DailyTreasureReadAdsArg) ProtoMessage()    {}
func (*DailyTreasureReadAdsArg) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{2}
}

func (m *DailyTreasureReadAdsArg) GetIsConsumeJade() bool {
	if m != nil {
		return m.IsConsumeJade
	}
	return false
}

type WatchUpTreasureRareAdsArg struct {
	IsConsumeJade bool `protobuf:"varint,1,opt,name=IsConsumeJade,proto3" json:"IsConsumeJade,omitempty"`
}

func (m *WatchUpTreasureRareAdsArg) Reset()         { *m = WatchUpTreasureRareAdsArg{} }
func (m *WatchUpTreasureRareAdsArg) String() string { return proto.CompactTextString(m) }
func (*WatchUpTreasureRareAdsArg) ProtoMessage()    {}
func (*WatchUpTreasureRareAdsArg) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{3}
}

func (m *WatchUpTreasureRareAdsArg) GetIsConsumeJade() bool {
	if m != nil {
		return m.IsConsumeJade
	}
	return false
}

type WatchTreasureAddCardAdsArg struct {
	TreasureID    uint32 `protobuf:"varint,1,opt,name=TreasureID,proto3" json:"TreasureID,omitempty"`
	IsConsumeJade bool   `protobuf:"varint,2,opt,name=IsConsumeJade,proto3" json:"IsConsumeJade,omitempty"`
}

func (m *WatchTreasureAddCardAdsArg) Reset()         { *m = WatchTreasureAddCardAdsArg{} }
func (m *WatchTreasureAddCardAdsArg) String() string { return proto.CompactTextString(m) }
func (*WatchTreasureAddCardAdsArg) ProtoMessage()    {}
func (*WatchTreasureAddCardAdsArg) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{4}
}

func (m *WatchTreasureAddCardAdsArg) GetTreasureID() uint32 {
	if m != nil {
		return m.TreasureID
	}
	return 0
}

func (m *WatchTreasureAddCardAdsArg) GetIsConsumeJade() bool {
	if m != nil {
		return m.IsConsumeJade
	}
	return false
}

type BattleLoseReadAdsReply struct {
	AddStar int32 `protobuf:"varint,1,opt,name=AddStar,proto3" json:"AddStar,omitempty"`
}

func (m *BattleLoseReadAdsReply) Reset()         { *m = BattleLoseReadAdsReply{} }
func (m *BattleLoseReadAdsReply) String() string { return proto.CompactTextString(m) }
func (*BattleLoseReadAdsReply) ProtoMessage()    {}
func (*BattleLoseReadAdsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{5}
}

func (m *BattleLoseReadAdsReply) GetAddStar() int32 {
	if m != nil {
		return m.AddStar
	}
	return 0
}

type ShopFreeAds struct {
	Type       ShopFreeAdsType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.ShopFreeAdsType" json:"Type,omitempty"`
	ID         int32           `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	RemainTime int32           `protobuf:"varint,3,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
	CanGet     bool            `protobuf:"varint,4,opt,name=CanGet,proto3" json:"CanGet,omitempty"`
}

func (m *ShopFreeAds) Reset()                    { *m = ShopFreeAds{} }
func (m *ShopFreeAds) String() string            { return proto.CompactTextString(m) }
func (*ShopFreeAds) ProtoMessage()               {}
func (*ShopFreeAds) Descriptor() ([]byte, []int) { return fileDescriptorAdvertisement, []int{6} }

func (m *ShopFreeAds) GetType() ShopFreeAdsType {
	if m != nil {
		return m.Type
	}
	return ShopFreeAdsType_GoldAds
}

func (m *ShopFreeAds) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ShopFreeAds) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *ShopFreeAds) GetCanGet() bool {
	if m != nil {
		return m.CanGet
	}
	return false
}

type WatchShopFreeAdsArg struct {
	Type          ShopFreeAdsType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.ShopFreeAdsType" json:"Type,omitempty"`
	ID            int32           `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	IsConsumeJade bool            `protobuf:"varint,3,opt,name=IsConsumeJade,proto3" json:"IsConsumeJade,omitempty"`
}

func (m *WatchShopFreeAdsArg) Reset()         { *m = WatchShopFreeAdsArg{} }
func (m *WatchShopFreeAdsArg) String() string { return proto.CompactTextString(m) }
func (*WatchShopFreeAdsArg) ProtoMessage()    {}
func (*WatchShopFreeAdsArg) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{7}
}

func (m *WatchShopFreeAdsArg) GetType() ShopFreeAdsType {
	if m != nil {
		return m.Type
	}
	return ShopFreeAdsType_GoldAds
}

func (m *WatchShopFreeAdsArg) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WatchShopFreeAdsArg) GetIsConsumeJade() bool {
	if m != nil {
		return m.IsConsumeJade
	}
	return false
}

type WatchShopFreeAdsReply struct {
	Type ShopFreeAdsType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.ShopFreeAdsType" json:"Type,omitempty"`
	// Type == GoldAds : RewardPayload = GoldReward
	// Type == TreasureAds : RewardPayload = OpenTreasureReply
	// Type == JadeAds : RewardPayload = OpenTreasureReply
	RewardPayload []byte       `protobuf:"bytes,2,opt,name=RewardPayload,proto3" json:"RewardPayload,omitempty"`
	NextAds       *ShopFreeAds `protobuf:"bytes,3,opt,name=NextAds" json:"NextAds,omitempty"`
}

func (m *WatchShopFreeAdsReply) Reset()         { *m = WatchShopFreeAdsReply{} }
func (m *WatchShopFreeAdsReply) String() string { return proto.CompactTextString(m) }
func (*WatchShopFreeAdsReply) ProtoMessage()    {}
func (*WatchShopFreeAdsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{8}
}

func (m *WatchShopFreeAdsReply) GetType() ShopFreeAdsType {
	if m != nil {
		return m.Type
	}
	return ShopFreeAdsType_GoldAds
}

func (m *WatchShopFreeAdsReply) GetRewardPayload() []byte {
	if m != nil {
		return m.RewardPayload
	}
	return nil
}

func (m *WatchShopFreeAdsReply) GetNextAds() *ShopFreeAds {
	if m != nil {
		return m.NextAds
	}
	return nil
}

type WatchShopFreeAdsReply_GoldReward struct {
	GoldAmount int32 `protobuf:"varint,1,opt,name=GoldAmount,proto3" json:"GoldAmount,omitempty"`
}

func (m *WatchShopFreeAdsReply_GoldReward) Reset()         { *m = WatchShopFreeAdsReply_GoldReward{} }
func (m *WatchShopFreeAdsReply_GoldReward) String() string { return proto.CompactTextString(m) }
func (*WatchShopFreeAdsReply_GoldReward) ProtoMessage()    {}
func (*WatchShopFreeAdsReply_GoldReward) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{8, 0}
}

func (m *WatchShopFreeAdsReply_GoldReward) GetGoldAmount() int32 {
	if m != nil {
		return m.GoldAmount
	}
	return 0
}

type WatchShopFreeAdsReply_JadeReward struct {
	JadeAmount int32 `protobuf:"varint,1,opt,name=JadeAmount,proto3" json:"JadeAmount,omitempty"`
}

func (m *WatchShopFreeAdsReply_JadeReward) Reset()         { *m = WatchShopFreeAdsReply_JadeReward{} }
func (m *WatchShopFreeAdsReply_JadeReward) String() string { return proto.CompactTextString(m) }
func (*WatchShopFreeAdsReply_JadeReward) ProtoMessage()    {}
func (*WatchShopFreeAdsReply_JadeReward) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{8, 1}
}

func (m *WatchShopFreeAdsReply_JadeReward) GetJadeAmount() int32 {
	if m != nil {
		return m.JadeAmount
	}
	return 0
}

type WatchTreasureAddCardAdsReply struct {
	AddCardIDs []uint32 `protobuf:"varint,1,rep,packed,name=AddCardIDs" json:"AddCardIDs,omitempty"`
}

func (m *WatchTreasureAddCardAdsReply) Reset()         { *m = WatchTreasureAddCardAdsReply{} }
func (m *WatchTreasureAddCardAdsReply) String() string { return proto.CompactTextString(m) }
func (*WatchTreasureAddCardAdsReply) ProtoMessage()    {}
func (*WatchTreasureAddCardAdsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorAdvertisement, []int{9}
}

func (m *WatchTreasureAddCardAdsReply) GetAddCardIDs() []uint32 {
	if m != nil {
		return m.AddCardIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*TreasureReadAdsArg)(nil), "pb.TreasureReadAdsArg")
	proto.RegisterType((*TreasureReadAdsReply)(nil), "pb.TreasureReadAdsReply")
	proto.RegisterType((*DailyTreasureReadAdsArg)(nil), "pb.DailyTreasureReadAdsArg")
	proto.RegisterType((*WatchUpTreasureRareAdsArg)(nil), "pb.WatchUpTreasureRareAdsArg")
	proto.RegisterType((*WatchTreasureAddCardAdsArg)(nil), "pb.WatchTreasureAddCardAdsArg")
	proto.RegisterType((*BattleLoseReadAdsReply)(nil), "pb.BattleLoseReadAdsReply")
	proto.RegisterType((*ShopFreeAds)(nil), "pb.ShopFreeAds")
	proto.RegisterType((*WatchShopFreeAdsArg)(nil), "pb.WatchShopFreeAdsArg")
	proto.RegisterType((*WatchShopFreeAdsReply)(nil), "pb.WatchShopFreeAdsReply")
	proto.RegisterType((*WatchShopFreeAdsReply_GoldReward)(nil), "pb.WatchShopFreeAdsReply.GoldReward")
	proto.RegisterType((*WatchShopFreeAdsReply_JadeReward)(nil), "pb.WatchShopFreeAdsReply.JadeReward")
	proto.RegisterType((*WatchTreasureAddCardAdsReply)(nil), "pb.WatchTreasureAddCardAdsReply")
	proto.RegisterEnum("pb.ShopFreeAdsType", ShopFreeAdsType_name, ShopFreeAdsType_value)
}
func (m *TreasureReadAdsArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreasureReadAdsArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TreasureID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.TreasureID))
	}
	if m.IsConsumeJade {
		dAtA[i] = 0x10
		i++
		if m.IsConsumeJade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TreasureReadAdsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreasureReadAdsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemainTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.RemainTime))
	}
	return i, nil
}

func (m *DailyTreasureReadAdsArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyTreasureReadAdsArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsConsumeJade {
		dAtA[i] = 0x8
		i++
		if m.IsConsumeJade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *WatchUpTreasureRareAdsArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchUpTreasureRareAdsArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsConsumeJade {
		dAtA[i] = 0x8
		i++
		if m.IsConsumeJade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *WatchTreasureAddCardAdsArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchTreasureAddCardAdsArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TreasureID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.TreasureID))
	}
	if m.IsConsumeJade {
		dAtA[i] = 0x10
		i++
		if m.IsConsumeJade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BattleLoseReadAdsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleLoseReadAdsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddStar != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.AddStar))
	}
	return i, nil
}

func (m *ShopFreeAds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopFreeAds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.Type))
	}
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.ID))
	}
	if m.RemainTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.RemainTime))
	}
	if m.CanGet {
		dAtA[i] = 0x20
		i++
		if m.CanGet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *WatchShopFreeAdsArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchShopFreeAdsArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.Type))
	}
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.ID))
	}
	if m.IsConsumeJade {
		dAtA[i] = 0x18
		i++
		if m.IsConsumeJade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *WatchShopFreeAdsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchShopFreeAdsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.Type))
	}
	if len(m.RewardPayload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(len(m.RewardPayload)))
		i += copy(dAtA[i:], m.RewardPayload)
	}
	if m.NextAds != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.NextAds.Size()))
		n1, err := m.NextAds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *WatchShopFreeAdsReply_GoldReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchShopFreeAdsReply_GoldReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GoldAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.GoldAmount))
	}
	return i, nil
}

func (m *WatchShopFreeAdsReply_JadeReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchShopFreeAdsReply_JadeReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JadeAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(m.JadeAmount))
	}
	return i, nil
}

func (m *WatchTreasureAddCardAdsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchTreasureAddCardAdsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AddCardIDs) > 0 {
		dAtA3 := make([]byte, len(m.AddCardIDs)*10)
		var j2 int
		for _, num := range m.AddCardIDs {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdvertisement(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func encodeVarintAdvertisement(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TreasureReadAdsArg) Size() (n int) {
	var l int
	_ = l
	if m.TreasureID != 0 {
		n += 1 + sovAdvertisement(uint64(m.TreasureID))
	}
	if m.IsConsumeJade {
		n += 2
	}
	return n
}

func (m *TreasureReadAdsReply) Size() (n int) {
	var l int
	_ = l
	if m.RemainTime != 0 {
		n += 1 + sovAdvertisement(uint64(m.RemainTime))
	}
	return n
}

func (m *DailyTreasureReadAdsArg) Size() (n int) {
	var l int
	_ = l
	if m.IsConsumeJade {
		n += 2
	}
	return n
}

func (m *WatchUpTreasureRareAdsArg) Size() (n int) {
	var l int
	_ = l
	if m.IsConsumeJade {
		n += 2
	}
	return n
}

func (m *WatchTreasureAddCardAdsArg) Size() (n int) {
	var l int
	_ = l
	if m.TreasureID != 0 {
		n += 1 + sovAdvertisement(uint64(m.TreasureID))
	}
	if m.IsConsumeJade {
		n += 2
	}
	return n
}

func (m *BattleLoseReadAdsReply) Size() (n int) {
	var l int
	_ = l
	if m.AddStar != 0 {
		n += 1 + sovAdvertisement(uint64(m.AddStar))
	}
	return n
}

func (m *ShopFreeAds) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAdvertisement(uint64(m.Type))
	}
	if m.ID != 0 {
		n += 1 + sovAdvertisement(uint64(m.ID))
	}
	if m.RemainTime != 0 {
		n += 1 + sovAdvertisement(uint64(m.RemainTime))
	}
	if m.CanGet {
		n += 2
	}
	return n
}

func (m *WatchShopFreeAdsArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAdvertisement(uint64(m.Type))
	}
	if m.ID != 0 {
		n += 1 + sovAdvertisement(uint64(m.ID))
	}
	if m.IsConsumeJade {
		n += 2
	}
	return n
}

func (m *WatchShopFreeAdsReply) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAdvertisement(uint64(m.Type))
	}
	l = len(m.RewardPayload)
	if l > 0 {
		n += 1 + l + sovAdvertisement(uint64(l))
	}
	if m.NextAds != nil {
		l = m.NextAds.Size()
		n += 1 + l + sovAdvertisement(uint64(l))
	}
	return n
}

func (m *WatchShopFreeAdsReply_GoldReward) Size() (n int) {
	var l int
	_ = l
	if m.GoldAmount != 0 {
		n += 1 + sovAdvertisement(uint64(m.GoldAmount))
	}
	return n
}

func (m *WatchShopFreeAdsReply_JadeReward) Size() (n int) {
	var l int
	_ = l
	if m.JadeAmount != 0 {
		n += 1 + sovAdvertisement(uint64(m.JadeAmount))
	}
	return n
}

func (m *WatchTreasureAddCardAdsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.AddCardIDs) > 0 {
		l = 0
		for _, e := range m.AddCardIDs {
			l += sovAdvertisement(uint64(e))
		}
		n += 1 + sovAdvertisement(uint64(l)) + l
	}
	return n
}

func sovAdvertisement(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdvertisement(x uint64) (n int) {
	return sovAdvertisement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TreasureReadAdsArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureReadAdsArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureReadAdsArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasureID", wireType)
			}
			m.TreasureID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreasureID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConsumeJade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConsumeJade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreasureReadAdsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureReadAdsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureReadAdsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyTreasureReadAdsArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyTreasureReadAdsArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyTreasureReadAdsArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConsumeJade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConsumeJade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchUpTreasureRareAdsArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchUpTreasureRareAdsArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchUpTreasureRareAdsArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConsumeJade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConsumeJade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchTreasureAddCardAdsArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchTreasureAddCardAdsArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchTreasureAddCardAdsArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasureID", wireType)
			}
			m.TreasureID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreasureID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConsumeJade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConsumeJade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleLoseReadAdsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleLoseReadAdsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleLoseReadAdsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddStar", wireType)
			}
			m.AddStar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddStar |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopFreeAds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopFreeAds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopFreeAds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ShopFreeAdsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanGet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanGet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchShopFreeAdsArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchShopFreeAdsArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchShopFreeAdsArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ShopFreeAdsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConsumeJade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConsumeJade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchShopFreeAdsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchShopFreeAdsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchShopFreeAdsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ShopFreeAdsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdvertisement
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPayload = append(m.RewardPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardPayload == nil {
				m.RewardPayload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvertisement
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextAds == nil {
				m.NextAds = &ShopFreeAds{}
			}
			if err := m.NextAds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchShopFreeAdsReply_GoldReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoldReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoldReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldAmount", wireType)
			}
			m.GoldAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchShopFreeAdsReply_JadeReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JadeReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JadeReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JadeAmount", wireType)
			}
			m.JadeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JadeAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchTreasureAddCardAdsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchTreasureAddCardAdsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchTreasureAddCardAdsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdvertisement
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AddCardIDs = append(m.AddCardIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdvertisement
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAdvertisement
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAdvertisement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AddCardIDs = append(m.AddCardIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCardIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdvertisement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvertisement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdvertisement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdvertisement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdvertisement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAdvertisement
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdvertisement
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdvertisement(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdvertisement = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdvertisement   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("advertisement.proto", fileDescriptorAdvertisement) }

var fileDescriptorAdvertisement = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0xed, 0x6c, 0xda, 0x46, 0x6e, 0x4c, 0x13, 0x26, 0x5a, 0xd7, 0x22, 0x4b, 0x58, 0x0a, 0x56,
	0x91, 0x3c, 0x44, 0xf0, 0x49, 0x94, 0x6d, 0x16, 0xcb, 0x8a, 0x88, 0x4c, 0x23, 0x82, 0x6f, 0x13,
	0xe7, 0x62, 0x03, 0xbb, 0x3b, 0xcb, 0xcc, 0x44, 0xcd, 0x8b, 0xdf, 0xe1, 0x27, 0xf9, 0xe8, 0x27,
	0x48, 0x7c, 0xf6, 0x1f, 0x64, 0x26, 0xd9, 0x6e, 0xb2, 0x8d, 0xa0, 0xe2, 0xe3, 0x3d, 0xf7, 0xe6,
	0x9c, 0x73, 0xcf, 0xdc, 0x2c, 0xf4, 0xb8, 0xf8, 0x80, 0xca, 0x4c, 0x35, 0x66, 0x98, 0x9b, 0x41,
	0xa1, 0xa4, 0x91, 0xd4, 0x2b, 0x26, 0xe1, 0x5b, 0xa0, 0x63, 0x85, 0x5c, 0xcf, 0x14, 0x32, 0xe4,
	0x22, 0x12, 0x3a, 0x52, 0xef, 0x69, 0x00, 0x50, 0xa2, 0x49, 0xec, 0x93, 0x3e, 0x39, 0x69, 0xb3,
	0x35, 0x84, 0x1e, 0x43, 0x3b, 0xd1, 0x23, 0x99, 0xeb, 0x59, 0x86, 0xcf, 0xb9, 0x40, 0xdf, 0xeb,
	0x93, 0x93, 0x6b, 0x6c, 0x13, 0x0c, 0x1f, 0xc1, 0x8d, 0x1a, 0x37, 0xc3, 0x22, 0x9d, 0x5b, 0x76,
	0x86, 0x19, 0x9f, 0xe6, 0xe3, 0x69, 0x86, 0x8e, 0x7d, 0x8f, 0xad, 0x21, 0xe1, 0x53, 0xb8, 0x15,
	0xf3, 0x69, 0x3a, 0xdf, 0x62, 0xec, 0x8a, 0x30, 0xd9, 0x26, 0x1c, 0xc1, 0xed, 0x37, 0xdc, 0xbc,
	0xbb, 0x78, 0x5d, 0x5c, 0x52, 0x70, 0x85, 0x7f, 0x45, 0x31, 0x81, 0x23, 0x47, 0x51, 0x12, 0x44,
	0x42, 0x8c, 0xb8, 0xfa, 0xbf, 0xf9, 0x0c, 0xe1, 0xf0, 0x94, 0x1b, 0x93, 0xe2, 0x0b, 0xa9, 0x37,
	0x13, 0xf2, 0xa1, 0x19, 0x09, 0x71, 0x6e, 0xb8, 0x5a, 0xc5, 0x53, 0x96, 0xe1, 0x67, 0x68, 0x9d,
	0x5f, 0xc8, 0xe2, 0x99, 0x42, 0xbb, 0x0f, 0xbd, 0x0b, 0xbb, 0xe3, 0x79, 0xb1, 0xdc, 0xe1, 0x60,
	0xd8, 0x1b, 0x14, 0x93, 0xc1, 0x5a, 0xdb, 0xb6, 0x98, 0x1b, 0xa0, 0x07, 0xe0, 0x25, 0xb1, 0xb3,
	0xb1, 0xc7, 0xbc, 0x24, 0xae, 0xbd, 0x41, 0xa3, 0xfe, 0x06, 0xf4, 0x10, 0xf6, 0x47, 0x3c, 0x3f,
	0x43, 0xe3, 0xef, 0x3a, 0xeb, 0xab, 0x2a, 0x34, 0xd0, 0x73, 0xb9, 0xac, 0xa9, 0xd8, 0x40, 0xfe,
	0xd9, 0xc7, 0x95, 0xa4, 0x1a, 0xdb, 0x92, 0xfa, 0x49, 0xe0, 0x66, 0x5d, 0x76, 0x99, 0xd4, 0x1f,
	0x0b, 0x1f, 0x43, 0x9b, 0xe1, 0x47, 0xae, 0xc4, 0x2b, 0x3e, 0x4f, 0x25, 0x17, 0xce, 0xc3, 0x75,
	0xb6, 0x09, 0xd2, 0x7b, 0xd0, 0x7c, 0x89, 0x9f, 0x4c, 0x24, 0xb4, 0x33, 0xd2, 0x1a, 0x76, 0x6a,
	0x8c, 0xac, 0xec, 0x1f, 0x3d, 0x00, 0x38, 0x93, 0xa9, 0x58, 0xfe, 0xde, 0xe6, 0x69, 0xab, 0x28,
	0x93, 0xb3, 0xdc, 0x94, 0x37, 0x5d, 0x21, 0x76, 0xda, 0x6e, 0x52, 0x4d, 0xdb, 0x6a, 0x73, 0xba,
	0x42, 0xc2, 0x27, 0x70, 0xe7, 0x37, 0xd7, 0x77, 0xf9, 0x0f, 0x5a, 0x41, 0x49, 0xac, 0x7d, 0xd2,
	0x6f, 0xd8, 0xfb, 0xab, 0x90, 0xfb, 0x8f, 0xa1, 0x53, 0x4b, 0x81, 0xb6, 0xa0, 0xe9, 0xec, 0x08,
	0xdd, 0xdd, 0xa1, 0x1d, 0x68, 0x55, 0xd4, 0xba, 0x4b, 0x6c, 0xd7, 0xc9, 0x0b, 0xdd, 0xf5, 0x4e,
	0xbb, 0x5f, 0x17, 0x01, 0xf9, 0xb6, 0x08, 0xc8, 0xf7, 0x45, 0x40, 0xbe, 0xfc, 0x08, 0x76, 0x26,
	0xfb, 0xee, 0x83, 0xf1, 0xf0, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x13, 0x4d, 0xd4, 0x47,
	0x04, 0x00, 0x00,
}
