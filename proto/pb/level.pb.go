// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: level.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LevelInfo struct {
	CurLevel               int32   `protobuf:"varint,1,opt,name=CurLevel,proto3" json:"CurLevel,omitempty"`
	OpenedTreasureChapters []int32 `protobuf:"varint,2,rep,packed,name=OpenedTreasureChapters" json:"OpenedTreasureChapters,omitempty"`
	AskHelpLevels          []int32 `protobuf:"varint,3,rep,packed,name=AskHelpLevels" json:"AskHelpLevels,omitempty"`
	IsRechargeLock         bool    `protobuf:"varint,4,opt,name=IsRechargeLock,proto3" json:"IsRechargeLock,omitempty"`
}

func (m *LevelInfo) Reset()                    { *m = LevelInfo{} }
func (m *LevelInfo) String() string            { return proto.CompactTextString(m) }
func (*LevelInfo) ProtoMessage()               {}
func (*LevelInfo) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{0} }

func (m *LevelInfo) GetCurLevel() int32 {
	if m != nil {
		return m.CurLevel
	}
	return 0
}

func (m *LevelInfo) GetOpenedTreasureChapters() []int32 {
	if m != nil {
		return m.OpenedTreasureChapters
	}
	return nil
}

func (m *LevelInfo) GetAskHelpLevels() []int32 {
	if m != nil {
		return m.AskHelpLevels
	}
	return nil
}

func (m *LevelInfo) GetIsRechargeLock() bool {
	if m != nil {
		return m.IsRechargeLock
	}
	return false
}

type LevelHelpRecordItem struct {
	HelperHeadImgUrl string `protobuf:"bytes,1,opt,name=HelperHeadImgUrl,proto3" json:"HelperHeadImgUrl,omitempty"`
	HelperName       string `protobuf:"bytes,2,opt,name=HelperName,proto3" json:"HelperName,omitempty"`
	HelpCnt          int32  `protobuf:"varint,3,opt,name=HelpCnt,proto3" json:"HelpCnt,omitempty"`
	IsWin            bool   `protobuf:"varint,4,opt,name=IsWin,proto3" json:"IsWin,omitempty"`
	VideoID          uint64 `protobuf:"varint,5,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	HelperHeadFrame  string `protobuf:"bytes,6,opt,name=HelperHeadFrame,proto3" json:"HelperHeadFrame,omitempty"`
}

func (m *LevelHelpRecordItem) Reset()                    { *m = LevelHelpRecordItem{} }
func (m *LevelHelpRecordItem) String() string            { return proto.CompactTextString(m) }
func (*LevelHelpRecordItem) ProtoMessage()               {}
func (*LevelHelpRecordItem) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{1} }

func (m *LevelHelpRecordItem) GetHelperHeadImgUrl() string {
	if m != nil {
		return m.HelperHeadImgUrl
	}
	return ""
}

func (m *LevelHelpRecordItem) GetHelperName() string {
	if m != nil {
		return m.HelperName
	}
	return ""
}

func (m *LevelHelpRecordItem) GetHelpCnt() int32 {
	if m != nil {
		return m.HelpCnt
	}
	return 0
}

func (m *LevelHelpRecordItem) GetIsWin() bool {
	if m != nil {
		return m.IsWin
	}
	return false
}

func (m *LevelHelpRecordItem) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func (m *LevelHelpRecordItem) GetHelperHeadFrame() string {
	if m != nil {
		return m.HelperHeadFrame
	}
	return ""
}

type LevelHelpRecord struct {
	Records []*LevelHelpRecordItem `protobuf:"bytes,1,rep,name=Records" json:"Records,omitempty"`
}

func (m *LevelHelpRecord) Reset()                    { *m = LevelHelpRecord{} }
func (m *LevelHelpRecord) String() string            { return proto.CompactTextString(m) }
func (*LevelHelpRecord) ProtoMessage()               {}
func (*LevelHelpRecord) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{2} }

func (m *LevelHelpRecord) GetRecords() []*LevelHelpRecordItem {
	if m != nil {
		return m.Records
	}
	return nil
}

type OpenLevelTreasureArg struct {
	ChapterID int32 `protobuf:"varint,1,opt,name=ChapterID,proto3" json:"ChapterID,omitempty"`
}

func (m *OpenLevelTreasureArg) Reset()                    { *m = OpenLevelTreasureArg{} }
func (m *OpenLevelTreasureArg) String() string            { return proto.CompactTextString(m) }
func (*OpenLevelTreasureArg) ProtoMessage()               {}
func (*OpenLevelTreasureArg) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{3} }

func (m *OpenLevelTreasureArg) GetChapterID() int32 {
	if m != nil {
		return m.ChapterID
	}
	return 0
}

type BeginLevelBattle struct {
	LevelId int32 `protobuf:"varint,1,opt,name=LevelId,proto3" json:"LevelId,omitempty"`
}

func (m *BeginLevelBattle) Reset()                    { *m = BeginLevelBattle{} }
func (m *BeginLevelBattle) String() string            { return proto.CompactTextString(m) }
func (*BeginLevelBattle) ProtoMessage()               {}
func (*BeginLevelBattle) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{4} }

func (m *BeginLevelBattle) GetLevelId() int32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

type LevelFightResult struct {
	IsWin       bool              `protobuf:"varint,1,opt,name=IsWin,proto3" json:"IsWin,omitempty"`
	UnlockLevel int32             `protobuf:"varint,2,opt,name=UnlockLevel,proto3" json:"UnlockLevel,omitempty"`
	ChangeCards []*ChangeCardInfo `protobuf:"bytes,3,rep,name=ChangeCards" json:"ChangeCards,omitempty"`
	Gold        int32             `protobuf:"varint,4,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (m *LevelFightResult) Reset()                    { *m = LevelFightResult{} }
func (m *LevelFightResult) String() string            { return proto.CompactTextString(m) }
func (*LevelFightResult) ProtoMessage()               {}
func (*LevelFightResult) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{5} }

func (m *LevelFightResult) GetIsWin() bool {
	if m != nil {
		return m.IsWin
	}
	return false
}

func (m *LevelFightResult) GetUnlockLevel() int32 {
	if m != nil {
		return m.UnlockLevel
	}
	return 0
}

func (m *LevelFightResult) GetChangeCards() []*ChangeCardInfo {
	if m != nil {
		return m.ChangeCards
	}
	return nil
}

func (m *LevelFightResult) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type LevelChooseCard struct {
	Cards []uint32 `protobuf:"varint,1,rep,packed,name=Cards" json:"Cards,omitempty"`
}

func (m *LevelChooseCard) Reset()                    { *m = LevelChooseCard{} }
func (m *LevelChooseCard) String() string            { return proto.CompactTextString(m) }
func (*LevelChooseCard) ProtoMessage()               {}
func (*LevelChooseCard) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{6} }

func (m *LevelChooseCard) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

type LevelBattle struct {
	Desk          *FightDesk `protobuf:"bytes,1,opt,name=Desk" json:"Desk,omitempty"`
	ChoiceCards   []*Card    `protobuf:"bytes,2,rep,name=ChoiceCards" json:"ChoiceCards,omitempty"`
	NeedChooseNum int32      `protobuf:"varint,3,opt,name=NeedChooseNum,proto3" json:"NeedChooseNum,omitempty"`
	LevelID       int32      `protobuf:"varint,4,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
}

func (m *LevelBattle) Reset()                    { *m = LevelBattle{} }
func (m *LevelBattle) String() string            { return proto.CompactTextString(m) }
func (*LevelBattle) ProtoMessage()               {}
func (*LevelBattle) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{7} }

func (m *LevelBattle) GetDesk() *FightDesk {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *LevelBattle) GetChoiceCards() []*Card {
	if m != nil {
		return m.ChoiceCards
	}
	return nil
}

func (m *LevelBattle) GetNeedChooseNum() int32 {
	if m != nil {
		return m.NeedChooseNum
	}
	return 0
}

func (m *LevelBattle) GetLevelID() int32 {
	if m != nil {
		return m.LevelID
	}
	return 0
}

type ChapterUnlock struct {
	Chapter int32 `protobuf:"varint,1,opt,name=Chapter,proto3" json:"Chapter,omitempty"`
}

func (m *ChapterUnlock) Reset()                    { *m = ChapterUnlock{} }
func (m *ChapterUnlock) String() string            { return proto.CompactTextString(m) }
func (*ChapterUnlock) ProtoMessage()               {}
func (*ChapterUnlock) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{8} }

func (m *ChapterUnlock) GetChapter() int32 {
	if m != nil {
		return m.Chapter
	}
	return 0
}

type LevelHelpArg struct {
	HelpUid uint64 `protobuf:"varint,1,opt,name=HelpUid,proto3" json:"HelpUid,omitempty"`
	LevelID int32  `protobuf:"varint,2,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
}

func (m *LevelHelpArg) Reset()                    { *m = LevelHelpArg{} }
func (m *LevelHelpArg) String() string            { return proto.CompactTextString(m) }
func (*LevelHelpArg) ProtoMessage()               {}
func (*LevelHelpArg) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{9} }

func (m *LevelHelpArg) GetHelpUid() uint64 {
	if m != nil {
		return m.HelpUid
	}
	return 0
}

func (m *LevelHelpArg) GetLevelID() int32 {
	if m != nil {
		return m.LevelID
	}
	return 0
}

type LevelBeHelpArg struct {
	HelperName string `protobuf:"bytes,1,opt,name=HelperName,proto3" json:"HelperName,omitempty"`
	LevelID    int32  `protobuf:"varint,2,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
}

func (m *LevelBeHelpArg) Reset()                    { *m = LevelBeHelpArg{} }
func (m *LevelBeHelpArg) String() string            { return proto.CompactTextString(m) }
func (*LevelBeHelpArg) ProtoMessage()               {}
func (*LevelBeHelpArg) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{10} }

func (m *LevelBeHelpArg) GetHelperName() string {
	if m != nil {
		return m.HelperName
	}
	return ""
}

func (m *LevelBeHelpArg) GetLevelID() int32 {
	if m != nil {
		return m.LevelID
	}
	return 0
}

type TargetLevel struct {
	LevelID int32 `protobuf:"varint,1,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
}

func (m *TargetLevel) Reset()                    { *m = TargetLevel{} }
func (m *TargetLevel) String() string            { return proto.CompactTextString(m) }
func (*TargetLevel) ProtoMessage()               {}
func (*TargetLevel) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{11} }

func (m *TargetLevel) GetLevelID() int32 {
	if m != nil {
		return m.LevelID
	}
	return 0
}

type WatchHelpVideoArg struct {
	VideoID uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
}

func (m *WatchHelpVideoArg) Reset()                    { *m = WatchHelpVideoArg{} }
func (m *WatchHelpVideoArg) String() string            { return proto.CompactTextString(m) }
func (*WatchHelpVideoArg) ProtoMessage()               {}
func (*WatchHelpVideoArg) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{12} }

func (m *WatchHelpVideoArg) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

type FetchLevelVideoIDArg struct {
	LevelID int32 `protobuf:"varint,1,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
}

func (m *FetchLevelVideoIDArg) Reset()                    { *m = FetchLevelVideoIDArg{} }
func (m *FetchLevelVideoIDArg) String() string            { return proto.CompactTextString(m) }
func (*FetchLevelVideoIDArg) ProtoMessage()               {}
func (*FetchLevelVideoIDArg) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{13} }

func (m *FetchLevelVideoIDArg) GetLevelID() int32 {
	if m != nil {
		return m.LevelID
	}
	return 0
}

type FetchLevelVideoIDRely struct {
	VideoID uint64 `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
}

func (m *FetchLevelVideoIDRely) Reset()                    { *m = FetchLevelVideoIDRely{} }
func (m *FetchLevelVideoIDRely) String() string            { return proto.CompactTextString(m) }
func (*FetchLevelVideoIDRely) ProtoMessage()               {}
func (*FetchLevelVideoIDRely) Descriptor() ([]byte, []int) { return fileDescriptorLevel, []int{14} }

func (m *FetchLevelVideoIDRely) GetVideoID() uint64 {
	if m != nil {
		return m.VideoID
	}
	return 0
}

func init() {
	proto.RegisterType((*LevelInfo)(nil), "pb.LevelInfo")
	proto.RegisterType((*LevelHelpRecordItem)(nil), "pb.LevelHelpRecordItem")
	proto.RegisterType((*LevelHelpRecord)(nil), "pb.LevelHelpRecord")
	proto.RegisterType((*OpenLevelTreasureArg)(nil), "pb.OpenLevelTreasureArg")
	proto.RegisterType((*BeginLevelBattle)(nil), "pb.BeginLevelBattle")
	proto.RegisterType((*LevelFightResult)(nil), "pb.LevelFightResult")
	proto.RegisterType((*LevelChooseCard)(nil), "pb.LevelChooseCard")
	proto.RegisterType((*LevelBattle)(nil), "pb.LevelBattle")
	proto.RegisterType((*ChapterUnlock)(nil), "pb.ChapterUnlock")
	proto.RegisterType((*LevelHelpArg)(nil), "pb.LevelHelpArg")
	proto.RegisterType((*LevelBeHelpArg)(nil), "pb.LevelBeHelpArg")
	proto.RegisterType((*TargetLevel)(nil), "pb.TargetLevel")
	proto.RegisterType((*WatchHelpVideoArg)(nil), "pb.WatchHelpVideoArg")
	proto.RegisterType((*FetchLevelVideoIDArg)(nil), "pb.FetchLevelVideoIDArg")
	proto.RegisterType((*FetchLevelVideoIDRely)(nil), "pb.FetchLevelVideoIDRely")
}
func (m *LevelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.CurLevel))
	}
	if len(m.OpenedTreasureChapters) > 0 {
		dAtA2 := make([]byte, len(m.OpenedTreasureChapters)*10)
		var j1 int
		for _, num1 := range m.OpenedTreasureChapters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintLevel(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.AskHelpLevels) > 0 {
		dAtA4 := make([]byte, len(m.AskHelpLevels)*10)
		var j3 int
		for _, num1 := range m.AskHelpLevels {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLevel(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.IsRechargeLock {
		dAtA[i] = 0x20
		i++
		if m.IsRechargeLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LevelHelpRecordItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelHelpRecordItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HelperHeadImgUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.HelperHeadImgUrl)))
		i += copy(dAtA[i:], m.HelperHeadImgUrl)
	}
	if len(m.HelperName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.HelperName)))
		i += copy(dAtA[i:], m.HelperName)
	}
	if m.HelpCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.HelpCnt))
	}
	if m.IsWin {
		dAtA[i] = 0x20
		i++
		if m.IsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VideoID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.VideoID))
	}
	if len(m.HelperHeadFrame) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.HelperHeadFrame)))
		i += copy(dAtA[i:], m.HelperHeadFrame)
	}
	return i, nil
}

func (m *LevelHelpRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelHelpRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLevel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OpenLevelTreasureArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenLevelTreasureArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChapterID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.ChapterID))
	}
	return i, nil
}

func (m *BeginLevelBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginLevelBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LevelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.LevelId))
	}
	return i, nil
}

func (m *LevelFightResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelFightResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsWin {
		dAtA[i] = 0x8
		i++
		if m.IsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UnlockLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.UnlockLevel))
	}
	if len(m.ChangeCards) > 0 {
		for _, msg := range m.ChangeCards {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintLevel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Gold != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *LevelChooseCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelChooseCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cards) > 0 {
		dAtA6 := make([]byte, len(m.Cards)*10)
		var j5 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintLevel(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *LevelBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.Desk.Size()))
		n7, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.ChoiceCards) > 0 {
		for _, msg := range m.ChoiceCards {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLevel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NeedChooseNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.NeedChooseNum))
	}
	if m.LevelID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.LevelID))
	}
	return i, nil
}

func (m *ChapterUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterUnlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Chapter != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.Chapter))
	}
	return i, nil
}

func (m *LevelHelpArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelHelpArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HelpUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.HelpUid))
	}
	if m.LevelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.LevelID))
	}
	return i, nil
}

func (m *LevelBeHelpArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelBeHelpArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HelperName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.HelperName)))
		i += copy(dAtA[i:], m.HelperName)
	}
	if m.LevelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.LevelID))
	}
	return i, nil
}

func (m *TargetLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetLevel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LevelID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.LevelID))
	}
	return i, nil
}

func (m *WatchHelpVideoArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchHelpVideoArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.VideoID))
	}
	return i, nil
}

func (m *FetchLevelVideoIDArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchLevelVideoIDArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LevelID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.LevelID))
	}
	return i, nil
}

func (m *FetchLevelVideoIDRely) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchLevelVideoIDRely) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VideoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLevel(dAtA, i, uint64(m.VideoID))
	}
	return i, nil
}

func encodeVarintLevel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LevelInfo) Size() (n int) {
	var l int
	_ = l
	if m.CurLevel != 0 {
		n += 1 + sovLevel(uint64(m.CurLevel))
	}
	if len(m.OpenedTreasureChapters) > 0 {
		l = 0
		for _, e := range m.OpenedTreasureChapters {
			l += sovLevel(uint64(e))
		}
		n += 1 + sovLevel(uint64(l)) + l
	}
	if len(m.AskHelpLevels) > 0 {
		l = 0
		for _, e := range m.AskHelpLevels {
			l += sovLevel(uint64(e))
		}
		n += 1 + sovLevel(uint64(l)) + l
	}
	if m.IsRechargeLock {
		n += 2
	}
	return n
}

func (m *LevelHelpRecordItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.HelperHeadImgUrl)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	l = len(m.HelperName)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	if m.HelpCnt != 0 {
		n += 1 + sovLevel(uint64(m.HelpCnt))
	}
	if m.IsWin {
		n += 2
	}
	if m.VideoID != 0 {
		n += 1 + sovLevel(uint64(m.VideoID))
	}
	l = len(m.HelperHeadFrame)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	return n
}

func (m *LevelHelpRecord) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovLevel(uint64(l))
		}
	}
	return n
}

func (m *OpenLevelTreasureArg) Size() (n int) {
	var l int
	_ = l
	if m.ChapterID != 0 {
		n += 1 + sovLevel(uint64(m.ChapterID))
	}
	return n
}

func (m *BeginLevelBattle) Size() (n int) {
	var l int
	_ = l
	if m.LevelId != 0 {
		n += 1 + sovLevel(uint64(m.LevelId))
	}
	return n
}

func (m *LevelFightResult) Size() (n int) {
	var l int
	_ = l
	if m.IsWin {
		n += 2
	}
	if m.UnlockLevel != 0 {
		n += 1 + sovLevel(uint64(m.UnlockLevel))
	}
	if len(m.ChangeCards) > 0 {
		for _, e := range m.ChangeCards {
			l = e.Size()
			n += 1 + l + sovLevel(uint64(l))
		}
	}
	if m.Gold != 0 {
		n += 1 + sovLevel(uint64(m.Gold))
	}
	return n
}

func (m *LevelChooseCard) Size() (n int) {
	var l int
	_ = l
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovLevel(uint64(e))
		}
		n += 1 + sovLevel(uint64(l)) + l
	}
	return n
}

func (m *LevelBattle) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovLevel(uint64(l))
	}
	if len(m.ChoiceCards) > 0 {
		for _, e := range m.ChoiceCards {
			l = e.Size()
			n += 1 + l + sovLevel(uint64(l))
		}
	}
	if m.NeedChooseNum != 0 {
		n += 1 + sovLevel(uint64(m.NeedChooseNum))
	}
	if m.LevelID != 0 {
		n += 1 + sovLevel(uint64(m.LevelID))
	}
	return n
}

func (m *ChapterUnlock) Size() (n int) {
	var l int
	_ = l
	if m.Chapter != 0 {
		n += 1 + sovLevel(uint64(m.Chapter))
	}
	return n
}

func (m *LevelHelpArg) Size() (n int) {
	var l int
	_ = l
	if m.HelpUid != 0 {
		n += 1 + sovLevel(uint64(m.HelpUid))
	}
	if m.LevelID != 0 {
		n += 1 + sovLevel(uint64(m.LevelID))
	}
	return n
}

func (m *LevelBeHelpArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.HelperName)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	if m.LevelID != 0 {
		n += 1 + sovLevel(uint64(m.LevelID))
	}
	return n
}

func (m *TargetLevel) Size() (n int) {
	var l int
	_ = l
	if m.LevelID != 0 {
		n += 1 + sovLevel(uint64(m.LevelID))
	}
	return n
}

func (m *WatchHelpVideoArg) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovLevel(uint64(m.VideoID))
	}
	return n
}

func (m *FetchLevelVideoIDArg) Size() (n int) {
	var l int
	_ = l
	if m.LevelID != 0 {
		n += 1 + sovLevel(uint64(m.LevelID))
	}
	return n
}

func (m *FetchLevelVideoIDRely) Size() (n int) {
	var l int
	_ = l
	if m.VideoID != 0 {
		n += 1 + sovLevel(uint64(m.VideoID))
	}
	return n
}

func sovLevel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLevel(x uint64) (n int) {
	return sovLevel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LevelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurLevel", wireType)
			}
			m.CurLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLevel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OpenedTreasureChapters = append(m.OpenedTreasureChapters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLevel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLevel
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLevel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OpenedTreasureChapters = append(m.OpenedTreasureChapters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedTreasureChapters", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLevel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AskHelpLevels = append(m.AskHelpLevels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLevel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLevel
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLevel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AskHelpLevels = append(m.AskHelpLevels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AskHelpLevels", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRechargeLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRechargeLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelHelpRecordItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelHelpRecordItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelHelpRecordItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperHeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperHeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpCnt", wireType)
			}
			m.HelpCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWin = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperHeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperHeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelHelpRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelHelpRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelHelpRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &LevelHelpRecordItem{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenLevelTreasureArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenLevelTreasureArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenLevelTreasureArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterID", wireType)
			}
			m.ChapterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChapterID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginLevelBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginLevelBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginLevelBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelId", wireType)
			}
			m.LevelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelFightResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelFightResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelFightResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWin = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockLevel", wireType)
			}
			m.UnlockLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeCards = append(m.ChangeCards, &ChangeCardInfo{})
			if err := m.ChangeCards[len(m.ChangeCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelChooseCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelChooseCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelChooseCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLevel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLevel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLevel
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLevel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &FightDesk{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChoiceCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChoiceCards = append(m.ChoiceCards, &Card{})
			if err := m.ChoiceCards[len(m.ChoiceCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedChooseNum", wireType)
			}
			m.NeedChooseNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedChooseNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			m.LevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChapterUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chapter", wireType)
			}
			m.Chapter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chapter |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelHelpArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelHelpArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelHelpArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpUid", wireType)
			}
			m.HelpUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			m.LevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelBeHelpArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelBeHelpArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelBeHelpArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			m.LevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			m.LevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchHelpVideoArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchHelpVideoArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchHelpVideoArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchLevelVideoIDArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchLevelVideoIDArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchLevelVideoIDArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			m.LevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchLevelVideoIDRely) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchLevelVideoIDRely: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchLevelVideoIDRely: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoID", wireType)
			}
			m.VideoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLevel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLevel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLevel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLevel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLevel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLevel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("level.proto", fileDescriptorLevel) }

var fileDescriptorLevel = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xfe, 0x27, 0x97, 0x5e, 0x8e, 0x9b, 0x36, 0xff, 0x50, 0xc0, 0xaa, 0x50, 0x14, 0x2c, 0x44,
	0x4d, 0x05, 0x15, 0x2d, 0x15, 0xfb, 0xc6, 0x51, 0xa9, 0x51, 0x55, 0xa4, 0x51, 0x4b, 0xd7, 0x8e,
	0x7d, 0xb0, 0xad, 0x38, 0xb6, 0x35, 0x76, 0x90, 0x78, 0x0f, 0x16, 0x2c, 0x78, 0x05, 0xde, 0x83,
	0x25, 0x1b, 0xf6, 0xa8, 0xbc, 0x08, 0x9a, 0x8b, 0x1b, 0xbb, 0x6d, 0x76, 0xfe, 0xbe, 0xf9, 0xce,
	0xfd, 0x1c, 0x83, 0x91, 0xe0, 0x67, 0x4c, 0xf6, 0x73, 0x9e, 0x95, 0x19, 0x6d, 0xe5, 0x93, 0x9d,
	0x8d, 0x89, 0x57, 0x96, 0x09, 0x2a, 0xc6, 0xfa, 0x41, 0x60, 0xfd, 0x4c, 0x28, 0xdc, 0xf4, 0x53,
	0x46, 0x77, 0x60, 0xcd, 0x99, 0x73, 0x89, 0x4d, 0x32, 0x24, 0x76, 0x97, 0xdd, 0x60, 0xfa, 0x16,
	0x1e, 0x7d, 0xc8, 0x31, 0xc5, 0xe0, 0x82, 0xa3, 0x57, 0xcc, 0x39, 0x3a, 0x91, 0x97, 0x97, 0xc8,
	0x0b, 0xb3, 0x35, 0x6c, 0xdb, 0x5d, 0xb6, 0xe4, 0x95, 0x3e, 0x83, 0xde, 0x71, 0x31, 0x3d, 0xc5,
	0x24, 0x97, 0x7e, 0x0a, 0xb3, 0x2d, 0xe5, 0x4d, 0x92, 0x3e, 0x87, 0x4d, 0xb7, 0x60, 0xe8, 0x47,
	0x1e, 0x0f, 0xf1, 0x2c, 0xf3, 0xa7, 0x66, 0x67, 0x48, 0xec, 0x35, 0x76, 0x8b, 0xb5, 0x7e, 0x13,
	0x78, 0x20, 0x4d, 0x84, 0x2d, 0x43, 0x3f, 0xe3, 0x81, 0x5b, 0xe2, 0x8c, 0xee, 0x41, 0x5f, 0x30,
	0xc8, 0x4f, 0xd1, 0x0b, 0xdc, 0x59, 0x78, 0xc9, 0x55, 0x05, 0xeb, 0xec, 0x0e, 0x4f, 0x07, 0x00,
	0x8a, 0x3b, 0xf7, 0x66, 0x68, 0xb6, 0xa4, 0xaa, 0xc6, 0x50, 0x13, 0x56, 0x05, 0x72, 0xd2, 0xd2,
	0x6c, 0xcb, 0x26, 0x54, 0x90, 0x6e, 0x43, 0xd7, 0x2d, 0xae, 0xe2, 0x54, 0x27, 0xa7, 0x80, 0xd0,
	0x7f, 0x8c, 0x03, 0xcc, 0xdc, 0xb1, 0xd9, 0x1d, 0x12, 0xbb, 0xc3, 0x2a, 0x48, 0x6d, 0xd8, 0x5a,
	0x44, 0x3f, 0xe1, 0x22, 0xdc, 0x8a, 0x0c, 0x77, 0x9b, 0xb6, 0xc6, 0xb0, 0x75, 0xab, 0x2c, 0x7a,
	0x00, 0xab, 0xea, 0xab, 0x30, 0xc9, 0xb0, 0x6d, 0x1b, 0x87, 0x8f, 0xf7, 0xf3, 0xc9, 0xfe, 0x3d,
	0xc5, 0xb3, 0x4a, 0x67, 0x1d, 0xc1, 0xb6, 0x98, 0x82, 0xd4, 0x54, 0x83, 0x38, 0xe6, 0x21, 0x7d,
	0x02, 0xeb, 0x7a, 0x1e, 0xee, 0x58, 0x0f, 0x76, 0x41, 0x58, 0x2f, 0xa1, 0x3f, 0xc2, 0x30, 0x56,
	0x66, 0x23, 0xb9, 0x1d, 0xa2, 0x26, 0xb5, 0x16, 0x81, 0xd6, 0x57, 0xd0, 0xfa, 0x4a, 0xa0, 0x2f,
	0xbf, 0x4f, 0xe2, 0x30, 0x2a, 0x19, 0x16, 0xf3, 0xa4, 0xd6, 0x18, 0x52, 0x6f, 0xcc, 0x10, 0x8c,
	0xcb, 0x34, 0xc9, 0xfc, 0xa9, 0xda, 0xa8, 0x96, 0x74, 0x54, 0xa7, 0xe8, 0x11, 0x18, 0x4e, 0xe4,
	0xa5, 0x21, 0x3a, 0x9e, 0xa8, 0xb3, 0x2d, 0xeb, 0xa4, 0xa2, 0xce, 0x05, 0x2d, 0x36, 0x93, 0xd5,
	0x65, 0x94, 0x42, 0xe7, 0x5d, 0x96, 0x04, 0x72, 0x0a, 0x5d, 0x26, 0xbf, 0xad, 0x5d, 0xdd, 0x40,
	0x27, 0xca, 0xb2, 0x42, 0xea, 0x44, 0x52, 0xca, 0xad, 0x68, 0x5f, 0x8f, 0x29, 0x60, 0x7d, 0x27,
	0x60, 0xd4, 0x2b, 0x7d, 0x0a, 0x9d, 0x31, 0x16, 0x53, 0x99, 0xb9, 0x71, 0xd8, 0x13, 0xb1, 0x65,
	0x65, 0x82, 0x64, 0xf2, 0x89, 0xee, 0x89, 0x2c, 0xb3, 0xd8, 0xd7, 0x59, 0xb6, 0x64, 0x96, 0x6b,
	0x32, 0x4b, 0x8f, 0x07, 0xac, 0xfe, 0x28, 0xd6, 0xfd, 0x1c, 0x31, 0x50, 0x69, 0x9c, 0xcf, 0x67,
	0x7a, 0x85, 0x9a, 0xe4, 0xa2, 0xbd, 0x63, 0x5d, 0x44, 0x05, 0xad, 0x17, 0xd0, 0xd3, 0x93, 0x51,
	0x7d, 0x12, 0x52, 0x4d, 0x54, 0x93, 0xd0, 0xd0, 0x1a, 0xc1, 0xc6, 0xcd, 0x36, 0x88, 0x29, 0xeb,
	0xbd, 0xbd, 0x8c, 0xd5, 0xcc, 0x3a, 0xac, 0x82, 0xf5, 0x70, 0xad, 0x66, 0xb8, 0xf7, 0xb0, 0xa9,
	0x9a, 0x81, 0x95, 0x97, 0xe6, 0x75, 0x90, 0xfb, 0xae, 0x63, 0x89, 0xaf, 0x5d, 0x30, 0x2e, 0xc4,
	0xa1, 0x96, 0x6a, 0xb6, 0x35, 0x21, 0x69, 0x0a, 0x5f, 0xc1, 0xff, 0x57, 0x5e, 0xe9, 0x47, 0xc2,
	0xab, 0x3c, 0x15, 0x9d, 0x7d, 0x75, 0x45, 0xa4, 0x71, 0x45, 0xd6, 0x6b, 0xd8, 0x3e, 0xc1, 0xd2,
	0x8f, 0xa4, 0xb9, 0x26, 0xb5, 0xc5, 0x92, 0x00, 0x07, 0xf0, 0xf0, 0x8e, 0x05, 0xc3, 0xe4, 0xcb,
	0xf2, 0x20, 0xa3, 0xfe, 0xcf, 0xeb, 0x01, 0xf9, 0x75, 0x3d, 0x20, 0x7f, 0xae, 0x07, 0xe4, 0xdb,
	0xdf, 0xc1, 0x7f, 0x93, 0x15, 0xf9, 0x87, 0x7c, 0xf3, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x20, 0xd8,
	0xa3, 0x81, 0x42, 0x05, 0x00, 0x00,
}
