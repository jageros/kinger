// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: televise.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TeleviseEnum int32

const (
	TeleviseEnum_TeleviseUnknow    TeleviseEnum = 0
	TeleviseEnum_CardLevelupPurple TeleviseEnum = 1
	TeleviseEnum_CardLevelupOrange TeleviseEnum = 2
	TeleviseEnum_RecruitGetCard    TeleviseEnum = 3
	TeleviseEnum_GetSpecialCard    TeleviseEnum = 4
	TeleviseEnum_NewbieGiftGetCard TeleviseEnum = 5
	TeleviseEnum_LimitGiftGetCard  TeleviseEnum = 6
	TeleviseEnum_ClearanceLevel    TeleviseEnum = 7
	TeleviseEnum_BuyVip            TeleviseEnum = 8
	TeleviseEnum_RankPre3Login     TeleviseEnum = 9
	TeleviseEnum_BuyGrowPlan       TeleviseEnum = 10
)

var TeleviseEnum_name = map[int32]string{
	0:  "TeleviseUnknow",
	1:  "CardLevelupPurple",
	2:  "CardLevelupOrange",
	3:  "RecruitGetCard",
	4:  "GetSpecialCard",
	5:  "NewbieGiftGetCard",
	6:  "LimitGiftGetCard",
	7:  "ClearanceLevel",
	8:  "BuyVip",
	9:  "RankPre3Login",
	10: "BuyGrowPlan",
}
var TeleviseEnum_value = map[string]int32{
	"TeleviseUnknow":    0,
	"CardLevelupPurple": 1,
	"CardLevelupOrange": 2,
	"RecruitGetCard":    3,
	"GetSpecialCard":    4,
	"NewbieGiftGetCard": 5,
	"LimitGiftGetCard":  6,
	"ClearanceLevel":    7,
	"BuyVip":            8,
	"RankPre3Login":     9,
	"BuyGrowPlan":       10,
}

func (x TeleviseEnum) String() string {
	return proto.EnumName(TeleviseEnum_name, int32(x))
}
func (TeleviseEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorTelevise, []int{0} }

type Televise struct {
	TeleviseType TeleviseEnum `protobuf:"varint,1,opt,name=TeleviseType,proto3,enum=pb.TeleviseEnum" json:"TeleviseType,omitempty"`
	Arg          []byte       `protobuf:"bytes,2,opt,name=Arg,proto3" json:"Arg,omitempty"`
}

func (m *Televise) Reset()                    { *m = Televise{} }
func (m *Televise) String() string            { return proto.CompactTextString(m) }
func (*Televise) ProtoMessage()               {}
func (*Televise) Descriptor() ([]byte, []int) { return fileDescriptorTelevise, []int{0} }

func (m *Televise) GetTeleviseType() TeleviseEnum {
	if m != nil {
		return m.TeleviseType
	}
	return TeleviseEnum_TeleviseUnknow
}

func (m *Televise) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type TeleviseCardArg struct {
	PlayerName string `protobuf:"bytes,1,opt,name=playerName,proto3" json:"playerName,omitempty"`
	CardID     uint32 `protobuf:"varint,2,opt,name=CardID,proto3" json:"CardID,omitempty"`
}

func (m *TeleviseCardArg) Reset()                    { *m = TeleviseCardArg{} }
func (m *TeleviseCardArg) String() string            { return proto.CompactTextString(m) }
func (*TeleviseCardArg) ProtoMessage()               {}
func (*TeleviseCardArg) Descriptor() ([]byte, []int) { return fileDescriptorTelevise, []int{1} }

func (m *TeleviseCardArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *TeleviseCardArg) GetCardID() uint32 {
	if m != nil {
		return m.CardID
	}
	return 0
}

type TeleviseUidArg struct {
	PlayerName string `protobuf:"bytes,1,opt,name=playerName,proto3" json:"playerName,omitempty"`
}

func (m *TeleviseUidArg) Reset()                    { *m = TeleviseUidArg{} }
func (m *TeleviseUidArg) String() string            { return proto.CompactTextString(m) }
func (*TeleviseUidArg) ProtoMessage()               {}
func (*TeleviseUidArg) Descriptor() ([]byte, []int) { return fileDescriptorTelevise, []int{2} }

func (m *TeleviseUidArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type TeleviseRankLoginArg struct {
	PlayerName string `protobuf:"bytes,1,opt,name=playerName,proto3" json:"playerName,omitempty"`
	Ranking    uint32 `protobuf:"varint,2,opt,name=ranking,proto3" json:"ranking,omitempty"`
}

func (m *TeleviseRankLoginArg) Reset()                    { *m = TeleviseRankLoginArg{} }
func (m *TeleviseRankLoginArg) String() string            { return proto.CompactTextString(m) }
func (*TeleviseRankLoginArg) ProtoMessage()               {}
func (*TeleviseRankLoginArg) Descriptor() ([]byte, []int) { return fileDescriptorTelevise, []int{3} }

func (m *TeleviseRankLoginArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *TeleviseRankLoginArg) GetRanking() uint32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func init() {
	proto.RegisterType((*Televise)(nil), "pb.Televise")
	proto.RegisterType((*TeleviseCardArg)(nil), "pb.TeleviseCardArg")
	proto.RegisterType((*TeleviseUidArg)(nil), "pb.TeleviseUidArg")
	proto.RegisterType((*TeleviseRankLoginArg)(nil), "pb.TeleviseRankLoginArg")
	proto.RegisterEnum("pb.TeleviseEnum", TeleviseEnum_name, TeleviseEnum_value)
}
func (m *Televise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Televise) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeleviseType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTelevise(dAtA, i, uint64(m.TeleviseType))
	}
	if len(m.Arg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelevise(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *TeleviseCardArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeleviseCardArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelevise(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.CardID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTelevise(dAtA, i, uint64(m.CardID))
	}
	return i, nil
}

func (m *TeleviseUidArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeleviseUidArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelevise(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *TeleviseRankLoginArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeleviseRankLoginArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelevise(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.Ranking != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTelevise(dAtA, i, uint64(m.Ranking))
	}
	return i, nil
}

func encodeVarintTelevise(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Televise) Size() (n int) {
	var l int
	_ = l
	if m.TeleviseType != 0 {
		n += 1 + sovTelevise(uint64(m.TeleviseType))
	}
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTelevise(uint64(l))
	}
	return n
}

func (m *TeleviseCardArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovTelevise(uint64(l))
	}
	if m.CardID != 0 {
		n += 1 + sovTelevise(uint64(m.CardID))
	}
	return n
}

func (m *TeleviseUidArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovTelevise(uint64(l))
	}
	return n
}

func (m *TeleviseRankLoginArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovTelevise(uint64(l))
	}
	if m.Ranking != 0 {
		n += 1 + sovTelevise(uint64(m.Ranking))
	}
	return n
}

func sovTelevise(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelevise(x uint64) (n int) {
	return sovTelevise(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Televise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelevise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Televise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Televise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeleviseType", wireType)
			}
			m.TeleviseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeleviseType |= (TeleviseEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTelevise
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelevise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelevise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeleviseCardArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelevise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeleviseCardArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeleviseCardArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelevise
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID", wireType)
			}
			m.CardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelevise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelevise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeleviseUidArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelevise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeleviseUidArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeleviseUidArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelevise
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelevise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelevise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeleviseRankLoginArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelevise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeleviseRankLoginArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeleviseRankLoginArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelevise
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelevise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelevise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelevise(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelevise
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelevise
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelevise
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelevise
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelevise(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelevise = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelevise   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("televise.proto", fileDescriptorTelevise) }

var fileDescriptorTelevise = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x6e, 0xe2, 0x30,
	0x14, 0x85, 0x31, 0xcc, 0x04, 0xb8, 0xc3, 0x8f, 0xb1, 0x98, 0x11, 0xab, 0x08, 0x65, 0x85, 0x66,
	0x81, 0x46, 0x43, 0x5f, 0x00, 0x68, 0x15, 0x21, 0x21, 0x1a, 0xa5, 0xb4, 0x7b, 0x87, 0xde, 0x46,
	0x16, 0xc1, 0xb1, 0xdc, 0x04, 0x94, 0x37, 0xe9, 0x23, 0x75, 0xd9, 0x47, 0xa8, 0xe8, 0xaa, 0x6f,
	0x51, 0x39, 0x25, 0x2d, 0xed, 0x8a, 0xdd, 0xbd, 0x9f, 0xce, 0x3d, 0x39, 0x39, 0x32, 0xb4, 0x12,
	0x8c, 0x70, 0x2b, 0xee, 0x71, 0xa8, 0x74, 0x9c, 0xc4, 0xac, 0xac, 0x02, 0xc7, 0x87, 0xda, 0xf2,
	0x40, 0xd9, 0x19, 0x34, 0x8a, 0x79, 0x99, 0x29, 0xec, 0x91, 0x3e, 0x19, 0xb4, 0xfe, 0xd3, 0xa1,
	0x0a, 0x86, 0x05, 0xbf, 0x90, 0xe9, 0xc6, 0xff, 0xa2, 0x62, 0x14, 0x2a, 0x63, 0x1d, 0xf6, 0xca,
	0x7d, 0x32, 0x68, 0xf8, 0x66, 0x74, 0x66, 0xd0, 0x2e, 0x14, 0x53, 0xae, 0x6f, 0xc7, 0x3a, 0x64,
	0x36, 0x80, 0x8a, 0x78, 0x86, 0x7a, 0xc1, 0x37, 0xef, 0xc6, 0x75, 0xff, 0x88, 0xb0, 0x3f, 0x60,
	0x19, 0xe9, 0xec, 0x3c, 0xf7, 0x69, 0xfa, 0x87, 0xcd, 0xf9, 0x07, 0xad, 0xc2, 0xea, 0x5a, 0x9c,
	0xe2, 0xe4, 0x78, 0xd0, 0x2d, 0x2e, 0x7c, 0x2e, 0xd7, 0xf3, 0x38, 0x14, 0xf2, 0x94, 0x04, 0x3d,
	0xa8, 0x6a, 0x2e, 0xd7, 0x42, 0x86, 0x87, 0x08, 0xc5, 0xfa, 0xf7, 0x95, 0x7c, 0xf6, 0x62, 0xfe,
	0x9f, 0xb1, 0xa3, 0x50, 0x72, 0x2d, 0xe3, 0x1d, 0x2d, 0xb1, 0xdf, 0xd0, 0x31, 0x91, 0xe7, 0xb8,
	0xc5, 0x28, 0x55, 0x5e, 0xaa, 0x55, 0x84, 0x94, 0x7c, 0xc3, 0x97, 0x9a, 0xcb, 0x10, 0x69, 0xd9,
	0x38, 0xf8, 0xb8, 0xd2, 0xa9, 0x48, 0x5c, 0x4c, 0x8c, 0x80, 0x56, 0x0c, 0x73, 0x31, 0xb9, 0x52,
	0xb8, 0x12, 0x3c, 0xca, 0xd9, 0x0f, 0x73, 0xbe, 0xc0, 0x5d, 0x20, 0xd0, 0x15, 0x77, 0x1f, 0xd2,
	0x9f, 0xac, 0x0b, 0x74, 0x2e, 0x36, 0x22, 0x39, 0xa6, 0x96, 0x31, 0x98, 0x46, 0xc8, 0x35, 0x97,
	0x2b, 0xcc, 0x3f, 0x48, 0xab, 0x0c, 0xc0, 0x9a, 0xa4, 0xd9, 0x8d, 0x50, 0xb4, 0xc6, 0x3a, 0xd0,
	0x34, 0x8d, 0x78, 0x1a, 0x47, 0x79, 0x2b, 0xb4, 0xce, 0xda, 0xf0, 0x6b, 0x92, 0x66, 0xae, 0x8e,
	0x77, 0x5e, 0xc4, 0x25, 0x85, 0x09, 0x7d, 0xdc, 0xdb, 0xe4, 0x69, 0x6f, 0x93, 0xe7, 0xbd, 0x4d,
	0x1e, 0x5e, 0xec, 0x52, 0x60, 0xe5, 0x6f, 0x65, 0xf4, 0x16, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xd3,
	0x92, 0xef, 0x3d, 0x02, 0x00, 0x00,
}
