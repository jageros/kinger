// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: equip.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 资源类型
type ReturnResType int32

const (
	ReturnResType_ResTypeUnknow        ReturnResType = 0
	ReturnResType_ResTypeReputation    ReturnResType = 1
	ReturnResType_ResTypeContributions ReturnResType = 2
)

var ReturnResType_name = map[int32]string{
	0: "ResTypeUnknow",
	1: "ResTypeReputation",
	2: "ResTypeContributions",
}
var ReturnResType_value = map[string]int32{
	"ResTypeUnknow":        0,
	"ResTypeReputation":    1,
	"ResTypeContributions": 2,
}

func (x ReturnResType) String() string {
	return proto.EnumName(ReturnResType_name, int32(x))
}
func (ReturnResType) EnumDescriptor() ([]byte, []int) { return fileDescriptorEquip, []int{0} }

type Equip struct {
	EquipID     string `protobuf:"bytes,1,opt,name=EquipID,proto3" json:"EquipID,omitempty"`
	OwnerCardID uint32 `protobuf:"varint,2,opt,name=OwnerCardID,proto3" json:"OwnerCardID,omitempty"`
}

func (m *Equip) Reset()                    { *m = Equip{} }
func (m *Equip) String() string            { return proto.CompactTextString(m) }
func (*Equip) ProtoMessage()               {}
func (*Equip) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{0} }

func (m *Equip) GetEquipID() string {
	if m != nil {
		return m.EquipID
	}
	return ""
}

func (m *Equip) GetOwnerCardID() uint32 {
	if m != nil {
		return m.OwnerCardID
	}
	return 0
}

type EquipData struct {
	Equips []*Equip `protobuf:"bytes,1,rep,name=Equips" json:"Equips,omitempty"`
}

func (m *EquipData) Reset()                    { *m = EquipData{} }
func (m *EquipData) String() string            { return proto.CompactTextString(m) }
func (*EquipData) ProtoMessage()               {}
func (*EquipData) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{1} }

func (m *EquipData) GetEquips() []*Equip {
	if m != nil {
		return m.Equips
	}
	return nil
}

type TargetEquip struct {
	EquipID string `protobuf:"bytes,1,opt,name=EquipID,proto3" json:"EquipID,omitempty"`
}

func (m *TargetEquip) Reset()                    { *m = TargetEquip{} }
func (m *TargetEquip) String() string            { return proto.CompactTextString(m) }
func (*TargetEquip) ProtoMessage()               {}
func (*TargetEquip) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{2} }

func (m *TargetEquip) GetEquipID() string {
	if m != nil {
		return m.EquipID
	}
	return ""
}

type EquipBackInfo struct {
	ObtainDayNum int32         `protobuf:"varint,1,opt,name=ObtainDayNum,proto3" json:"ObtainDayNum,omitempty"`
	ResType      ReturnResType `protobuf:"varint,2,opt,name=ResType,proto3,enum=pb.ReturnResType" json:"ResType,omitempty"`
	LosePro      int32         `protobuf:"varint,3,opt,name=LosePro,proto3" json:"LosePro,omitempty"`
	Price        int32         `protobuf:"varint,4,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (m *EquipBackInfo) Reset()                    { *m = EquipBackInfo{} }
func (m *EquipBackInfo) String() string            { return proto.CompactTextString(m) }
func (*EquipBackInfo) ProtoMessage()               {}
func (*EquipBackInfo) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{3} }

func (m *EquipBackInfo) GetObtainDayNum() int32 {
	if m != nil {
		return m.ObtainDayNum
	}
	return 0
}

func (m *EquipBackInfo) GetResType() ReturnResType {
	if m != nil {
		return m.ResType
	}
	return ReturnResType_ResTypeUnknow
}

func (m *EquipBackInfo) GetLosePro() int32 {
	if m != nil {
		return m.LosePro
	}
	return 0
}

func (m *EquipBackInfo) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type ReturnResData struct {
	ResType ReturnResType `protobuf:"varint,1,opt,name=ResType,proto3,enum=pb.ReturnResType" json:"ResType,omitempty"`
	ResNum  int32         `protobuf:"varint,2,opt,name=ResNum,proto3" json:"ResNum,omitempty"`
}

func (m *ReturnResData) Reset()                    { *m = ReturnResData{} }
func (m *ReturnResData) String() string            { return proto.CompactTextString(m) }
func (*ReturnResData) ProtoMessage()               {}
func (*ReturnResData) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{4} }

func (m *ReturnResData) GetResType() ReturnResType {
	if m != nil {
		return m.ResType
	}
	return ReturnResType_ResTypeUnknow
}

func (m *ReturnResData) GetResNum() int32 {
	if m != nil {
		return m.ResNum
	}
	return 0
}

func init() {
	proto.RegisterType((*Equip)(nil), "pb.Equip")
	proto.RegisterType((*EquipData)(nil), "pb.EquipData")
	proto.RegisterType((*TargetEquip)(nil), "pb.TargetEquip")
	proto.RegisterType((*EquipBackInfo)(nil), "pb.EquipBackInfo")
	proto.RegisterType((*ReturnResData)(nil), "pb.ReturnResData")
	proto.RegisterEnum("pb.ReturnResType", ReturnResType_name, ReturnResType_value)
}
func (m *Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EquipID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEquip(dAtA, i, uint64(len(m.EquipID)))
		i += copy(dAtA[i:], m.EquipID)
	}
	if m.OwnerCardID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.OwnerCardID))
	}
	return i, nil
}

func (m *EquipData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Equips) > 0 {
		for _, msg := range m.Equips {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEquip(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TargetEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetEquip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EquipID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEquip(dAtA, i, uint64(len(m.EquipID)))
		i += copy(dAtA[i:], m.EquipID)
	}
	return i, nil
}

func (m *EquipBackInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipBackInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ObtainDayNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.ObtainDayNum))
	}
	if m.ResType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.ResType))
	}
	if m.LosePro != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.LosePro))
	}
	if m.Price != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Price))
	}
	return i, nil
}

func (m *ReturnResData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnResData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.ResType))
	}
	if m.ResNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.ResNum))
	}
	return i, nil
}

func encodeVarintEquip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Equip) Size() (n int) {
	var l int
	_ = l
	l = len(m.EquipID)
	if l > 0 {
		n += 1 + l + sovEquip(uint64(l))
	}
	if m.OwnerCardID != 0 {
		n += 1 + sovEquip(uint64(m.OwnerCardID))
	}
	return n
}

func (m *EquipData) Size() (n int) {
	var l int
	_ = l
	if len(m.Equips) > 0 {
		for _, e := range m.Equips {
			l = e.Size()
			n += 1 + l + sovEquip(uint64(l))
		}
	}
	return n
}

func (m *TargetEquip) Size() (n int) {
	var l int
	_ = l
	l = len(m.EquipID)
	if l > 0 {
		n += 1 + l + sovEquip(uint64(l))
	}
	return n
}

func (m *EquipBackInfo) Size() (n int) {
	var l int
	_ = l
	if m.ObtainDayNum != 0 {
		n += 1 + sovEquip(uint64(m.ObtainDayNum))
	}
	if m.ResType != 0 {
		n += 1 + sovEquip(uint64(m.ResType))
	}
	if m.LosePro != 0 {
		n += 1 + sovEquip(uint64(m.LosePro))
	}
	if m.Price != 0 {
		n += 1 + sovEquip(uint64(m.Price))
	}
	return n
}

func (m *ReturnResData) Size() (n int) {
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovEquip(uint64(m.ResType))
	}
	if m.ResNum != 0 {
		n += 1 + sovEquip(uint64(m.ResNum))
	}
	return n
}

func sovEquip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEquip(x uint64) (n int) {
	return sovEquip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerCardID", wireType)
			}
			m.OwnerCardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerCardID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equips = append(m.Equips, &Equip{})
			if err := m.Equips[len(m.Equips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipBackInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipBackInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipBackInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObtainDayNum", wireType)
			}
			m.ObtainDayNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObtainDayNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (ReturnResType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LosePro", wireType)
			}
			m.LosePro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LosePro |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnResData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnResData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnResData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (ReturnResType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResNum", wireType)
			}
			m.ResNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEquip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEquip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEquip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEquip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquip   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("equip.proto", fileDescriptorEquip) }

var fileDescriptorEquip = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4e, 0xc2, 0x40,
	0x14, 0x86, 0x99, 0x22, 0x10, 0x5e, 0xc5, 0x94, 0x09, 0x9a, 0x59, 0x35, 0xb5, 0x1b, 0x89, 0x26,
	0x5d, 0xe0, 0x0d, 0xa0, 0x2e, 0x48, 0x8c, 0x90, 0x11, 0x0f, 0x30, 0xc5, 0xd1, 0x34, 0xc4, 0x99,
	0x3a, 0x9d, 0x86, 0x70, 0x0b, 0x97, 0x1e, 0xc9, 0xa5, 0x47, 0x30, 0x78, 0x11, 0xd3, 0x67, 0x6b,
	0xea, 0x8a, 0xdd, 0xfb, 0xbf, 0xf7, 0xfa, 0xff, 0x7f, 0x33, 0xe0, 0xca, 0xd7, 0x22, 0xcd, 0xa2,
	0xcc, 0x68, 0xab, 0xa9, 0x93, 0x25, 0xe1, 0x0c, 0x3a, 0x37, 0x25, 0xa2, 0x0c, 0x7a, 0x38, 0xcc,
	0x63, 0x46, 0x02, 0x32, 0xee, 0xf3, 0x5a, 0xd2, 0x00, 0xdc, 0xc5, 0x56, 0x49, 0x33, 0x13, 0xe6,
	0x71, 0x1e, 0x33, 0x27, 0x20, 0xe3, 0x01, 0x6f, 0xa2, 0x30, 0x82, 0x3e, 0x1e, 0xc7, 0xc2, 0x0a,
	0x7a, 0x0e, 0x5d, 0x14, 0x39, 0x23, 0x41, 0x7b, 0xec, 0x4e, 0xfa, 0x51, 0x96, 0x44, 0x48, 0x78,
	0xb5, 0x08, 0x2f, 0xc0, 0x5d, 0x09, 0xf3, 0x2c, 0xed, 0x81, 0xe8, 0xf0, 0x8d, 0xc0, 0x00, 0xe7,
	0xa9, 0x58, 0x6f, 0xe6, 0xea, 0x49, 0xd3, 0x10, 0x8e, 0x17, 0x89, 0x15, 0xa9, 0x8a, 0xc5, 0xee,
	0xae, 0x78, 0xc1, 0x0f, 0x3a, 0xfc, 0x1f, 0xa3, 0x57, 0xd0, 0xe3, 0x32, 0x5f, 0xed, 0x32, 0x89,
	0x65, 0x4f, 0x26, 0xc3, 0xb2, 0x02, 0x97, 0xb6, 0x30, 0xaa, 0x5a, 0xf0, 0xfa, 0xa2, 0x0c, 0xbf,
	0xd5, 0xb9, 0x5c, 0x1a, 0xcd, 0xda, 0xe8, 0x55, 0x4b, 0x3a, 0x82, 0xce, 0xd2, 0xa4, 0x6b, 0xc9,
	0x8e, 0x90, 0xff, 0x8a, 0x70, 0x05, 0x83, 0x3f, 0x27, 0xfc, 0xdf, 0x46, 0x1a, 0x39, 0x98, 0x76,
	0x06, 0x5d, 0x2e, 0xf3, 0xb2, 0xb8, 0x83, 0xa6, 0x95, 0xba, 0xbc, 0x6f, 0xb8, 0xe2, 0xe1, 0xb0,
	0x04, 0x38, 0x3e, 0xa8, 0x8d, 0xd2, 0x5b, 0xaf, 0x45, 0x4f, 0x61, 0x58, 0xfb, 0xc9, 0xac, 0xb0,
	0xc2, 0xa6, 0x5a, 0x79, 0x84, 0x32, 0x18, 0x55, 0x78, 0xa6, 0x95, 0x35, 0x69, 0x52, 0x94, 0x8b,
	0xdc, 0x73, 0xa6, 0xde, 0xc7, 0xde, 0x27, 0x9f, 0x7b, 0x9f, 0x7c, 0xed, 0x7d, 0xf2, 0xfe, 0xed,
	0xb7, 0x92, 0x2e, 0x3e, 0xfc, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x7a, 0x3d, 0x3d,
	0x07, 0x02, 0x00, 0x00,
}
