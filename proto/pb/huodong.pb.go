// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: huodong.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HuodongTypeEnum int32

const (
	HuodongTypeEnum_HUnknow         HuodongTypeEnum = 0
	HuodongTypeEnum_HSeasonPvp      HuodongTypeEnum = 1
	HuodongTypeEnum_HSpringExchange HuodongTypeEnum = 2
	HuodongTypeEnum_HSpringSkin     HuodongTypeEnum = 3
)

var HuodongTypeEnum_name = map[int32]string{
	0: "HUnknow",
	1: "HSeasonPvp",
	2: "HSpringExchange",
	3: "HSpringSkin",
}
var HuodongTypeEnum_value = map[string]int32{
	"HUnknow":         0,
	"HSeasonPvp":      1,
	"HSpringExchange": 2,
	"HSpringSkin":     3,
}

func (x HuodongTypeEnum) String() string {
	return proto.EnumName(HuodongTypeEnum_name, int32(x))
}
func (HuodongTypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{0} }

type HuodongEventType int32

const (
	HuodongEventType_HetUnknow  HuodongEventType = 0
	HuodongEventType_HetStart   HuodongEventType = 1
	HuodongEventType_HetStop    HuodongEventType = 2
	HuodongEventType_HetRefresh HuodongEventType = 3
)

var HuodongEventType_name = map[int32]string{
	0: "HetUnknow",
	1: "HetStart",
	2: "HetStop",
	3: "HetRefresh",
}
var HuodongEventType_value = map[string]int32{
	"HetUnknow":  0,
	"HetStart":   1,
	"HetStop":    2,
	"HetRefresh": 3,
}

func (x HuodongEventType) String() string {
	return proto.EnumName(HuodongEventType_name, int32(x))
}
func (HuodongEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{1} }

type HuodongData struct {
	Type               HuodongTypeEnum `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.HuodongTypeEnum" json:"Type,omitempty"`
	RemainTime         int32           `protobuf:"varint,2,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
	RemainExchangeTime int32           `protobuf:"varint,3,opt,name=RemainExchangeTime,proto3" json:"RemainExchangeTime,omitempty"`
}

func (m *HuodongData) Reset()                    { *m = HuodongData{} }
func (m *HuodongData) String() string            { return proto.CompactTextString(m) }
func (*HuodongData) ProtoMessage()               {}
func (*HuodongData) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{0} }

func (m *HuodongData) GetType() HuodongTypeEnum {
	if m != nil {
		return m.Type
	}
	return HuodongTypeEnum_HUnknow
}

func (m *HuodongData) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *HuodongData) GetRemainExchangeTime() int32 {
	if m != nil {
		return m.RemainExchangeTime
	}
	return 0
}

type TargetHuodong struct {
	Type HuodongTypeEnum `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.HuodongTypeEnum" json:"Type,omitempty"`
}

func (m *TargetHuodong) Reset()                    { *m = TargetHuodong{} }
func (m *TargetHuodong) String() string            { return proto.CompactTextString(m) }
func (*TargetHuodong) ProtoMessage()               {}
func (*TargetHuodong) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{1} }

func (m *TargetHuodong) GetType() HuodongTypeEnum {
	if m != nil {
		return m.Type
	}
	return HuodongTypeEnum_HUnknow
}

// switch HuodongTypeEnum {
// case HSpringExchange:
//   Data = SpringHuodong
// case HSpringSkin:
//   Data = SpringSkinHuodong
// }
type HuodongDetail struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *HuodongDetail) Reset()                    { *m = HuodongDetail{} }
func (m *HuodongDetail) String() string            { return proto.CompactTextString(m) }
func (*HuodongDetail) ProtoMessage()               {}
func (*HuodongDetail) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{2} }

func (m *HuodongDetail) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SpringExchangeData struct {
	GoodsID     int32 `protobuf:"varint,1,opt,name=GoodsID,proto3" json:"GoodsID,omitempty"`
	ExchangeCnt int32 `protobuf:"varint,2,opt,name=ExchangeCnt,proto3" json:"ExchangeCnt,omitempty"`
}

func (m *SpringExchangeData) Reset()                    { *m = SpringExchangeData{} }
func (m *SpringExchangeData) String() string            { return proto.CompactTextString(m) }
func (*SpringExchangeData) ProtoMessage()               {}
func (*SpringExchangeData) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{3} }

func (m *SpringExchangeData) GetGoodsID() int32 {
	if m != nil {
		return m.GoodsID
	}
	return 0
}

func (m *SpringExchangeData) GetExchangeCnt() int32 {
	if m != nil {
		return m.ExchangeCnt
	}
	return 0
}

type SpringHuodong struct {
	ExchangeDatas []*SpringExchangeData `protobuf:"bytes,1,rep,name=ExchangeDatas" json:"ExchangeDatas,omitempty"`
}

func (m *SpringHuodong) Reset()                    { *m = SpringHuodong{} }
func (m *SpringHuodong) String() string            { return proto.CompactTextString(m) }
func (*SpringHuodong) ProtoMessage()               {}
func (*SpringHuodong) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{4} }

func (m *SpringHuodong) GetExchangeDatas() []*SpringExchangeData {
	if m != nil {
		return m.ExchangeDatas
	}
	return nil
}

type SpringSkinHuodong struct {
	SkinIDs []string `protobuf:"bytes,1,rep,name=SkinIDs" json:"SkinIDs,omitempty"`
}

func (m *SpringSkinHuodong) Reset()                    { *m = SpringSkinHuodong{} }
func (m *SpringSkinHuodong) String() string            { return proto.CompactTextString(m) }
func (*SpringSkinHuodong) ProtoMessage()               {}
func (*SpringSkinHuodong) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{5} }

func (m *SpringSkinHuodong) GetSkinIDs() []string {
	if m != nil {
		return m.SkinIDs
	}
	return nil
}

type HuodongExchangeArg struct {
	// HuodongTypeEnum Type = 1;
	ActivityID int32 `protobuf:"varint,1,opt,name=ActivityID,proto3" json:"ActivityID,omitempty"`
	GoodsID    int32 `protobuf:"varint,2,opt,name=GoodsID,proto3" json:"GoodsID,omitempty"`
}

func (m *HuodongExchangeArg) Reset()                    { *m = HuodongExchangeArg{} }
func (m *HuodongExchangeArg) String() string            { return proto.CompactTextString(m) }
func (*HuodongExchangeArg) ProtoMessage()               {}
func (*HuodongExchangeArg) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{6} }

func (m *HuodongExchangeArg) GetActivityID() int32 {
	if m != nil {
		return m.ActivityID
	}
	return 0
}

func (m *HuodongExchangeArg) GetGoodsID() int32 {
	if m != nil {
		return m.GoodsID
	}
	return 0
}

// 除了宝箱，其他的读表
type HuodongExchangeReply struct {
	Treasure *OpenTreasureReply `protobuf:"bytes,1,opt,name=Treasure" json:"Treasure,omitempty"`
}

func (m *HuodongExchangeReply) Reset()                    { *m = HuodongExchangeReply{} }
func (m *HuodongExchangeReply) String() string            { return proto.CompactTextString(m) }
func (*HuodongExchangeReply) ProtoMessage()               {}
func (*HuodongExchangeReply) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{7} }

func (m *HuodongExchangeReply) GetTreasure() *OpenTreasureReply {
	if m != nil {
		return m.Treasure
	}
	return nil
}

type GetSpringSkinArg struct {
	SkinID string `protobuf:"bytes,1,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
}

func (m *GetSpringSkinArg) Reset()                    { *m = GetSpringSkinArg{} }
func (m *GetSpringSkinArg) String() string            { return proto.CompactTextString(m) }
func (*GetSpringSkinArg) ProtoMessage()               {}
func (*GetSpringSkinArg) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{8} }

func (m *GetSpringSkinArg) GetSkinID() string {
	if m != nil {
		return m.SkinID
	}
	return ""
}

type HuodongEvent struct {
	HdType HuodongTypeEnum  `protobuf:"varint,1,opt,name=HdType,proto3,enum=pb.HuodongTypeEnum" json:"HdType,omitempty"`
	Event  HuodongEventType `protobuf:"varint,2,opt,name=Event,proto3,enum=pb.HuodongEventType" json:"Event,omitempty"`
	Areas  []int32          `protobuf:"varint,3,rep,packed,name=Areas" json:"Areas,omitempty"`
}

func (m *HuodongEvent) Reset()                    { *m = HuodongEvent{} }
func (m *HuodongEvent) String() string            { return proto.CompactTextString(m) }
func (*HuodongEvent) ProtoMessage()               {}
func (*HuodongEvent) Descriptor() ([]byte, []int) { return fileDescriptorHuodong, []int{9} }

func (m *HuodongEvent) GetHdType() HuodongTypeEnum {
	if m != nil {
		return m.HdType
	}
	return HuodongTypeEnum_HUnknow
}

func (m *HuodongEvent) GetEvent() HuodongEventType {
	if m != nil {
		return m.Event
	}
	return HuodongEventType_HetUnknow
}

func (m *HuodongEvent) GetAreas() []int32 {
	if m != nil {
		return m.Areas
	}
	return nil
}

func init() {
	proto.RegisterType((*HuodongData)(nil), "pb.HuodongData")
	proto.RegisterType((*TargetHuodong)(nil), "pb.TargetHuodong")
	proto.RegisterType((*HuodongDetail)(nil), "pb.HuodongDetail")
	proto.RegisterType((*SpringExchangeData)(nil), "pb.SpringExchangeData")
	proto.RegisterType((*SpringHuodong)(nil), "pb.SpringHuodong")
	proto.RegisterType((*SpringSkinHuodong)(nil), "pb.SpringSkinHuodong")
	proto.RegisterType((*HuodongExchangeArg)(nil), "pb.HuodongExchangeArg")
	proto.RegisterType((*HuodongExchangeReply)(nil), "pb.HuodongExchangeReply")
	proto.RegisterType((*GetSpringSkinArg)(nil), "pb.GetSpringSkinArg")
	proto.RegisterType((*HuodongEvent)(nil), "pb.HuodongEvent")
	proto.RegisterEnum("pb.HuodongTypeEnum", HuodongTypeEnum_name, HuodongTypeEnum_value)
	proto.RegisterEnum("pb.HuodongEventType", HuodongEventType_name, HuodongEventType_value)
}
func (m *HuodongData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuodongData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.Type))
	}
	if m.RemainTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.RemainTime))
	}
	if m.RemainExchangeTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.RemainExchangeTime))
	}
	return i, nil
}

func (m *TargetHuodong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetHuodong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *HuodongDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuodongDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *SpringExchangeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringExchangeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GoodsID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.GoodsID))
	}
	if m.ExchangeCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.ExchangeCnt))
	}
	return i, nil
}

func (m *SpringHuodong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringHuodong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExchangeDatas) > 0 {
		for _, msg := range m.ExchangeDatas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHuodong(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SpringSkinHuodong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringSkinHuodong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SkinIDs) > 0 {
		for _, s := range m.SkinIDs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *HuodongExchangeArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuodongExchangeArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.ActivityID))
	}
	if m.GoodsID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.GoodsID))
	}
	return i, nil
}

func (m *HuodongExchangeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuodongExchangeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Treasure != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.Treasure.Size()))
		n1, err := m.Treasure.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetSpringSkinArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpringSkinArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SkinID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(len(m.SkinID)))
		i += copy(dAtA[i:], m.SkinID)
	}
	return i, nil
}

func (m *HuodongEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuodongEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HdType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.HdType))
	}
	if m.Event != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(m.Event))
	}
	if len(m.Areas) > 0 {
		dAtA3 := make([]byte, len(m.Areas)*10)
		var j2 int
		for _, num1 := range m.Areas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHuodong(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func encodeVarintHuodong(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HuodongData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHuodong(uint64(m.Type))
	}
	if m.RemainTime != 0 {
		n += 1 + sovHuodong(uint64(m.RemainTime))
	}
	if m.RemainExchangeTime != 0 {
		n += 1 + sovHuodong(uint64(m.RemainExchangeTime))
	}
	return n
}

func (m *TargetHuodong) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHuodong(uint64(m.Type))
	}
	return n
}

func (m *HuodongDetail) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovHuodong(uint64(l))
	}
	return n
}

func (m *SpringExchangeData) Size() (n int) {
	var l int
	_ = l
	if m.GoodsID != 0 {
		n += 1 + sovHuodong(uint64(m.GoodsID))
	}
	if m.ExchangeCnt != 0 {
		n += 1 + sovHuodong(uint64(m.ExchangeCnt))
	}
	return n
}

func (m *SpringHuodong) Size() (n int) {
	var l int
	_ = l
	if len(m.ExchangeDatas) > 0 {
		for _, e := range m.ExchangeDatas {
			l = e.Size()
			n += 1 + l + sovHuodong(uint64(l))
		}
	}
	return n
}

func (m *SpringSkinHuodong) Size() (n int) {
	var l int
	_ = l
	if len(m.SkinIDs) > 0 {
		for _, s := range m.SkinIDs {
			l = len(s)
			n += 1 + l + sovHuodong(uint64(l))
		}
	}
	return n
}

func (m *HuodongExchangeArg) Size() (n int) {
	var l int
	_ = l
	if m.ActivityID != 0 {
		n += 1 + sovHuodong(uint64(m.ActivityID))
	}
	if m.GoodsID != 0 {
		n += 1 + sovHuodong(uint64(m.GoodsID))
	}
	return n
}

func (m *HuodongExchangeReply) Size() (n int) {
	var l int
	_ = l
	if m.Treasure != nil {
		l = m.Treasure.Size()
		n += 1 + l + sovHuodong(uint64(l))
	}
	return n
}

func (m *GetSpringSkinArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.SkinID)
	if l > 0 {
		n += 1 + l + sovHuodong(uint64(l))
	}
	return n
}

func (m *HuodongEvent) Size() (n int) {
	var l int
	_ = l
	if m.HdType != 0 {
		n += 1 + sovHuodong(uint64(m.HdType))
	}
	if m.Event != 0 {
		n += 1 + sovHuodong(uint64(m.Event))
	}
	if len(m.Areas) > 0 {
		l = 0
		for _, e := range m.Areas {
			l += sovHuodong(uint64(e))
		}
		n += 1 + sovHuodong(uint64(l)) + l
	}
	return n
}

func sovHuodong(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHuodong(x uint64) (n int) {
	return sovHuodong(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HuodongData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuodongData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuodongData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (HuodongTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainExchangeTime", wireType)
			}
			m.RemainExchangeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainExchangeTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetHuodong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetHuodong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetHuodong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (HuodongTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuodongDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuodongDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuodongDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHuodong
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringExchangeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringExchangeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringExchangeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsID", wireType)
			}
			m.GoodsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeCnt", wireType)
			}
			m.ExchangeCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringHuodong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringHuodong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringHuodong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuodong
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeDatas = append(m.ExchangeDatas, &SpringExchangeData{})
			if err := m.ExchangeDatas[len(m.ExchangeDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringSkinHuodong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringSkinHuodong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringSkinHuodong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuodong
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkinIDs = append(m.SkinIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuodongExchangeArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuodongExchangeArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuodongExchangeArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			m.ActivityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsID", wireType)
			}
			m.GoodsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuodongExchangeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuodongExchangeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuodongExchangeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treasure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuodong
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Treasure == nil {
				m.Treasure = &OpenTreasureReply{}
			}
			if err := m.Treasure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpringSkinArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpringSkinArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpringSkinArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuodong
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkinID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuodongEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuodongEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuodongEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HdType", wireType)
			}
			m.HdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HdType |= (HuodongTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= (HuodongEventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHuodong
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Areas = append(m.Areas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHuodong
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHuodong
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHuodong
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Areas = append(m.Areas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Areas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuodong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuodong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHuodong(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHuodong
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHuodong
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHuodong
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHuodong
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHuodong(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHuodong = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHuodong   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("huodong.proto", fileDescriptorHuodong) }

var fileDescriptorHuodong = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x8e, 0xda, 0x3c,
	0x14, 0xc5, 0xc7, 0x64, 0x80, 0xe1, 0x86, 0x80, 0x3f, 0x0f, 0xdf, 0x28, 0xea, 0x02, 0x21, 0x77,
	0x51, 0x44, 0x55, 0xa4, 0xd2, 0x4d, 0x17, 0xdd, 0xd0, 0x32, 0x9a, 0x20, 0xf5, 0xcf, 0xc8, 0xa4,
	0x0f, 0x10, 0x06, 0x37, 0x44, 0x33, 0x38, 0x51, 0x62, 0x68, 0x59, 0x74, 0xdb, 0x67, 0xe8, 0x23,
	0x75, 0xd9, 0x47, 0xa8, 0xe8, 0x8b, 0x54, 0x76, 0x62, 0x26, 0xd0, 0x4a, 0xed, 0x8e, 0x7b, 0xfc,
	0xf3, 0xb9, 0xe7, 0xc8, 0x04, 0x9c, 0xe5, 0x3a, 0x5e, 0xc4, 0x22, 0x1c, 0x26, 0x69, 0x2c, 0x63,
	0x52, 0x49, 0xe6, 0x0f, 0x5a, 0x32, 0xe5, 0x41, 0xb6, 0x4e, 0x79, 0xae, 0xd1, 0x2f, 0x08, 0x6c,
	0x2f, 0xa7, 0x26, 0x81, 0x0c, 0xc8, 0x23, 0x38, 0xf5, 0xb7, 0x09, 0x77, 0x51, 0x0f, 0xf5, 0x5b,
	0xa3, 0xf3, 0x61, 0x32, 0x1f, 0x16, 0xc7, 0x4a, 0xbe, 0x14, 0xeb, 0x15, 0xd3, 0x00, 0xe9, 0x02,
	0x30, 0xbe, 0x0a, 0x22, 0xe1, 0x47, 0x2b, 0xee, 0x56, 0x7a, 0xa8, 0x5f, 0x65, 0x25, 0x85, 0x0c,
	0x81, 0xe4, 0xd3, 0xe5, 0xa7, 0x9b, 0x65, 0x20, 0x42, 0xae, 0x39, 0x4b, 0x73, 0x7f, 0x38, 0xa1,
	0xcf, 0xc1, 0xf1, 0x83, 0x34, 0xe4, 0xb2, 0x58, 0xf7, 0xcf, 0x49, 0xe8, 0x43, 0x70, 0x4c, 0x03,
	0x2e, 0x83, 0xe8, 0x8e, 0x10, 0x38, 0x55, 0x5d, 0xf4, 0xcd, 0x26, 0xd3, 0xbf, 0xe9, 0x35, 0x90,
	0x59, 0x92, 0x46, 0x22, 0x34, 0x4b, 0x75, 0x5b, 0x17, 0xea, 0x57, 0x71, 0xbc, 0xc8, 0xa6, 0x13,
	0x0d, 0x57, 0x99, 0x19, 0x49, 0x0f, 0x6c, 0x43, 0xbe, 0x12, 0xb2, 0xe8, 0x57, 0x96, 0xe8, 0x1b,
	0x70, 0x72, 0x47, 0x13, 0xf8, 0x05, 0x38, 0x65, 0xf3, 0xcc, 0x45, 0x3d, 0xab, 0x6f, 0x8f, 0x2e,
	0x54, 0xf2, 0xdf, 0x77, 0xb3, 0x43, 0x98, 0x3e, 0x81, 0xff, 0x72, 0x68, 0x76, 0x1b, 0x09, 0x63,
	0xe9, 0x42, 0x5d, 0x8d, 0xd3, 0x49, 0x6e, 0xd6, 0x60, 0x66, 0xa4, 0x6f, 0x81, 0x14, 0x90, 0xb1,
	0x19, 0xa7, 0xa1, 0x7a, 0x94, 0xf1, 0x8d, 0x8c, 0x36, 0x91, 0xdc, 0xee, 0x2b, 0x95, 0x94, 0x72,
	0xdf, 0xca, 0x41, 0x5f, 0x3a, 0x85, 0xce, 0x91, 0x1f, 0xe3, 0xc9, 0xdd, 0x96, 0x3c, 0x85, 0x33,
	0xbf, 0xf8, 0xc7, 0x68, 0x3f, 0x7b, 0xf4, 0xbf, 0xea, 0xf3, 0x2e, 0xe1, 0xc2, 0xe8, 0x1a, 0x64,
	0x7b, 0x8c, 0x0e, 0x00, 0x5f, 0x71, 0x79, 0x5f, 0x46, 0x05, 0xbb, 0x80, 0x5a, 0x9e, 0x5c, 0x9b,
	0x34, 0x58, 0x31, 0xd1, 0xcf, 0xd0, 0x34, 0x6b, 0x37, 0x5c, 0x48, 0xf2, 0x18, 0x6a, 0xde, 0xe2,
	0x6f, 0xcf, 0x5e, 0x20, 0x64, 0x00, 0x55, 0x7d, 0x4b, 0x77, 0x69, 0x8d, 0x3a, 0x25, 0x56, 0xeb,
	0x0a, 0x62, 0x39, 0x42, 0x3a, 0x50, 0x1d, 0xab, 0x80, 0xae, 0xd5, 0xb3, 0xfa, 0x55, 0x96, 0x0f,
	0x03, 0x1f, 0xda, 0x47, 0xe6, 0xc4, 0x86, 0xba, 0xf7, 0x5e, 0xdc, 0x8a, 0xf8, 0x23, 0x3e, 0x21,
	0x2d, 0x00, 0x6f, 0xc6, 0x83, 0x2c, 0x16, 0xd7, 0x9b, 0x04, 0x23, 0x72, 0x0e, 0x6d, 0xef, 0xf0,
	0x29, 0x71, 0x85, 0xb4, 0xc1, 0xf6, 0xee, 0xdb, 0x62, 0x6b, 0xf0, 0x1a, 0xf0, 0x71, 0x0c, 0xe2,
	0x40, 0xc3, 0xe3, 0x72, 0x6f, 0xdc, 0x84, 0x33, 0x8f, 0xcb, 0x99, 0x0c, 0x52, 0x89, 0x91, 0xde,
	0xa9, 0xa6, 0x38, 0xc1, 0x15, 0xbd, 0x93, 0x4b, 0xc6, 0x3f, 0xa4, 0x3c, 0x5b, 0x62, 0xeb, 0x25,
	0xfe, 0xb6, 0xeb, 0xa2, 0xef, 0xbb, 0x2e, 0xfa, 0xb1, 0xeb, 0xa2, 0xaf, 0x3f, 0xbb, 0x27, 0xf3,
	0x9a, 0xfe, 0x74, 0x9f, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xca, 0x0a, 0x4f, 0xa1, 0xdf, 0x03,
	0x00, 0x00,
}
