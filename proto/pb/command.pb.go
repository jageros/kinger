// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: command.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExchangeStatus int32

const (
	ExchangeStatus_UnKnowStatus    ExchangeStatus = 0
	ExchangeStatus_ExchangeSuccess ExchangeStatus = 1
	ExchangeStatus_NotEffective    ExchangeStatus = 2
	ExchangeStatus_Expired         ExchangeStatus = 3
)

var ExchangeStatus_name = map[int32]string{
	0: "UnKnowStatus",
	1: "ExchangeSuccess",
	2: "NotEffective",
	3: "Expired",
}
var ExchangeStatus_value = map[string]int32{
	"UnKnowStatus":    0,
	"ExchangeSuccess": 1,
	"NotEffective":    2,
	"Expired":         3,
}

func (x ExchangeStatus) String() string {
	return proto.EnumName(ExchangeStatus_name, int32(x))
}
func (ExchangeStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommand, []int{0} }

type GmCommand struct {
	Command string `protobuf:"bytes,1,opt,name=Command,proto3" json:"Command,omitempty"`
}

func (m *GmCommand) Reset()                    { *m = GmCommand{} }
func (m *GmCommand) String() string            { return proto.CompactTextString(m) }
func (*GmCommand) ProtoMessage()               {}
func (*GmCommand) Descriptor() ([]byte, []int) { return fileDescriptorCommand, []int{0} }

func (m *GmCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type ExchangeCodeArg struct {
	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *ExchangeCodeArg) Reset()                    { *m = ExchangeCodeArg{} }
func (m *ExchangeCodeArg) String() string            { return proto.CompactTextString(m) }
func (*ExchangeCodeArg) ProtoMessage()               {}
func (*ExchangeCodeArg) Descriptor() ([]byte, []int) { return fileDescriptorCommand, []int{1} }

func (m *ExchangeCodeArg) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ExchangeCodeReward struct {
	ExStatus ExchangeStatus `protobuf:"varint,1,opt,name=ExStatus,proto3,enum=pb.ExchangeStatus" json:"ExStatus,omitempty"`
	ExTime   string         `protobuf:"bytes,2,opt,name=ExTime,proto3" json:"ExTime,omitempty"`
	Rewards  *RewardList    `protobuf:"bytes,3,opt,name=Rewards" json:"Rewards,omitempty"`
}

func (m *ExchangeCodeReward) Reset()                    { *m = ExchangeCodeReward{} }
func (m *ExchangeCodeReward) String() string            { return proto.CompactTextString(m) }
func (*ExchangeCodeReward) ProtoMessage()               {}
func (*ExchangeCodeReward) Descriptor() ([]byte, []int) { return fileDescriptorCommand, []int{2} }

func (m *ExchangeCodeReward) GetExStatus() ExchangeStatus {
	if m != nil {
		return m.ExStatus
	}
	return ExchangeStatus_UnKnowStatus
}

func (m *ExchangeCodeReward) GetExTime() string {
	if m != nil {
		return m.ExTime
	}
	return ""
}

func (m *ExchangeCodeReward) GetRewards() *RewardList {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func init() {
	proto.RegisterType((*GmCommand)(nil), "pb.GmCommand")
	proto.RegisterType((*ExchangeCodeArg)(nil), "pb.ExchangeCodeArg")
	proto.RegisterType((*ExchangeCodeReward)(nil), "pb.ExchangeCodeReward")
	proto.RegisterEnum("pb.ExchangeStatus", ExchangeStatus_name, ExchangeStatus_value)
}
func (m *GmCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GmCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	return i, nil
}

func (m *ExchangeCodeArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeCodeArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *ExchangeCodeReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeCodeReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.ExStatus))
	}
	if len(m.ExTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.ExTime)))
		i += copy(dAtA[i:], m.ExTime)
	}
	if m.Rewards != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.Rewards.Size()))
		n1, err := m.Rewards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GmCommand) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *ExchangeCodeArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func (m *ExchangeCodeReward) Size() (n int) {
	var l int
	_ = l
	if m.ExStatus != 0 {
		n += 1 + sovCommand(uint64(m.ExStatus))
	}
	l = len(m.ExTime)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func sovCommand(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GmCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GmCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GmCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeCodeArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeCodeArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeCodeArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeCodeReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeCodeReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeCodeReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExStatus", wireType)
			}
			m.ExStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExStatus |= (ExchangeStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &RewardList{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommand(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommand = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("command.proto", fileDescriptorCommand) }

var fileDescriptorCommand = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0xcd,
	0x4d, 0xcc, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0x12, 0x28,
	0x4a, 0x2d, 0x4f, 0x2c, 0x4a, 0xc9, 0xc9, 0x2c, 0x2e, 0x81, 0x88, 0x2a, 0xa9, 0x72, 0x71, 0xba,
	0xe7, 0x3a, 0x43, 0x14, 0x0a, 0x49, 0x70, 0xb1, 0x43, 0x99, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x30, 0xae, 0x92, 0x2a, 0x17, 0xbf, 0x6b, 0x45, 0x72, 0x46, 0x62, 0x5e, 0x7a, 0xaa, 0x73,
	0x7e, 0x4a, 0xaa, 0x63, 0x51, 0xba, 0x90, 0x10, 0x17, 0x0b, 0x88, 0x09, 0x55, 0x09, 0x66, 0x2b,
	0xb5, 0x31, 0x72, 0x09, 0x21, 0xab, 0x0b, 0x02, 0x5b, 0x27, 0xa4, 0xc7, 0xc5, 0xe1, 0x5a, 0x11,
	0x5c, 0x92, 0x58, 0x52, 0x5a, 0x0c, 0x56, 0xce, 0x67, 0x24, 0xa4, 0x57, 0x90, 0xa4, 0x07, 0x53,
	0x09, 0x91, 0x09, 0x82, 0xab, 0x11, 0x12, 0xe3, 0x62, 0x73, 0xad, 0x08, 0xc9, 0xcc, 0x4d, 0x95,
	0x60, 0x02, 0x1b, 0x0e, 0xe5, 0x09, 0x69, 0x70, 0xb1, 0x43, 0x4c, 0x2c, 0x96, 0x60, 0x56, 0x60,
	0xd4, 0xe0, 0x36, 0xe2, 0x03, 0x19, 0x03, 0x11, 0xf2, 0xc9, 0x2c, 0x2e, 0x09, 0x82, 0x49, 0x6b,
	0x85, 0x71, 0xf1, 0xa1, 0x9a, 0x2e, 0x24, 0xc0, 0xc5, 0x13, 0x9a, 0xe7, 0x9d, 0x97, 0x5f, 0x0e,
	0xe1, 0x0b, 0x30, 0x08, 0x09, 0x23, 0xfc, 0x14, 0x5c, 0x9a, 0x9c, 0x9c, 0x5a, 0x5c, 0x2c, 0xc0,
	0x08, 0x52, 0xe6, 0x97, 0x5f, 0xe2, 0x9a, 0x96, 0x96, 0x9a, 0x5c, 0x92, 0x59, 0x96, 0x2a, 0xc0,
	0x24, 0xc4, 0xcd, 0xc5, 0xee, 0x5a, 0x51, 0x90, 0x59, 0x94, 0x9a, 0x22, 0xc0, 0xec, 0x24, 0x70,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7,
	0x90, 0xc4, 0x06, 0x0e, 0x47, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xb6, 0x28, 0x24,
	0x6e, 0x01, 0x00, 0x00,
}
