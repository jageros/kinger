// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outstatus.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// StatusID =
// vc     士族卡
// mvc    周卡
// 特权都是buff_ + 特权表的__id__
// buff_1 特权，开启对战宝箱可额外获得2张卡
// buff_2 特权，开启对战宝箱可额外获得5%金币
// buff_3 特权，获得对战宝箱上限额外提高1个
// buff_4 特权，优惠加速次数额外提高2次（加速劵）
// buff_5 特权，开启每日宝箱可额外获得10张卡
// buff_6 特权，解锁对战宝箱的所需时间减少5%
// buff_7 特权，对战金币，额外获得100%
// buff_8 特权，战斗胜利时，有10%几率额外获得一颗星
// buff_9 特权，战斗失败时，有10%几率不掉星
// buff_10 特权，对战胜利20%几率额外再获得一次对战宝箱（随机），只有1个空格宝箱不触发
// buff_11 特权，每日宝箱金币基础值提高50%（可翻倍）
type OutStatus struct {
	StatusID   string `protobuf:"bytes,1,opt,name=StatusID,proto3" json:"StatusID,omitempty"`
	RemainTime int32  `protobuf:"varint,2,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`
	BuffLevel  int32  `protobuf:"varint,3,opt,name=BuffLevel,proto3" json:"BuffLevel,omitempty"`
}

func (m *OutStatus) Reset()                    { *m = OutStatus{} }
func (m *OutStatus) String() string            { return proto.CompactTextString(m) }
func (*OutStatus) ProtoMessage()               {}
func (*OutStatus) Descriptor() ([]byte, []int) { return fileDescriptorOutstatus, []int{0} }

func (m *OutStatus) GetStatusID() string {
	if m != nil {
		return m.StatusID
	}
	return ""
}

func (m *OutStatus) GetRemainTime() int32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *OutStatus) GetBuffLevel() int32 {
	if m != nil {
		return m.BuffLevel
	}
	return 0
}

type TargetOutStatus struct {
	StatusID string `protobuf:"bytes,1,opt,name=StatusID,proto3" json:"StatusID,omitempty"`
}

func (m *TargetOutStatus) Reset()                    { *m = TargetOutStatus{} }
func (m *TargetOutStatus) String() string            { return proto.CompactTextString(m) }
func (*TargetOutStatus) ProtoMessage()               {}
func (*TargetOutStatus) Descriptor() ([]byte, []int) { return fileDescriptorOutstatus, []int{1} }

func (m *TargetOutStatus) GetStatusID() string {
	if m != nil {
		return m.StatusID
	}
	return ""
}

func init() {
	proto.RegisterType((*OutStatus)(nil), "pb.OutStatus")
	proto.RegisterType((*TargetOutStatus)(nil), "pb.TargetOutStatus")
}
func (m *OutStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StatusID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOutstatus(dAtA, i, uint64(len(m.StatusID)))
		i += copy(dAtA[i:], m.StatusID)
	}
	if m.RemainTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOutstatus(dAtA, i, uint64(m.RemainTime))
	}
	if m.BuffLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOutstatus(dAtA, i, uint64(m.BuffLevel))
	}
	return i, nil
}

func (m *TargetOutStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetOutStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StatusID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOutstatus(dAtA, i, uint64(len(m.StatusID)))
		i += copy(dAtA[i:], m.StatusID)
	}
	return i, nil
}

func encodeVarintOutstatus(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OutStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.StatusID)
	if l > 0 {
		n += 1 + l + sovOutstatus(uint64(l))
	}
	if m.RemainTime != 0 {
		n += 1 + sovOutstatus(uint64(m.RemainTime))
	}
	if m.BuffLevel != 0 {
		n += 1 + sovOutstatus(uint64(m.BuffLevel))
	}
	return n
}

func (m *TargetOutStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.StatusID)
	if l > 0 {
		n += 1 + l + sovOutstatus(uint64(l))
	}
	return n
}

func sovOutstatus(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOutstatus(x uint64) (n int) {
	return sovOutstatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutstatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutstatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutstatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutstatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffLevel", wireType)
			}
			m.BuffLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutstatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutstatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutstatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetOutStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutstatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetOutStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetOutStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutstatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutstatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutstatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutstatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutstatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutstatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutstatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutstatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOutstatus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOutstatus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOutstatus(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOutstatus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutstatus   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("outstatus.proto", fileDescriptorOutstatus) }

var fileDescriptorOutstatus = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x2f, 0x2d, 0x29,
	0x2e, 0x49, 0x2c, 0x29, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52,
	0x4a, 0xe5, 0xe2, 0xf4, 0x2f, 0x2d, 0x09, 0x06, 0x0b, 0x0b, 0x49, 0x71, 0x71, 0x40, 0x58, 0x9e,
	0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x70, 0xbe, 0x90, 0x1c, 0x17, 0x57, 0x50, 0x6a,
	0x6e, 0x62, 0x66, 0x5e, 0x48, 0x66, 0x6e, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x92,
	0x88, 0x90, 0x0c, 0x17, 0xa7, 0x53, 0x69, 0x5a, 0x9a, 0x4f, 0x6a, 0x59, 0x6a, 0x8e, 0x04, 0x33,
	0x58, 0x1a, 0x21, 0xa0, 0xa4, 0xcb, 0xc5, 0x1f, 0x92, 0x58, 0x94, 0x9e, 0x5a, 0x42, 0x94, 0x65,
	0x4e, 0x02, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c,
	0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0x27, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x79, 0xc8,
	0xf3, 0x1e, 0xc5, 0x00, 0x00, 0x00,
}
