// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wxgame.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WxInviteBattleResult_WxInviteResult int32

const (
	WxInviteBattleResult_OK      WxInviteBattleResult_WxInviteResult = 0
	WxInviteBattleResult_Timeout WxInviteBattleResult_WxInviteResult = 1
)

var WxInviteBattleResult_WxInviteResult_name = map[int32]string{
	0: "OK",
	1: "Timeout",
}
var WxInviteBattleResult_WxInviteResult_value = map[string]int32{
	"OK":      0,
	"Timeout": 1,
}

func (x WxInviteBattleResult_WxInviteResult) String() string {
	return proto.EnumName(WxInviteBattleResult_WxInviteResult_name, int32(x))
}
func (WxInviteBattleResult_WxInviteResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorWxgame, []int{1, 0}
}

type ReplyWxInviteBattleArg struct {
	Uid uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (m *ReplyWxInviteBattleArg) Reset()                    { *m = ReplyWxInviteBattleArg{} }
func (m *ReplyWxInviteBattleArg) String() string            { return proto.CompactTextString(m) }
func (*ReplyWxInviteBattleArg) ProtoMessage()               {}
func (*ReplyWxInviteBattleArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{0} }

func (m *ReplyWxInviteBattleArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type WxInviteBattleResult struct {
	Result WxInviteBattleResult_WxInviteResult `protobuf:"varint,1,opt,name=Result,proto3,enum=pb.WxInviteBattleResult_WxInviteResult" json:"Result,omitempty"`
}

func (m *WxInviteBattleResult) Reset()                    { *m = WxInviteBattleResult{} }
func (m *WxInviteBattleResult) String() string            { return proto.CompactTextString(m) }
func (*WxInviteBattleResult) ProtoMessage()               {}
func (*WxInviteBattleResult) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{1} }

func (m *WxInviteBattleResult) GetResult() WxInviteBattleResult_WxInviteResult {
	if m != nil {
		return m.Result
	}
	return WxInviteBattleResult_OK
}

type GetShareTreasureArg struct {
	Hid int32 `protobuf:"varint,1,opt,name=Hid,proto3" json:"Hid,omitempty"`
}

func (m *GetShareTreasureArg) Reset()                    { *m = GetShareTreasureArg{} }
func (m *GetShareTreasureArg) String() string            { return proto.CompactTextString(m) }
func (*GetShareTreasureArg) ProtoMessage()               {}
func (*GetShareTreasureArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{2} }

func (m *GetShareTreasureArg) GetHid() int32 {
	if m != nil {
		return m.Hid
	}
	return 0
}

type ShareTreasureArg struct {
	TreasureID uint32 `protobuf:"varint,1,opt,name=TreasureID,proto3" json:"TreasureID,omitempty"`
	WxGroupID  string `protobuf:"bytes,2,opt,name=WxGroupID,proto3" json:"WxGroupID,omitempty"`
}

func (m *ShareTreasureArg) Reset()                    { *m = ShareTreasureArg{} }
func (m *ShareTreasureArg) String() string            { return proto.CompactTextString(m) }
func (*ShareTreasureArg) ProtoMessage()               {}
func (*ShareTreasureArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{3} }

func (m *ShareTreasureArg) GetTreasureID() uint32 {
	if m != nil {
		return m.TreasureID
	}
	return 0
}

func (m *ShareTreasureArg) GetWxGroupID() string {
	if m != nil {
		return m.WxGroupID
	}
	return ""
}

type HelpShareTreasureArg struct {
	ShareUid   uint64 `protobuf:"varint,1,opt,name=ShareUid,proto3" json:"ShareUid,omitempty"`
	TreasureID uint32 `protobuf:"varint,2,opt,name=TreasureID,proto3" json:"TreasureID,omitempty"`
}

func (m *HelpShareTreasureArg) Reset()                    { *m = HelpShareTreasureArg{} }
func (m *HelpShareTreasureArg) String() string            { return proto.CompactTextString(m) }
func (*HelpShareTreasureArg) ProtoMessage()               {}
func (*HelpShareTreasureArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{4} }

func (m *HelpShareTreasureArg) GetShareUid() uint64 {
	if m != nil {
		return m.ShareUid
	}
	return 0
}

func (m *HelpShareTreasureArg) GetTreasureID() uint32 {
	if m != nil {
		return m.TreasureID
	}
	return 0
}

type TreasureBeHelp struct {
	TreasureID  uint32 `protobuf:"varint,1,opt,name=TreasureID,proto3" json:"TreasureID,omitempty"`
	OpenTimeout int32  `protobuf:"varint,2,opt,name=OpenTimeout,proto3" json:"OpenTimeout,omitempty"`
}

func (m *TreasureBeHelp) Reset()                    { *m = TreasureBeHelp{} }
func (m *TreasureBeHelp) String() string            { return proto.CompactTextString(m) }
func (*TreasureBeHelp) ProtoMessage()               {}
func (*TreasureBeHelp) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{5} }

func (m *TreasureBeHelp) GetTreasureID() uint32 {
	if m != nil {
		return m.TreasureID
	}
	return 0
}

func (m *TreasureBeHelp) GetOpenTimeout() int32 {
	if m != nil {
		return m.OpenTimeout
	}
	return 0
}

type BattleLoseBeHelp struct {
	AddStar int32 `protobuf:"varint,1,opt,name=AddStar,proto3" json:"AddStar,omitempty"`
}

func (m *BattleLoseBeHelp) Reset()                    { *m = BattleLoseBeHelp{} }
func (m *BattleLoseBeHelp) String() string            { return proto.CompactTextString(m) }
func (*BattleLoseBeHelp) ProtoMessage()               {}
func (*BattleLoseBeHelp) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{6} }

func (m *BattleLoseBeHelp) GetAddStar() int32 {
	if m != nil {
		return m.AddStar
	}
	return 0
}

type ShareBattleLoseArg struct {
	WxGroupID string `protobuf:"bytes,1,opt,name=WxGroupID,proto3" json:"WxGroupID,omitempty"`
}

func (m *ShareBattleLoseArg) Reset()                    { *m = ShareBattleLoseArg{} }
func (m *ShareBattleLoseArg) String() string            { return proto.CompactTextString(m) }
func (*ShareBattleLoseArg) ProtoMessage()               {}
func (*ShareBattleLoseArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{7} }

func (m *ShareBattleLoseArg) GetWxGroupID() string {
	if m != nil {
		return m.WxGroupID
	}
	return ""
}

type WxExamineState struct {
	IsExamined bool `protobuf:"varint,10,opt,name=IsExamined,proto3" json:"IsExamined,omitempty"`
}

func (m *WxExamineState) Reset()                    { *m = WxExamineState{} }
func (m *WxExamineState) String() string            { return proto.CompactTextString(m) }
func (*WxExamineState) ProtoMessage()               {}
func (*WxExamineState) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{8} }

func (m *WxExamineState) GetIsExamined() bool {
	if m != nil {
		return m.IsExamined
	}
	return false
}

type HelpShareBattleLoseArg struct {
	ShareUid uint64 `protobuf:"varint,1,opt,name=ShareUid,proto3" json:"ShareUid,omitempty"`
}

func (m *HelpShareBattleLoseArg) Reset()                    { *m = HelpShareBattleLoseArg{} }
func (m *HelpShareBattleLoseArg) String() string            { return proto.CompactTextString(m) }
func (*HelpShareBattleLoseArg) ProtoMessage()               {}
func (*HelpShareBattleLoseArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{9} }

func (m *HelpShareBattleLoseArg) GetShareUid() uint64 {
	if m != nil {
		return m.ShareUid
	}
	return 0
}

// switch ShareType {
// case 12:
// case 13:
// case 14:
//    Data = WatchShopFreeAdsArg;
// case 15:
//    Data = nothing
// case 16:
//    Data = TargetTreasure
// default:
//    Data = nothing
// }
type WxgameShareArg struct {
	ShareID   int32  `protobuf:"varint,1,opt,name=ShareID,proto3" json:"ShareID,omitempty"`
	ShareType int32  `protobuf:"varint,2,opt,name=ShareType,proto3" json:"ShareType,omitempty"`
	WxGroupID string `protobuf:"bytes,3,opt,name=WxGroupID,proto3" json:"WxGroupID,omitempty"`
	Data      []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *WxgameShareArg) Reset()                    { *m = WxgameShareArg{} }
func (m *WxgameShareArg) String() string            { return proto.CompactTextString(m) }
func (*WxgameShareArg) ProtoMessage()               {}
func (*WxgameShareArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{10} }

func (m *WxgameShareArg) GetShareID() int32 {
	if m != nil {
		return m.ShareID
	}
	return 0
}

func (m *WxgameShareArg) GetShareType() int32 {
	if m != nil {
		return m.ShareType
	}
	return 0
}

func (m *WxgameShareArg) GetWxGroupID() string {
	if m != nil {
		return m.WxGroupID
	}
	return ""
}

func (m *WxgameShareArg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// switch ShareType {
// case 9:
//    Data = TargetTreasure
// case 12:
// case 13:
// case 14:
//    Data = WatchShopFreeAdsArg;
// case 15:
//    Data = nothing
// case 16:
//    Data = TargetTreasure
// case 17:
//    Data = WxDailyShareArg
// default:
//    Data = nothing
// }
type ClickWxgameShareArg struct {
	ShareID   int32  `protobuf:"varint,1,opt,name=ShareID,proto3" json:"ShareID,omitempty"`
	ShareUid  uint64 `protobuf:"varint,2,opt,name=ShareUid,proto3" json:"ShareUid,omitempty"`
	ShareType int32  `protobuf:"varint,3,opt,name=ShareType,proto3" json:"ShareType,omitempty"`
	ShareTime int32  `protobuf:"varint,4,opt,name=ShareTime,proto3" json:"ShareTime,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ClickWxgameShareArg) Reset()                    { *m = ClickWxgameShareArg{} }
func (m *ClickWxgameShareArg) String() string            { return proto.CompactTextString(m) }
func (*ClickWxgameShareArg) ProtoMessage()               {}
func (*ClickWxgameShareArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{11} }

func (m *ClickWxgameShareArg) GetShareID() int32 {
	if m != nil {
		return m.ShareID
	}
	return 0
}

func (m *ClickWxgameShareArg) GetShareUid() uint64 {
	if m != nil {
		return m.ShareUid
	}
	return 0
}

func (m *ClickWxgameShareArg) GetShareType() int32 {
	if m != nil {
		return m.ShareType
	}
	return 0
}

func (m *ClickWxgameShareArg) GetShareTime() int32 {
	if m != nil {
		return m.ShareTime
	}
	return 0
}

func (m *ClickWxgameShareArg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WxDailyShareArg struct {
	PlayerName string `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
}

func (m *WxDailyShareArg) Reset()                    { *m = WxDailyShareArg{} }
func (m *WxDailyShareArg) String() string            { return proto.CompactTextString(m) }
func (*WxDailyShareArg) ProtoMessage()               {}
func (*WxDailyShareArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{12} }

func (m *WxDailyShareArg) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type CancelWxShareArg struct {
	ShareID   int32 `protobuf:"varint,1,opt,name=ShareID,proto3" json:"ShareID,omitempty"`
	ShareType int32 `protobuf:"varint,2,opt,name=ShareType,proto3" json:"ShareType,omitempty"`
}

func (m *CancelWxShareArg) Reset()                    { *m = CancelWxShareArg{} }
func (m *CancelWxShareArg) String() string            { return proto.CompactTextString(m) }
func (*CancelWxShareArg) ProtoMessage()               {}
func (*CancelWxShareArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{13} }

func (m *CancelWxShareArg) GetShareID() int32 {
	if m != nil {
		return m.ShareID
	}
	return 0
}

func (m *CancelWxShareArg) GetShareType() int32 {
	if m != nil {
		return m.ShareType
	}
	return 0
}

// switch ShareType {
// case 9:
//    Data = DailyTreasureShareInfo
// case 12:
// case 13:
// case 14:
//    Data = WatchShopFreeAdsArg
// case 15:
//    Data = Treasure
// case 16:
//    Data = WatchTreasureAddCardAdsReply
// case 17:
//    Data = WxDailyShareReply
// default:
//    Data = nothing
// }
type WxShareBeHelpArg struct {
	ShareType int32  `protobuf:"varint,1,opt,name=ShareType,proto3" json:"ShareType,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *WxShareBeHelpArg) Reset()                    { *m = WxShareBeHelpArg{} }
func (m *WxShareBeHelpArg) String() string            { return proto.CompactTextString(m) }
func (*WxShareBeHelpArg) ProtoMessage()               {}
func (*WxShareBeHelpArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{14} }

func (m *WxShareBeHelpArg) GetShareType() int32 {
	if m != nil {
		return m.ShareType
	}
	return 0
}

func (m *WxShareBeHelpArg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DailyShareReward struct {
	Jade    int32 `protobuf:"varint,1,opt,name=Jade,proto3" json:"Jade,omitempty"`
	Bowlder int32 `protobuf:"varint,2,opt,name=Bowlder,proto3" json:"Bowlder,omitempty"`
	Ticket  int32 `protobuf:"varint,3,opt,name=Ticket,proto3" json:"Ticket,omitempty"`
}

func (m *DailyShareReward) Reset()                    { *m = DailyShareReward{} }
func (m *DailyShareReward) String() string            { return proto.CompactTextString(m) }
func (*DailyShareReward) ProtoMessage()               {}
func (*DailyShareReward) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{15} }

func (m *DailyShareReward) GetJade() int32 {
	if m != nil {
		return m.Jade
	}
	return 0
}

func (m *DailyShareReward) GetBowlder() int32 {
	if m != nil {
		return m.Bowlder
	}
	return 0
}

func (m *DailyShareReward) GetTicket() int32 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

type WxDailyShareReply struct {
	PlayerName string `protobuf:"bytes,3,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
}

func (m *WxDailyShareReply) Reset()                    { *m = WxDailyShareReply{} }
func (m *WxDailyShareReply) String() string            { return proto.CompactTextString(m) }
func (*WxDailyShareReply) ProtoMessage()               {}
func (*WxDailyShareReply) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{16} }

func (m *WxDailyShareReply) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type DailyShareInfo struct {
	HelperUid     uint64 `protobuf:"varint,1,opt,name=HelperUid,proto3" json:"HelperUid,omitempty"`
	HelperHeadImg string `protobuf:"bytes,2,opt,name=HelperHeadImg,proto3" json:"HelperHeadImg,omitempty"`
	HelperName    string `protobuf:"bytes,3,opt,name=HelperName,proto3" json:"HelperName,omitempty"`
	RewardState   int32  `protobuf:"varint,4,opt,name=RewardState,proto3" json:"RewardState,omitempty"`
}

func (m *DailyShareInfo) Reset()                    { *m = DailyShareInfo{} }
func (m *DailyShareInfo) String() string            { return proto.CompactTextString(m) }
func (*DailyShareInfo) ProtoMessage()               {}
func (*DailyShareInfo) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{17} }

func (m *DailyShareInfo) GetHelperUid() uint64 {
	if m != nil {
		return m.HelperUid
	}
	return 0
}

func (m *DailyShareInfo) GetHelperHeadImg() string {
	if m != nil {
		return m.HelperHeadImg
	}
	return ""
}

func (m *DailyShareInfo) GetHelperName() string {
	if m != nil {
		return m.HelperName
	}
	return ""
}

func (m *DailyShareInfo) GetRewardState() int32 {
	if m != nil {
		return m.RewardState
	}
	return 0
}

type DailyShareReturnReward struct {
	PlayerName string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	Gold       int32  `protobuf:"varint,2,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (m *DailyShareReturnReward) Reset()                    { *m = DailyShareReturnReward{} }
func (m *DailyShareReturnReward) String() string            { return proto.CompactTextString(m) }
func (*DailyShareReturnReward) ProtoMessage()               {}
func (*DailyShareReturnReward) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{18} }

func (m *DailyShareReturnReward) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *DailyShareReturnReward) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type G2GReplyWxInviteBattleArg struct {
	InviteUid uint64       `protobuf:"varint,1,opt,name=InviteUid,proto3" json:"InviteUid,omitempty"`
	BeInviter *FighterData `protobuf:"bytes,2,opt,name=BeInviter" json:"BeInviter,omitempty"`
}

func (m *G2GReplyWxInviteBattleArg) Reset()                    { *m = G2GReplyWxInviteBattleArg{} }
func (m *G2GReplyWxInviteBattleArg) String() string            { return proto.CompactTextString(m) }
func (*G2GReplyWxInviteBattleArg) ProtoMessage()               {}
func (*G2GReplyWxInviteBattleArg) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{19} }

func (m *G2GReplyWxInviteBattleArg) GetInviteUid() uint64 {
	if m != nil {
		return m.InviteUid
	}
	return 0
}

func (m *G2GReplyWxInviteBattleArg) GetBeInviter() *FighterData {
	if m != nil {
		return m.BeInviter
	}
	return nil
}

type GWxDailyShare struct {
	Uid     uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	HeadImg string `protobuf:"bytes,2,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *GWxDailyShare) Reset()                    { *m = GWxDailyShare{} }
func (m *GWxDailyShare) String() string            { return proto.CompactTextString(m) }
func (*GWxDailyShare) ProtoMessage()               {}
func (*GWxDailyShare) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{20} }

func (m *GWxDailyShare) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GWxDailyShare) GetHeadImg() string {
	if m != nil {
		return m.HeadImg
	}
	return ""
}

func (m *GWxDailyShare) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GWxDailyTreasureShare struct {
	HelperUid       uint64 `protobuf:"varint,1,opt,name=HelperUid,proto3" json:"HelperUid,omitempty"`
	HelperHeadImg   string `protobuf:"bytes,2,opt,name=HelperHeadImg,proto3" json:"HelperHeadImg,omitempty"`
	HelperHeadFrame string `protobuf:"bytes,3,opt,name=HelperHeadFrame,proto3" json:"HelperHeadFrame,omitempty"`
	HelperName      string `protobuf:"bytes,4,opt,name=HelperName,proto3" json:"HelperName,omitempty"`
	TreasureID      uint32 `protobuf:"varint,5,opt,name=TreasureID,proto3" json:"TreasureID,omitempty"`
}

func (m *GWxDailyTreasureShare) Reset()                    { *m = GWxDailyTreasureShare{} }
func (m *GWxDailyTreasureShare) String() string            { return proto.CompactTextString(m) }
func (*GWxDailyTreasureShare) ProtoMessage()               {}
func (*GWxDailyTreasureShare) Descriptor() ([]byte, []int) { return fileDescriptorWxgame, []int{21} }

func (m *GWxDailyTreasureShare) GetHelperUid() uint64 {
	if m != nil {
		return m.HelperUid
	}
	return 0
}

func (m *GWxDailyTreasureShare) GetHelperHeadImg() string {
	if m != nil {
		return m.HelperHeadImg
	}
	return ""
}

func (m *GWxDailyTreasureShare) GetHelperHeadFrame() string {
	if m != nil {
		return m.HelperHeadFrame
	}
	return ""
}

func (m *GWxDailyTreasureShare) GetHelperName() string {
	if m != nil {
		return m.HelperName
	}
	return ""
}

func (m *GWxDailyTreasureShare) GetTreasureID() uint32 {
	if m != nil {
		return m.TreasureID
	}
	return 0
}

func init() {
	proto.RegisterType((*ReplyWxInviteBattleArg)(nil), "pb.ReplyWxInviteBattleArg")
	proto.RegisterType((*WxInviteBattleResult)(nil), "pb.WxInviteBattleResult")
	proto.RegisterType((*GetShareTreasureArg)(nil), "pb.GetShareTreasureArg")
	proto.RegisterType((*ShareTreasureArg)(nil), "pb.ShareTreasureArg")
	proto.RegisterType((*HelpShareTreasureArg)(nil), "pb.HelpShareTreasureArg")
	proto.RegisterType((*TreasureBeHelp)(nil), "pb.TreasureBeHelp")
	proto.RegisterType((*BattleLoseBeHelp)(nil), "pb.BattleLoseBeHelp")
	proto.RegisterType((*ShareBattleLoseArg)(nil), "pb.ShareBattleLoseArg")
	proto.RegisterType((*WxExamineState)(nil), "pb.WxExamineState")
	proto.RegisterType((*HelpShareBattleLoseArg)(nil), "pb.HelpShareBattleLoseArg")
	proto.RegisterType((*WxgameShareArg)(nil), "pb.WxgameShareArg")
	proto.RegisterType((*ClickWxgameShareArg)(nil), "pb.ClickWxgameShareArg")
	proto.RegisterType((*WxDailyShareArg)(nil), "pb.WxDailyShareArg")
	proto.RegisterType((*CancelWxShareArg)(nil), "pb.CancelWxShareArg")
	proto.RegisterType((*WxShareBeHelpArg)(nil), "pb.WxShareBeHelpArg")
	proto.RegisterType((*DailyShareReward)(nil), "pb.DailyShareReward")
	proto.RegisterType((*WxDailyShareReply)(nil), "pb.WxDailyShareReply")
	proto.RegisterType((*DailyShareInfo)(nil), "pb.DailyShareInfo")
	proto.RegisterType((*DailyShareReturnReward)(nil), "pb.DailyShareReturnReward")
	proto.RegisterType((*G2GReplyWxInviteBattleArg)(nil), "pb.G2GReplyWxInviteBattleArg")
	proto.RegisterType((*GWxDailyShare)(nil), "pb.GWxDailyShare")
	proto.RegisterType((*GWxDailyTreasureShare)(nil), "pb.GWxDailyTreasureShare")
	proto.RegisterEnum("pb.WxInviteBattleResult_WxInviteResult", WxInviteBattleResult_WxInviteResult_name, WxInviteBattleResult_WxInviteResult_value)
}
func (m *ReplyWxInviteBattleArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyWxInviteBattleArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *WxInviteBattleResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxInviteBattleResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *GetShareTreasureArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShareTreasureArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.Hid))
	}
	return i, nil
}

func (m *ShareTreasureArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareTreasureArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TreasureID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.TreasureID))
	}
	if len(m.WxGroupID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.WxGroupID)))
		i += copy(dAtA[i:], m.WxGroupID)
	}
	return i, nil
}

func (m *HelpShareTreasureArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelpShareTreasureArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShareUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareUid))
	}
	if m.TreasureID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.TreasureID))
	}
	return i, nil
}

func (m *TreasureBeHelp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreasureBeHelp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TreasureID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.TreasureID))
	}
	if m.OpenTimeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.OpenTimeout))
	}
	return i, nil
}

func (m *BattleLoseBeHelp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleLoseBeHelp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddStar != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.AddStar))
	}
	return i, nil
}

func (m *ShareBattleLoseArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareBattleLoseArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WxGroupID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.WxGroupID)))
		i += copy(dAtA[i:], m.WxGroupID)
	}
	return i, nil
}

func (m *WxExamineState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxExamineState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsExamined {
		dAtA[i] = 0x50
		i++
		if m.IsExamined {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HelpShareBattleLoseArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelpShareBattleLoseArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShareUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareUid))
	}
	return i, nil
}

func (m *WxgameShareArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxgameShareArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShareID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareID))
	}
	if m.ShareType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareType))
	}
	if len(m.WxGroupID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.WxGroupID)))
		i += copy(dAtA[i:], m.WxGroupID)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ClickWxgameShareArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickWxgameShareArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShareID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareID))
	}
	if m.ShareUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareUid))
	}
	if m.ShareType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareType))
	}
	if m.ShareTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareTime))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *WxDailyShareArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxDailyShareArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *CancelWxShareArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelWxShareArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShareID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareID))
	}
	if m.ShareType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareType))
	}
	return i, nil
}

func (m *WxShareBeHelpArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxShareBeHelpArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShareType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.ShareType))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *DailyShareReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyShareReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Jade != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.Jade))
	}
	if m.Bowlder != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.Bowlder))
	}
	if m.Ticket != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.Ticket))
	}
	return i, nil
}

func (m *WxDailyShareReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxDailyShareReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *DailyShareInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyShareInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HelperUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.HelperUid))
	}
	if len(m.HelperHeadImg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.HelperHeadImg)))
		i += copy(dAtA[i:], m.HelperHeadImg)
	}
	if len(m.HelperName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.HelperName)))
		i += copy(dAtA[i:], m.HelperName)
	}
	if m.RewardState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.RewardState))
	}
	return i, nil
}

func (m *DailyShareReturnReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyShareReturnReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	if m.Gold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func (m *G2GReplyWxInviteBattleArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G2GReplyWxInviteBattleArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InviteUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.InviteUid))
	}
	if m.BeInviter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.BeInviter.Size()))
		n1, err := m.BeInviter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GWxDailyShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GWxDailyShare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.Uid))
	}
	if len(m.HeadImg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.HeadImg)))
		i += copy(dAtA[i:], m.HeadImg)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GWxDailyTreasureShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GWxDailyTreasureShare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HelperUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.HelperUid))
	}
	if len(m.HelperHeadImg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.HelperHeadImg)))
		i += copy(dAtA[i:], m.HelperHeadImg)
	}
	if len(m.HelperHeadFrame) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.HelperHeadFrame)))
		i += copy(dAtA[i:], m.HelperHeadFrame)
	}
	if len(m.HelperName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(len(m.HelperName)))
		i += copy(dAtA[i:], m.HelperName)
	}
	if m.TreasureID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWxgame(dAtA, i, uint64(m.TreasureID))
	}
	return i, nil
}

func encodeVarintWxgame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReplyWxInviteBattleArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovWxgame(uint64(m.Uid))
	}
	return n
}

func (m *WxInviteBattleResult) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovWxgame(uint64(m.Result))
	}
	return n
}

func (m *GetShareTreasureArg) Size() (n int) {
	var l int
	_ = l
	if m.Hid != 0 {
		n += 1 + sovWxgame(uint64(m.Hid))
	}
	return n
}

func (m *ShareTreasureArg) Size() (n int) {
	var l int
	_ = l
	if m.TreasureID != 0 {
		n += 1 + sovWxgame(uint64(m.TreasureID))
	}
	l = len(m.WxGroupID)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *HelpShareTreasureArg) Size() (n int) {
	var l int
	_ = l
	if m.ShareUid != 0 {
		n += 1 + sovWxgame(uint64(m.ShareUid))
	}
	if m.TreasureID != 0 {
		n += 1 + sovWxgame(uint64(m.TreasureID))
	}
	return n
}

func (m *TreasureBeHelp) Size() (n int) {
	var l int
	_ = l
	if m.TreasureID != 0 {
		n += 1 + sovWxgame(uint64(m.TreasureID))
	}
	if m.OpenTimeout != 0 {
		n += 1 + sovWxgame(uint64(m.OpenTimeout))
	}
	return n
}

func (m *BattleLoseBeHelp) Size() (n int) {
	var l int
	_ = l
	if m.AddStar != 0 {
		n += 1 + sovWxgame(uint64(m.AddStar))
	}
	return n
}

func (m *ShareBattleLoseArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.WxGroupID)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *WxExamineState) Size() (n int) {
	var l int
	_ = l
	if m.IsExamined {
		n += 2
	}
	return n
}

func (m *HelpShareBattleLoseArg) Size() (n int) {
	var l int
	_ = l
	if m.ShareUid != 0 {
		n += 1 + sovWxgame(uint64(m.ShareUid))
	}
	return n
}

func (m *WxgameShareArg) Size() (n int) {
	var l int
	_ = l
	if m.ShareID != 0 {
		n += 1 + sovWxgame(uint64(m.ShareID))
	}
	if m.ShareType != 0 {
		n += 1 + sovWxgame(uint64(m.ShareType))
	}
	l = len(m.WxGroupID)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *ClickWxgameShareArg) Size() (n int) {
	var l int
	_ = l
	if m.ShareID != 0 {
		n += 1 + sovWxgame(uint64(m.ShareID))
	}
	if m.ShareUid != 0 {
		n += 1 + sovWxgame(uint64(m.ShareUid))
	}
	if m.ShareType != 0 {
		n += 1 + sovWxgame(uint64(m.ShareType))
	}
	if m.ShareTime != 0 {
		n += 1 + sovWxgame(uint64(m.ShareTime))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *WxDailyShareArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *CancelWxShareArg) Size() (n int) {
	var l int
	_ = l
	if m.ShareID != 0 {
		n += 1 + sovWxgame(uint64(m.ShareID))
	}
	if m.ShareType != 0 {
		n += 1 + sovWxgame(uint64(m.ShareType))
	}
	return n
}

func (m *WxShareBeHelpArg) Size() (n int) {
	var l int
	_ = l
	if m.ShareType != 0 {
		n += 1 + sovWxgame(uint64(m.ShareType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *DailyShareReward) Size() (n int) {
	var l int
	_ = l
	if m.Jade != 0 {
		n += 1 + sovWxgame(uint64(m.Jade))
	}
	if m.Bowlder != 0 {
		n += 1 + sovWxgame(uint64(m.Bowlder))
	}
	if m.Ticket != 0 {
		n += 1 + sovWxgame(uint64(m.Ticket))
	}
	return n
}

func (m *WxDailyShareReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *DailyShareInfo) Size() (n int) {
	var l int
	_ = l
	if m.HelperUid != 0 {
		n += 1 + sovWxgame(uint64(m.HelperUid))
	}
	l = len(m.HelperHeadImg)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	l = len(m.HelperName)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	if m.RewardState != 0 {
		n += 1 + sovWxgame(uint64(m.RewardState))
	}
	return n
}

func (m *DailyShareReturnReward) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	if m.Gold != 0 {
		n += 1 + sovWxgame(uint64(m.Gold))
	}
	return n
}

func (m *G2GReplyWxInviteBattleArg) Size() (n int) {
	var l int
	_ = l
	if m.InviteUid != 0 {
		n += 1 + sovWxgame(uint64(m.InviteUid))
	}
	if m.BeInviter != nil {
		l = m.BeInviter.Size()
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *GWxDailyShare) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovWxgame(uint64(m.Uid))
	}
	l = len(m.HeadImg)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	return n
}

func (m *GWxDailyTreasureShare) Size() (n int) {
	var l int
	_ = l
	if m.HelperUid != 0 {
		n += 1 + sovWxgame(uint64(m.HelperUid))
	}
	l = len(m.HelperHeadImg)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	l = len(m.HelperHeadFrame)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	l = len(m.HelperName)
	if l > 0 {
		n += 1 + l + sovWxgame(uint64(l))
	}
	if m.TreasureID != 0 {
		n += 1 + sovWxgame(uint64(m.TreasureID))
	}
	return n
}

func sovWxgame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWxgame(x uint64) (n int) {
	return sovWxgame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplyWxInviteBattleArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyWxInviteBattleArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyWxInviteBattleArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxInviteBattleResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxInviteBattleResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxInviteBattleResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (WxInviteBattleResult_WxInviteResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShareTreasureArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShareTreasureArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShareTreasureArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hid", wireType)
			}
			m.Hid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareTreasureArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareTreasureArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareTreasureArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasureID", wireType)
			}
			m.TreasureID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreasureID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WxGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WxGroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelpShareTreasureArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelpShareTreasureArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelpShareTreasureArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareUid", wireType)
			}
			m.ShareUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasureID", wireType)
			}
			m.TreasureID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreasureID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreasureBeHelp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureBeHelp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureBeHelp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasureID", wireType)
			}
			m.TreasureID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreasureID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTimeout", wireType)
			}
			m.OpenTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenTimeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleLoseBeHelp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleLoseBeHelp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleLoseBeHelp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddStar", wireType)
			}
			m.AddStar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddStar |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareBattleLoseArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareBattleLoseArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareBattleLoseArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WxGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WxGroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxExamineState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxExamineState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxExamineState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExamined", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExamined = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelpShareBattleLoseArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelpShareBattleLoseArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelpShareBattleLoseArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareUid", wireType)
			}
			m.ShareUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxgameShareArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxgameShareArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxgameShareArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareID", wireType)
			}
			m.ShareID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareType", wireType)
			}
			m.ShareType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WxGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WxGroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickWxgameShareArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickWxgameShareArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickWxgameShareArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareID", wireType)
			}
			m.ShareID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareUid", wireType)
			}
			m.ShareUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareType", wireType)
			}
			m.ShareType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareTime", wireType)
			}
			m.ShareTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxDailyShareArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxDailyShareArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxDailyShareArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelWxShareArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelWxShareArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelWxShareArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareID", wireType)
			}
			m.ShareID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareType", wireType)
			}
			m.ShareType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxShareBeHelpArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxShareBeHelpArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxShareBeHelpArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareType", wireType)
			}
			m.ShareType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyShareReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyShareReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyShareReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jade", wireType)
			}
			m.Jade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bowlder", wireType)
			}
			m.Bowlder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bowlder |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxDailyShareReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxDailyShareReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxDailyShareReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyShareInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyShareInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyShareInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperUid", wireType)
			}
			m.HelperUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelperUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperHeadImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperHeadImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardState", wireType)
			}
			m.RewardState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyShareReturnReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyShareReturnReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyShareReturnReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G2GReplyWxInviteBattleArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G2GReplyWxInviteBattleArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G2GReplyWxInviteBattleArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUid", wireType)
			}
			m.InviteUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeInviter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeInviter == nil {
				m.BeInviter = &FighterData{}
			}
			if err := m.BeInviter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GWxDailyShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GWxDailyShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GWxDailyShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GWxDailyTreasureShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GWxDailyTreasureShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GWxDailyTreasureShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperUid", wireType)
			}
			m.HelperUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelperUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperHeadImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperHeadImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperHeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperHeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWxgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasureID", wireType)
			}
			m.TreasureID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreasureID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWxgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWxgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWxgame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWxgame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWxgame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWxgame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWxgame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWxgame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWxgame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWxgame   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("wxgame.proto", fileDescriptorWxgame) }

var fileDescriptorWxgame = []byte{
	// 740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0x66, 0xfa, 0x07, 0x3d, 0x40, 0x59, 0x17, 0x6c, 0x2a, 0x21, 0x4d, 0x33, 0xd1, 0xd0, 0x18,
	0x25, 0x5a, 0xbc, 0x37, 0x94, 0x4a, 0x29, 0x12, 0x21, 0x03, 0xa6, 0xde, 0x4e, 0xd9, 0xb1, 0x6c,
	0xd8, 0x76, 0x37, 0xd3, 0xa9, 0xb4, 0x5e, 0xf8, 0x18, 0xc6, 0xc4, 0xe7, 0x31, 0xf1, 0xd2, 0x47,
	0x30, 0xf8, 0x22, 0x66, 0x66, 0x67, 0xbb, 0xb3, 0x5b, 0xfc, 0x49, 0xf4, 0xee, 0x9c, 0x6f, 0xcf,
	0x9c, 0xf3, 0x7d, 0xdf, 0x99, 0x4e, 0x61, 0xe5, 0x7a, 0xd2, 0xa7, 0x03, 0xb6, 0x13, 0x70, 0x5f,
	0xf8, 0x76, 0x26, 0xe8, 0x6d, 0xae, 0xf4, 0xa8, 0x10, 0x9e, 0x46, 0xf0, 0x43, 0x28, 0x13, 0x16,
	0x78, 0xd3, 0xee, 0xa4, 0x33, 0x7c, 0xe7, 0x0a, 0xd6, 0x54, 0x1f, 0xf7, 0x78, 0xdf, 0xb6, 0x20,
	0xfb, 0xda, 0x75, 0x2a, 0xa8, 0x86, 0xea, 0x39, 0x22, 0x43, 0xfc, 0x01, 0x36, 0x92, 0x65, 0x84,
	0x8d, 0xc6, 0x9e, 0xb0, 0x9f, 0x43, 0x21, 0x8c, 0x54, 0x71, 0xa9, 0xb1, 0xbd, 0x13, 0xf4, 0x76,
	0x6e, 0xab, 0x9c, 0x81, 0x61, 0x4a, 0xf4, 0x31, 0xfc, 0x00, 0x4a, 0xc9, 0x2f, 0x76, 0x01, 0x32,
	0x27, 0x2f, 0xad, 0x05, 0x7b, 0x19, 0x16, 0xcf, 0xdd, 0x01, 0xf3, 0xc7, 0xc2, 0x42, 0x78, 0x1b,
	0xd6, 0xdb, 0x4c, 0x9c, 0x5d, 0x52, 0xce, 0xce, 0x39, 0xa3, 0xa3, 0x31, 0x8f, 0x88, 0x1e, 0x6a,
	0xa2, 0x79, 0x22, 0x43, 0x7c, 0x0a, 0xd6, 0x5c, 0x55, 0x15, 0x20, 0x4a, 0x3b, 0x2d, 0x55, 0xbc,
	0x4a, 0x0c, 0xc4, 0xde, 0x82, 0x62, 0x77, 0xd2, 0xe6, 0xfe, 0x38, 0xe8, 0xb4, 0x2a, 0x99, 0x1a,
	0xaa, 0x17, 0x49, 0x0c, 0x60, 0x02, 0x1b, 0x87, 0xcc, 0x0b, 0xe6, 0xba, 0x6e, 0xc2, 0x92, 0xc2,
	0x62, 0xa7, 0x66, 0x79, 0x6a, 0x62, 0x26, 0x3d, 0x11, 0x13, 0x28, 0x45, 0x59, 0x93, 0xc9, 0xee,
	0x7f, 0xe4, 0x58, 0x83, 0xe5, 0x93, 0x80, 0x0d, 0xb5, 0x23, 0xaa, 0x65, 0x9e, 0x98, 0x10, 0x7e,
	0x04, 0x56, 0x68, 0xf8, 0xb1, 0x3f, 0x8a, 0xba, 0x56, 0x60, 0x71, 0xcf, 0x71, 0xce, 0x04, 0xe5,
	0xda, 0xa3, 0x28, 0xc5, 0x0d, 0xb0, 0x15, 0xdb, 0xf8, 0x88, 0xd4, 0x94, 0x70, 0x02, 0xa5, 0x9d,
	0x78, 0x22, 0x77, 0xf5, 0x62, 0x42, 0x07, 0xee, 0x90, 0x9d, 0x09, 0x2a, 0x98, 0x64, 0xdd, 0x19,
	0x69, 0xc4, 0xa9, 0x40, 0x0d, 0xd5, 0x97, 0x88, 0x81, 0xe0, 0x67, 0x50, 0x9e, 0x79, 0x97, 0x9c,
	0xf4, 0x1b, 0xf7, 0xf0, 0x7b, 0x39, 0x47, 0x5e, 0x5d, 0x85, 0xc8, 0xea, 0x0a, 0x2c, 0xaa, 0x58,
	0xb3, 0xca, 0x93, 0x28, 0x95, 0x8c, 0xc3, 0xcd, 0x4c, 0x03, 0xa6, 0x5d, 0x89, 0x81, 0xa4, 0x9e,
	0x6c, 0x4a, 0x8f, 0x6d, 0x43, 0xae, 0x45, 0x05, 0xad, 0xe4, 0x6a, 0xa8, 0xbe, 0x42, 0x54, 0x8c,
	0x3f, 0x23, 0x58, 0xdf, 0xf7, 0xdc, 0x8b, 0xab, 0xbf, 0x66, 0x60, 0x2a, 0xc9, 0xa4, 0xee, 0x41,
	0x82, 0x5d, 0xf6, 0x16, 0x76, 0x61, 0xe2, 0x0e, 0x98, 0x22, 0x31, 0xfb, 0xea, 0x0e, 0xd8, 0x8c,
	0x5d, 0xde, 0x60, 0xf7, 0x14, 0xd6, 0xba, 0x93, 0x16, 0x75, 0xbd, 0xe9, 0x8c, 0x58, 0x15, 0xe0,
	0xd4, 0xa3, 0x53, 0xc6, 0x5f, 0xd1, 0x01, 0xd3, 0xb7, 0xd7, 0x40, 0xf0, 0x11, 0x58, 0xfb, 0x74,
	0x78, 0xc1, 0xbc, 0xee, 0xe4, 0x5f, 0xed, 0xc4, 0x2d, 0xb0, 0x74, 0x97, 0xf0, 0x7e, 0xe9, 0x2b,
	0x13, 0x9f, 0x40, 0x69, 0x89, 0x91, 0x88, 0x8c, 0x21, 0xe2, 0x0d, 0x58, 0xb1, 0x04, 0xc2, 0xae,
	0x29, 0x77, 0x64, 0xdd, 0x11, 0x75, 0xa2, 0x06, 0x2a, 0x96, 0x2c, 0x9b, 0xfe, 0xb5, 0xe7, 0x30,
	0xae, 0x99, 0x44, 0xa9, 0x5d, 0x86, 0xc2, 0xb9, 0x7b, 0x71, 0xc5, 0x84, 0xf6, 0x54, 0x67, 0x78,
	0x17, 0xee, 0x98, 0xf6, 0xa8, 0xd7, 0x2d, 0x65, 0x50, 0x76, 0xce, 0xa0, 0x8f, 0x08, 0x4a, 0xf1,
	0x99, 0xce, 0xf0, 0xad, 0x2f, 0x35, 0x49, 0x79, 0x8c, 0xc7, 0xb7, 0x33, 0x06, 0xec, 0xfb, 0xb0,
	0x1a, 0x26, 0x87, 0x8c, 0x3a, 0x9d, 0x41, 0x5f, 0x9b, 0x9e, 0x04, 0xe5, 0xd8, 0x10, 0x30, 0xc7,
	0xc6, 0x88, 0xfc, 0x41, 0x87, 0xda, 0xd5, 0x2f, 0x49, 0xaf, 0xdf, 0x84, 0xf0, 0x31, 0x94, 0x4d,
	0x2d, 0x62, 0xcc, 0x87, 0xda, 0xad, 0xa4, 0x24, 0x94, 0x96, 0x24, 0xdd, 0x6c, 0xfb, 0x9e, 0xa3,
	0x6d, 0x53, 0x31, 0xbe, 0x84, 0x7b, 0xed, 0x46, 0xfb, 0x17, 0x0f, 0xfe, 0x16, 0x14, 0x43, 0xc8,
	0x10, 0x3c, 0x03, 0xec, 0xc7, 0x50, 0x6c, 0xb2, 0x30, 0x0d, 0x57, 0xb1, 0xdc, 0x58, 0x93, 0xef,
	0xfc, 0x81, 0xdb, 0xbf, 0x14, 0x8c, 0xcb, 0xa5, 0x92, 0xb8, 0x02, 0x9f, 0xc0, 0x6a, 0xdb, 0x5c,
	0xc3, 0xfc, 0xdf, 0x89, 0x5c, 0x6d, 0xd2, 0xbc, 0x28, 0x95, 0xd4, 0x0d, 0xc3, 0x54, 0x8c, 0xbf,
	0x20, 0xb8, 0x1b, 0x75, 0x8c, 0x9e, 0xc4, 0xb0, 0xf3, 0xff, 0x58, 0x54, 0x1d, 0xd6, 0x62, 0xe0,
	0x80, 0xc7, 0xc3, 0xd3, 0x70, 0x6a, 0xa5, 0xb9, 0xb9, 0x95, 0x26, 0xdf, 0xf0, 0x7c, 0xfa, 0x0d,
	0x6f, 0x5a, 0x5f, 0x6f, 0xaa, 0xe8, 0xdb, 0x4d, 0x15, 0x7d, 0xbf, 0xa9, 0xa2, 0x4f, 0x3f, 0xaa,
	0x0b, 0xbd, 0x82, 0xfa, 0x27, 0xde, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0x86, 0x6b, 0xd0, 0x23,
	0xab, 0x07, 0x00, 0x00,
}
