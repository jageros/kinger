// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: social.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChatChannel int32

const (
	ChatChannel_World           ChatChannel = 0
	ChatChannel_CampaignCountry ChatChannel = 1
)

var ChatChannel_name = map[int32]string{
	0: "World",
	1: "CampaignCountry",
}
var ChatChannel_value = map[string]int32{
	"World":           0,
	"CampaignCountry": 1,
}

func (x ChatChannel) String() string {
	return proto.EnumName(ChatChannel_name, int32(x))
}
func (ChatChannel) EnumDescriptor() ([]byte, []int) { return fileDescriptorSocial, []int{0} }

type Chatlet_TypeEnum int32

const (
	Chatlet_Normal         Chatlet_TypeEnum = 0
	Chatlet_CampaignNotice Chatlet_TypeEnum = 1
)

var Chatlet_TypeEnum_name = map[int32]string{
	0: "Normal",
	1: "CampaignNotice",
}
var Chatlet_TypeEnum_value = map[string]int32{
	"Normal":         0,
	"CampaignNotice": 1,
}

func (x Chatlet_TypeEnum) String() string {
	return proto.EnumName(Chatlet_TypeEnum_name, int32(x))
}
func (Chatlet_TypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorSocial, []int{16, 0} }

type InviteBattleResult_InviteResult int32

const (
	InviteBattleResult_Agree   InviteBattleResult_InviteResult = 0
	InviteBattleResult_Refuse  InviteBattleResult_InviteResult = 1
	InviteBattleResult_Timeout InviteBattleResult_InviteResult = 2
)

var InviteBattleResult_InviteResult_name = map[int32]string{
	0: "Agree",
	1: "Refuse",
	2: "Timeout",
}
var InviteBattleResult_InviteResult_value = map[string]int32{
	"Agree":   0,
	"Refuse":  1,
	"Timeout": 2,
}

func (x InviteBattleResult_InviteResult) String() string {
	return proto.EnumName(InviteBattleResult_InviteResult_name, int32(x))
}
func (InviteBattleResult_InviteResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSocial, []int{23, 0}
}

type TargetPlayer struct {
	Uid uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (m *TargetPlayer) Reset()                    { *m = TargetPlayer{} }
func (m *TargetPlayer) String() string            { return proto.CompactTextString(m) }
func (*TargetPlayer) ProtoMessage()               {}
func (*TargetPlayer) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{0} }

func (m *TargetPlayer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type PlayerInfo struct {
	Name             string       `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PvpScore         int32        `protobuf:"varint,2,opt,name=PvpScore,proto3" json:"PvpScore,omitempty"`
	HeadImgUrl       string       `protobuf:"bytes,3,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	BattleAmount     int32        `protobuf:"varint,4,opt,name=BattleAmount,proto3" json:"BattleAmount,omitempty"`
	BattleWinAmount  int32        `protobuf:"varint,5,opt,name=BattleWinAmount,proto3" json:"BattleWinAmount,omitempty"`
	FirstHandWinRate int32        `protobuf:"varint,6,opt,name=FirstHandWinRate,proto3" json:"FirstHandWinRate,omitempty"`
	BackHandWinRate  int32        `protobuf:"varint,7,opt,name=BackHandWinRate,proto3" json:"BackHandWinRate,omitempty"`
	RankScore        int32        `protobuf:"varint,8,opt,name=RankScore,proto3" json:"RankScore,omitempty"`
	FavoriteCards    []*SkinGCard `protobuf:"bytes,9,rep,name=FavoriteCards" json:"FavoriteCards,omitempty"`
	FightCards       []*SkinGCard `protobuf:"bytes,10,rep,name=FightCards" json:"FightCards,omitempty"`
	IsFriend         bool         `protobuf:"varint,11,opt,name=IsFriend,proto3" json:"IsFriend,omitempty"`
	IsWechatFriend   bool         `protobuf:"varint,12,opt,name=IsWechatFriend,proto3" json:"IsWechatFriend,omitempty"`
	CanInviteBattle  bool         `protobuf:"varint,13,opt,name=CanInviteBattle,proto3" json:"CanInviteBattle,omitempty"`
	Country          string       `protobuf:"bytes,14,opt,name=Country,proto3" json:"Country,omitempty"`
	HeadFrame        string       `protobuf:"bytes,15,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	CityID           int32        `protobuf:"varint,16,opt,name=CityID,proto3" json:"CityID,omitempty"`
	CityJob          CampaignJob  `protobuf:"varint,17,opt,name=CityJob,proto3,enum=pb.CampaignJob" json:"CityJob,omitempty"`
	CountryJob       CampaignJob  `protobuf:"varint,18,opt,name=CountryJob,proto3,enum=pb.CampaignJob" json:"CountryJob,omitempty"`
	CampaignCountry  string       `protobuf:"bytes,19,opt,name=CampaignCountry,proto3" json:"CampaignCountry,omitempty"`
	StatusIDs        []string     `protobuf:"bytes,20,rep,name=StatusIDs" json:"StatusIDs,omitempty"`
	CrossAreaHonor   int32        `protobuf:"varint,21,opt,name=CrossAreaHonor,proto3" json:"CrossAreaHonor,omitempty"`
	// int32 CrossAreaBlotHonor = 22;
	CountryFlag string `protobuf:"bytes,22,opt,name=CountryFlag,proto3" json:"CountryFlag,omitempty"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{1} }

func (m *PlayerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerInfo) GetPvpScore() int32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *PlayerInfo) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *PlayerInfo) GetBattleAmount() int32 {
	if m != nil {
		return m.BattleAmount
	}
	return 0
}

func (m *PlayerInfo) GetBattleWinAmount() int32 {
	if m != nil {
		return m.BattleWinAmount
	}
	return 0
}

func (m *PlayerInfo) GetFirstHandWinRate() int32 {
	if m != nil {
		return m.FirstHandWinRate
	}
	return 0
}

func (m *PlayerInfo) GetBackHandWinRate() int32 {
	if m != nil {
		return m.BackHandWinRate
	}
	return 0
}

func (m *PlayerInfo) GetRankScore() int32 {
	if m != nil {
		return m.RankScore
	}
	return 0
}

func (m *PlayerInfo) GetFavoriteCards() []*SkinGCard {
	if m != nil {
		return m.FavoriteCards
	}
	return nil
}

func (m *PlayerInfo) GetFightCards() []*SkinGCard {
	if m != nil {
		return m.FightCards
	}
	return nil
}

func (m *PlayerInfo) GetIsFriend() bool {
	if m != nil {
		return m.IsFriend
	}
	return false
}

func (m *PlayerInfo) GetIsWechatFriend() bool {
	if m != nil {
		return m.IsWechatFriend
	}
	return false
}

func (m *PlayerInfo) GetCanInviteBattle() bool {
	if m != nil {
		return m.CanInviteBattle
	}
	return false
}

func (m *PlayerInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PlayerInfo) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *PlayerInfo) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *PlayerInfo) GetCityJob() CampaignJob {
	if m != nil {
		return m.CityJob
	}
	return CampaignJob_UnknowJob
}

func (m *PlayerInfo) GetCountryJob() CampaignJob {
	if m != nil {
		return m.CountryJob
	}
	return CampaignJob_UnknowJob
}

func (m *PlayerInfo) GetCampaignCountry() string {
	if m != nil {
		return m.CampaignCountry
	}
	return ""
}

func (m *PlayerInfo) GetStatusIDs() []string {
	if m != nil {
		return m.StatusIDs
	}
	return nil
}

func (m *PlayerInfo) GetCrossAreaHonor() int32 {
	if m != nil {
		return m.CrossAreaHonor
	}
	return 0
}

func (m *PlayerInfo) GetCountryFlag() string {
	if m != nil {
		return m.CountryFlag
	}
	return ""
}

type FriendItem struct {
	Uid            uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	PvpScore       int32  `protobuf:"varint,3,opt,name=PvpScore,proto3" json:"PvpScore,omitempty"`
	IsOnline       bool   `protobuf:"varint,4,opt,name=IsOnline,proto3" json:"IsOnline,omitempty"`
	IsInBattle     bool   `protobuf:"varint,5,opt,name=IsInBattle,proto3" json:"IsInBattle,omitempty"`
	HeadImgUrl     string `protobuf:"bytes,6,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	LastOnlineTime int32  `protobuf:"varint,7,opt,name=LastOnlineTime,proto3" json:"LastOnlineTime,omitempty"`
	IsWechatFriend bool   `protobuf:"varint,8,opt,name=IsWechatFriend,proto3" json:"IsWechatFriend,omitempty"`
	PvpCamp        int32  `protobuf:"varint,9,opt,name=PvpCamp,proto3" json:"PvpCamp,omitempty"`
	Country        string `protobuf:"bytes,10,opt,name=Country,proto3" json:"Country,omitempty"`
	HeadFrame      string `protobuf:"bytes,11,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	RebornCnt      int32  `protobuf:"varint,12,opt,name=RebornCnt,proto3" json:"RebornCnt,omitempty"`
	CountryFlag    string `protobuf:"bytes,13,opt,name=CountryFlag,proto3" json:"CountryFlag,omitempty"`
	RankScore      int32  `protobuf:"varint,14,opt,name=RankScore,proto3" json:"RankScore,omitempty"`
}

func (m *FriendItem) Reset()                    { *m = FriendItem{} }
func (m *FriendItem) String() string            { return proto.CompactTextString(m) }
func (*FriendItem) ProtoMessage()               {}
func (*FriendItem) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{2} }

func (m *FriendItem) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FriendItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FriendItem) GetPvpScore() int32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *FriendItem) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *FriendItem) GetIsInBattle() bool {
	if m != nil {
		return m.IsInBattle
	}
	return false
}

func (m *FriendItem) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *FriendItem) GetLastOnlineTime() int32 {
	if m != nil {
		return m.LastOnlineTime
	}
	return 0
}

func (m *FriendItem) GetIsWechatFriend() bool {
	if m != nil {
		return m.IsWechatFriend
	}
	return false
}

func (m *FriendItem) GetPvpCamp() int32 {
	if m != nil {
		return m.PvpCamp
	}
	return 0
}

func (m *FriendItem) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *FriendItem) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *FriendItem) GetRebornCnt() int32 {
	if m != nil {
		return m.RebornCnt
	}
	return 0
}

func (m *FriendItem) GetCountryFlag() string {
	if m != nil {
		return m.CountryFlag
	}
	return ""
}

func (m *FriendItem) GetRankScore() int32 {
	if m != nil {
		return m.RankScore
	}
	return 0
}

type FriendList struct {
	LastOpponent *FriendItem   `protobuf:"bytes,1,opt,name=LastOpponent" json:"LastOpponent,omitempty"`
	Friends      []*FriendItem `protobuf:"bytes,2,rep,name=Friends" json:"Friends,omitempty"`
}

func (m *FriendList) Reset()                    { *m = FriendList{} }
func (m *FriendList) String() string            { return proto.CompactTextString(m) }
func (*FriendList) ProtoMessage()               {}
func (*FriendList) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{3} }

func (m *FriendList) GetLastOpponent() *FriendItem {
	if m != nil {
		return m.LastOpponent
	}
	return nil
}

func (m *FriendList) GetFriends() []*FriendItem {
	if m != nil {
		return m.Friends
	}
	return nil
}

type FriendApply struct {
	Uid         uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	PvpScore    int32  `protobuf:"varint,3,opt,name=PvpScore,proto3" json:"PvpScore,omitempty"`
	HeadImgUrl  string `protobuf:"bytes,4,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	Country     string `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
	HeadFrame   string `protobuf:"bytes,6,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	CountryFlag string `protobuf:"bytes,7,opt,name=CountryFlag,proto3" json:"CountryFlag,omitempty"`
}

func (m *FriendApply) Reset()                    { *m = FriendApply{} }
func (m *FriendApply) String() string            { return proto.CompactTextString(m) }
func (*FriendApply) ProtoMessage()               {}
func (*FriendApply) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{4} }

func (m *FriendApply) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FriendApply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FriendApply) GetPvpScore() int32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *FriendApply) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *FriendApply) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *FriendApply) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *FriendApply) GetCountryFlag() string {
	if m != nil {
		return m.CountryFlag
	}
	return ""
}

type FriendApplyList struct {
	FriendApplys []*FriendApply `protobuf:"bytes,1,rep,name=FriendApplys" json:"FriendApplys,omitempty"`
}

func (m *FriendApplyList) Reset()                    { *m = FriendApplyList{} }
func (m *FriendApplyList) String() string            { return proto.CompactTextString(m) }
func (*FriendApplyList) ProtoMessage()               {}
func (*FriendApplyList) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{5} }

func (m *FriendApplyList) GetFriendApplys() []*FriendApply {
	if m != nil {
		return m.FriendApplys
	}
	return nil
}

type ReplyFriendApplyArg struct {
	Uid     uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	IsAgree bool   `protobuf:"varint,2,opt,name=IsAgree,proto3" json:"IsAgree,omitempty"`
}

func (m *ReplyFriendApplyArg) Reset()                    { *m = ReplyFriendApplyArg{} }
func (m *ReplyFriendApplyArg) String() string            { return proto.CompactTextString(m) }
func (*ReplyFriendApplyArg) ProtoMessage()               {}
func (*ReplyFriendApplyArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{6} }

func (m *ReplyFriendApplyArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ReplyFriendApplyArg) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

type FriendApplyNotifyArg struct {
	FromName string `protobuf:"bytes,1,opt,name=FromName,proto3" json:"FromName,omitempty"`
	IsInvite bool   `protobuf:"varint,2,opt,name=IsInvite,proto3" json:"IsInvite,omitempty"`
}

func (m *FriendApplyNotifyArg) Reset()                    { *m = FriendApplyNotifyArg{} }
func (m *FriendApplyNotifyArg) String() string            { return proto.CompactTextString(m) }
func (*FriendApplyNotifyArg) ProtoMessage()               {}
func (*FriendApplyNotifyArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{7} }

func (m *FriendApplyNotifyArg) GetFromName() string {
	if m != nil {
		return m.FromName
	}
	return ""
}

func (m *FriendApplyNotifyArg) GetIsInvite() bool {
	if m != nil {
		return m.IsInvite
	}
	return false
}

type FriendApplyResult struct {
	Name    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IsAgree bool   `protobuf:"varint,2,opt,name=IsAgree,proto3" json:"IsAgree,omitempty"`
}

func (m *FriendApplyResult) Reset()                    { *m = FriendApplyResult{} }
func (m *FriendApplyResult) String() string            { return proto.CompactTextString(m) }
func (*FriendApplyResult) ProtoMessage()               {}
func (*FriendApplyResult) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{8} }

func (m *FriendApplyResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FriendApplyResult) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

type PrivateChatMsg struct {
	Time int32  `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *PrivateChatMsg) Reset()                    { *m = PrivateChatMsg{} }
func (m *PrivateChatMsg) String() string            { return proto.CompactTextString(m) }
func (*PrivateChatMsg) ProtoMessage()               {}
func (*PrivateChatMsg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{9} }

func (m *PrivateChatMsg) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrivateChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PrivateChatItem struct {
	Uid         uint64            `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	HeadImgUrl  string            `protobuf:"bytes,3,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	Msgs        []*PrivateChatMsg `protobuf:"bytes,4,rep,name=Msgs" json:"Msgs,omitempty"`
	ID          int32             `protobuf:"varint,5,opt,name=ID,proto3" json:"ID,omitempty"`
	PvpLevel    int32             `protobuf:"varint,6,opt,name=PvpLevel,proto3" json:"PvpLevel,omitempty"`
	Country     string            `protobuf:"bytes,7,opt,name=Country,proto3" json:"Country,omitempty"`
	HeadFrame   string            `protobuf:"bytes,8,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	ChatPop     string            `protobuf:"bytes,9,opt,name=ChatPop,proto3" json:"ChatPop,omitempty"`
	CountryFlag string            `protobuf:"bytes,10,opt,name=CountryFlag,proto3" json:"CountryFlag,omitempty"`
}

func (m *PrivateChatItem) Reset()                    { *m = PrivateChatItem{} }
func (m *PrivateChatItem) String() string            { return proto.CompactTextString(m) }
func (*PrivateChatItem) ProtoMessage()               {}
func (*PrivateChatItem) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{10} }

func (m *PrivateChatItem) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PrivateChatItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrivateChatItem) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *PrivateChatItem) GetMsgs() []*PrivateChatMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *PrivateChatItem) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PrivateChatItem) GetPvpLevel() int32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

func (m *PrivateChatItem) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PrivateChatItem) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *PrivateChatItem) GetChatPop() string {
	if m != nil {
		return m.ChatPop
	}
	return ""
}

func (m *PrivateChatItem) GetCountryFlag() string {
	if m != nil {
		return m.CountryFlag
	}
	return ""
}

type PrivateChatList struct {
	PrivateChatItems []*PrivateChatItem `protobuf:"bytes,1,rep,name=PrivateChatItems" json:"PrivateChatItems,omitempty"`
}

func (m *PrivateChatList) Reset()                    { *m = PrivateChatList{} }
func (m *PrivateChatList) String() string            { return proto.CompactTextString(m) }
func (*PrivateChatList) ProtoMessage()               {}
func (*PrivateChatList) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{11} }

func (m *PrivateChatList) GetPrivateChatItems() []*PrivateChatItem {
	if m != nil {
		return m.PrivateChatItems
	}
	return nil
}

type FetchPrivateChatArg struct {
	MaxID int32 `protobuf:"varint,1,opt,name=MaxID,proto3" json:"MaxID,omitempty"`
}

func (m *FetchPrivateChatArg) Reset()                    { *m = FetchPrivateChatArg{} }
func (m *FetchPrivateChatArg) String() string            { return proto.CompactTextString(m) }
func (*FetchPrivateChatArg) ProtoMessage()               {}
func (*FetchPrivateChatArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{12} }

func (m *FetchPrivateChatArg) GetMaxID() int32 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

type SendPrivateChatArg struct {
	ToUid uint64 `protobuf:"varint,1,opt,name=ToUid,proto3" json:"ToUid,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *SendPrivateChatArg) Reset()                    { *m = SendPrivateChatArg{} }
func (m *SendPrivateChatArg) String() string            { return proto.CompactTextString(m) }
func (*SendPrivateChatArg) ProtoMessage()               {}
func (*SendPrivateChatArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{13} }

func (m *SendPrivateChatArg) GetToUid() uint64 {
	if m != nil {
		return m.ToUid
	}
	return 0
}

func (m *SendPrivateChatArg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type TargetChatChannel struct {
	Channel ChatChannel `protobuf:"varint,1,opt,name=Channel,proto3,enum=pb.ChatChannel" json:"Channel,omitempty"`
}

func (m *TargetChatChannel) Reset()                    { *m = TargetChatChannel{} }
func (m *TargetChatChannel) String() string            { return proto.CompactTextString(m) }
func (*TargetChatChannel) ProtoMessage()               {}
func (*TargetChatChannel) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{14} }

func (m *TargetChatChannel) GetChannel() ChatChannel {
	if m != nil {
		return m.Channel
	}
	return ChatChannel_World
}

type ChatItem struct {
	Uid         uint64      `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	HeadImgUrl  string      `protobuf:"bytes,3,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	Time        int32       `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`
	Msg         string      `protobuf:"bytes,5,opt,name=Msg,proto3" json:"Msg,omitempty"`
	PvpLevel    int32       `protobuf:"varint,6,opt,name=PvpLevel,proto3" json:"PvpLevel,omitempty"`
	Country     string      `protobuf:"bytes,7,opt,name=Country,proto3" json:"Country,omitempty"`
	HeadFrame   string      `protobuf:"bytes,8,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	CityID      int32       `protobuf:"varint,9,opt,name=CityID,proto3" json:"CityID,omitempty"`
	CityJob     CampaignJob `protobuf:"varint,10,opt,name=CityJob,proto3,enum=pb.CampaignJob" json:"CityJob,omitempty"`
	CountryJob  CampaignJob `protobuf:"varint,11,opt,name=CountryJob,proto3,enum=pb.CampaignJob" json:"CountryJob,omitempty"`
	ChatPop     string      `protobuf:"bytes,12,opt,name=ChatPop,proto3" json:"ChatPop,omitempty"`
	CountryFlag string      `protobuf:"bytes,13,opt,name=CountryFlag,proto3" json:"CountryFlag,omitempty"`
}

func (m *ChatItem) Reset()                    { *m = ChatItem{} }
func (m *ChatItem) String() string            { return proto.CompactTextString(m) }
func (*ChatItem) ProtoMessage()               {}
func (*ChatItem) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{15} }

func (m *ChatItem) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ChatItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatItem) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *ChatItem) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ChatItem) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ChatItem) GetPvpLevel() int32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

func (m *ChatItem) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ChatItem) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *ChatItem) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *ChatItem) GetCityJob() CampaignJob {
	if m != nil {
		return m.CityJob
	}
	return CampaignJob_UnknowJob
}

func (m *ChatItem) GetCountryJob() CampaignJob {
	if m != nil {
		return m.CountryJob
	}
	return CampaignJob_UnknowJob
}

func (m *ChatItem) GetChatPop() string {
	if m != nil {
		return m.ChatPop
	}
	return ""
}

func (m *ChatItem) GetCountryFlag() string {
	if m != nil {
		return m.CountryFlag
	}
	return ""
}

// switch Chatlet.Type {
// case Normal:
//   Chatlet.Data = ChatItem
// case CampaignNotice:
//   Chatlet.Data = CampaignNotice
// }
type Chatlet struct {
	Type Chatlet_TypeEnum `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.Chatlet_TypeEnum" json:"Type,omitempty"`
	Data []byte           `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Chatlet) Reset()                    { *m = Chatlet{} }
func (m *Chatlet) String() string            { return proto.CompactTextString(m) }
func (*Chatlet) ProtoMessage()               {}
func (*Chatlet) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{16} }

func (m *Chatlet) GetType() Chatlet_TypeEnum {
	if m != nil {
		return m.Type
	}
	return Chatlet_Normal
}

func (m *Chatlet) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ChatList struct {
	Chatlets []*Chatlet `protobuf:"bytes,1,rep,name=Chatlets" json:"Chatlets,omitempty"`
}

func (m *ChatList) Reset()                    { *m = ChatList{} }
func (m *ChatList) String() string            { return proto.CompactTextString(m) }
func (*ChatList) ProtoMessage()               {}
func (*ChatList) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{17} }

func (m *ChatList) GetChatlets() []*Chatlet {
	if m != nil {
		return m.Chatlets
	}
	return nil
}

type ChatItemList struct {
	ChatItems []*ChatItem `protobuf:"bytes,1,rep,name=ChatItems" json:"ChatItems,omitempty"`
}

func (m *ChatItemList) Reset()                    { *m = ChatItemList{} }
func (m *ChatItemList) String() string            { return proto.CompactTextString(m) }
func (*ChatItemList) ProtoMessage()               {}
func (*ChatItemList) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{18} }

func (m *ChatItemList) GetChatItems() []*ChatItem {
	if m != nil {
		return m.ChatItems
	}
	return nil
}

type ChatNotify struct {
	Channel ChatChannel `protobuf:"varint,1,opt,name=Channel,proto3,enum=pb.ChatChannel" json:"Channel,omitempty"`
	Chat    *Chatlet    `protobuf:"bytes,2,opt,name=Chat" json:"Chat,omitempty"`
}

func (m *ChatNotify) Reset()                    { *m = ChatNotify{} }
func (m *ChatNotify) String() string            { return proto.CompactTextString(m) }
func (*ChatNotify) ProtoMessage()               {}
func (*ChatNotify) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{19} }

func (m *ChatNotify) GetChannel() ChatChannel {
	if m != nil {
		return m.Channel
	}
	return ChatChannel_World
}

func (m *ChatNotify) GetChat() *Chatlet {
	if m != nil {
		return m.Chat
	}
	return nil
}

type SendChatArg struct {
	Channel ChatChannel `protobuf:"varint,1,opt,name=Channel,proto3,enum=pb.ChatChannel" json:"Channel,omitempty"`
	Msg     string      `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *SendChatArg) Reset()                    { *m = SendChatArg{} }
func (m *SendChatArg) String() string            { return proto.CompactTextString(m) }
func (*SendChatArg) ProtoMessage()               {}
func (*SendChatArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{20} }

func (m *SendChatArg) GetChannel() ChatChannel {
	if m != nil {
		return m.Channel
	}
	return ChatChannel_World
}

func (m *SendChatArg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type BeInviteBattleArg struct {
	Uid  uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *BeInviteBattleArg) Reset()                    { *m = BeInviteBattleArg{} }
func (m *BeInviteBattleArg) String() string            { return proto.CompactTextString(m) }
func (*BeInviteBattleArg) ProtoMessage()               {}
func (*BeInviteBattleArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{21} }

func (m *BeInviteBattleArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BeInviteBattleArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ReplyInviteBattleArg struct {
	Uid     uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	IsAgree bool   `protobuf:"varint,2,opt,name=IsAgree,proto3" json:"IsAgree,omitempty"`
}

func (m *ReplyInviteBattleArg) Reset()                    { *m = ReplyInviteBattleArg{} }
func (m *ReplyInviteBattleArg) String() string            { return proto.CompactTextString(m) }
func (*ReplyInviteBattleArg) ProtoMessage()               {}
func (*ReplyInviteBattleArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{22} }

func (m *ReplyInviteBattleArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ReplyInviteBattleArg) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

type InviteBattleResult struct {
	Result InviteBattleResult_InviteResult `protobuf:"varint,1,opt,name=Result,proto3,enum=pb.InviteBattleResult_InviteResult" json:"Result,omitempty"`
}

func (m *InviteBattleResult) Reset()                    { *m = InviteBattleResult{} }
func (m *InviteBattleResult) String() string            { return proto.CompactTextString(m) }
func (*InviteBattleResult) ProtoMessage()               {}
func (*InviteBattleResult) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{23} }

func (m *InviteBattleResult) GetResult() InviteBattleResult_InviteResult {
	if m != nil {
		return m.Result
	}
	return InviteBattleResult_Agree
}

type CSendChatArg struct {
	Channel     ChatChannel `protobuf:"varint,1,opt,name=Channel,proto3,enum=pb.ChatChannel" json:"Channel,omitempty"`
	Msg         string      `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Name        string      `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	HeadImgUrl  string      `protobuf:"bytes,4,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	PvpLevel    int32       `protobuf:"varint,5,opt,name=PvpLevel,proto3" json:"PvpLevel,omitempty"`
	Country     string      `protobuf:"bytes,6,opt,name=Country,proto3" json:"Country,omitempty"`
	HeadFrame   string      `protobuf:"bytes,7,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`
	CountryID   uint32      `protobuf:"varint,8,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	CityID      int32       `protobuf:"varint,9,opt,name=CityID,proto3" json:"CityID,omitempty"`
	CityJob     CampaignJob `protobuf:"varint,10,opt,name=CityJob,proto3,enum=pb.CampaignJob" json:"CityJob,omitempty"`
	CountryJob  CampaignJob `protobuf:"varint,11,opt,name=CountryJob,proto3,enum=pb.CampaignJob" json:"CountryJob,omitempty"`
	ChatPop     string      `protobuf:"bytes,12,opt,name=ChatPop,proto3" json:"ChatPop,omitempty"`
	CountryFlag string      `protobuf:"bytes,13,opt,name=CountryFlag,proto3" json:"CountryFlag,omitempty"`
}

func (m *CSendChatArg) Reset()                    { *m = CSendChatArg{} }
func (m *CSendChatArg) String() string            { return proto.CompactTextString(m) }
func (*CSendChatArg) ProtoMessage()               {}
func (*CSendChatArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{24} }

func (m *CSendChatArg) GetChannel() ChatChannel {
	if m != nil {
		return m.Channel
	}
	return ChatChannel_World
}

func (m *CSendChatArg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CSendChatArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CSendChatArg) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *CSendChatArg) GetPvpLevel() int32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

func (m *CSendChatArg) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *CSendChatArg) GetHeadFrame() string {
	if m != nil {
		return m.HeadFrame
	}
	return ""
}

func (m *CSendChatArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *CSendChatArg) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *CSendChatArg) GetCityJob() CampaignJob {
	if m != nil {
		return m.CityJob
	}
	return CampaignJob_UnknowJob
}

func (m *CSendChatArg) GetCountryJob() CampaignJob {
	if m != nil {
		return m.CountryJob
	}
	return CampaignJob_UnknowJob
}

func (m *CSendChatArg) GetChatPop() string {
	if m != nil {
		return m.ChatPop
	}
	return ""
}

func (m *CSendChatArg) GetCountryFlag() string {
	if m != nil {
		return m.CountryFlag
	}
	return ""
}

type G2GReplyInviteBattleArg struct {
	BeInviter *FighterData `protobuf:"bytes,1,opt,name=BeInviter" json:"BeInviter,omitempty"`
	IsAgree   bool         `protobuf:"varint,2,opt,name=IsAgree,proto3" json:"IsAgree,omitempty"`
	TargetUid uint64       `protobuf:"varint,3,opt,name=TargetUid,proto3" json:"TargetUid,omitempty"`
}

func (m *G2GReplyInviteBattleArg) Reset()                    { *m = G2GReplyInviteBattleArg{} }
func (m *G2GReplyInviteBattleArg) String() string            { return proto.CompactTextString(m) }
func (*G2GReplyInviteBattleArg) ProtoMessage()               {}
func (*G2GReplyInviteBattleArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{25} }

func (m *G2GReplyInviteBattleArg) GetBeInviter() *FighterData {
	if m != nil {
		return m.BeInviter
	}
	return nil
}

func (m *G2GReplyInviteBattleArg) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

func (m *G2GReplyInviteBattleArg) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

type WxInviteFriend struct {
	HeadImgUrl string `protobuf:"bytes,1,opt,name=HeadImgUrl,proto3" json:"HeadImgUrl,omitempty"`
	PvpLevel   int32  `protobuf:"varint,2,opt,name=PvpLevel,proto3" json:"PvpLevel,omitempty"`
}

func (m *WxInviteFriend) Reset()                    { *m = WxInviteFriend{} }
func (m *WxInviteFriend) String() string            { return proto.CompactTextString(m) }
func (*WxInviteFriend) ProtoMessage()               {}
func (*WxInviteFriend) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{26} }

func (m *WxInviteFriend) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *WxInviteFriend) GetPvpLevel() int32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

type WxInviteReward struct {
	ID        int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CurCnt    int32 `protobuf:"varint,2,opt,name=CurCnt,proto3" json:"CurCnt,omitempty"`
	RewardCnt int32 `protobuf:"varint,3,opt,name=RewardCnt,proto3" json:"RewardCnt,omitempty"`
}

func (m *WxInviteReward) Reset()                    { *m = WxInviteReward{} }
func (m *WxInviteReward) String() string            { return proto.CompactTextString(m) }
func (*WxInviteReward) ProtoMessage()               {}
func (*WxInviteReward) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{27} }

func (m *WxInviteReward) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WxInviteReward) GetCurCnt() int32 {
	if m != nil {
		return m.CurCnt
	}
	return 0
}

func (m *WxInviteReward) GetRewardCnt() int32 {
	if m != nil {
		return m.RewardCnt
	}
	return 0
}

type WxInviteFriendsReply struct {
	Friends []*WxInviteFriend `protobuf:"bytes,1,rep,name=Friends" json:"Friends,omitempty"`
	Rewards []*WxInviteReward `protobuf:"bytes,2,rep,name=Rewards" json:"Rewards,omitempty"`
}

func (m *WxInviteFriendsReply) Reset()                    { *m = WxInviteFriendsReply{} }
func (m *WxInviteFriendsReply) String() string            { return proto.CompactTextString(m) }
func (*WxInviteFriendsReply) ProtoMessage()               {}
func (*WxInviteFriendsReply) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{28} }

func (m *WxInviteFriendsReply) GetFriends() []*WxInviteFriend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *WxInviteFriendsReply) GetRewards() []*WxInviteReward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type GetWxInviteRewardArg struct {
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetWxInviteRewardArg) Reset()                    { *m = GetWxInviteRewardArg{} }
func (m *GetWxInviteRewardArg) String() string            { return proto.CompactTextString(m) }
func (*GetWxInviteRewardArg) ProtoMessage()               {}
func (*GetWxInviteRewardArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{29} }

func (m *GetWxInviteRewardArg) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetWxInviteRewardReply struct {
	Gold   int32    `protobuf:"varint,1,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Jade   int32    `protobuf:"varint,2,opt,name=Jade,proto3" json:"Jade,omitempty"`
	Cards  []uint32 `protobuf:"varint,3,rep,packed,name=Cards" json:"Cards,omitempty"`
	Ticket int32    `protobuf:"varint,4,opt,name=Ticket,proto3" json:"Ticket,omitempty"`
}

func (m *GetWxInviteRewardReply) Reset()                    { *m = GetWxInviteRewardReply{} }
func (m *GetWxInviteRewardReply) String() string            { return proto.CompactTextString(m) }
func (*GetWxInviteRewardReply) ProtoMessage()               {}
func (*GetWxInviteRewardReply) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{30} }

func (m *GetWxInviteRewardReply) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *GetWxInviteRewardReply) GetJade() int32 {
	if m != nil {
		return m.Jade
	}
	return 0
}

func (m *GetWxInviteRewardReply) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *GetWxInviteRewardReply) GetTicket() int32 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

type SubscribeChatArg struct {
	Channel   ChatChannel `protobuf:"varint,1,opt,name=Channel,proto3,enum=pb.ChatChannel" json:"Channel,omitempty"`
	CountryID uint32      `protobuf:"varint,2,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	Area      int32       `protobuf:"varint,3,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *SubscribeChatArg) Reset()                    { *m = SubscribeChatArg{} }
func (m *SubscribeChatArg) String() string            { return proto.CompactTextString(m) }
func (*SubscribeChatArg) ProtoMessage()               {}
func (*SubscribeChatArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{31} }

func (m *SubscribeChatArg) GetChannel() ChatChannel {
	if m != nil {
		return m.Channel
	}
	return ChatChannel_World
}

func (m *SubscribeChatArg) GetCountryID() uint32 {
	if m != nil {
		return m.CountryID
	}
	return 0
}

func (m *SubscribeChatArg) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type ForbidChatArg struct {
	Uid      uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	IsForbid bool   `protobuf:"varint,2,opt,name=IsForbid,proto3" json:"IsForbid,omitempty"`
}

func (m *ForbidChatArg) Reset()                    { *m = ForbidChatArg{} }
func (m *ForbidChatArg) String() string            { return proto.CompactTextString(m) }
func (*ForbidChatArg) ProtoMessage()               {}
func (*ForbidChatArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{32} }

func (m *ForbidChatArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ForbidChatArg) GetIsForbid() bool {
	if m != nil {
		return m.IsForbid
	}
	return false
}

type OnSendAdvertChatArg struct {
	Msg string `protobuf:"bytes,1,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *OnSendAdvertChatArg) Reset()                    { *m = OnSendAdvertChatArg{} }
func (m *OnSendAdvertChatArg) String() string            { return proto.CompactTextString(m) }
func (*OnSendAdvertChatArg) ProtoMessage()               {}
func (*OnSendAdvertChatArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{33} }

func (m *OnSendAdvertChatArg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type IpAddrArg struct {
	IpAddr   string `protobuf:"bytes,1,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	IsForbid bool   `protobuf:"varint,2,opt,name=IsForbid,proto3" json:"IsForbid,omitempty"`
}

func (m *IpAddrArg) Reset()                    { *m = IpAddrArg{} }
func (m *IpAddrArg) String() string            { return proto.CompactTextString(m) }
func (*IpAddrArg) ProtoMessage()               {}
func (*IpAddrArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{34} }

func (m *IpAddrArg) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *IpAddrArg) GetIsForbid() bool {
	if m != nil {
		return m.IsForbid
	}
	return false
}

type ImportWordArg struct {
	AddWordsStr string `protobuf:"bytes,1,opt,name=AddWordsStr,proto3" json:"AddWordsStr,omitempty"`
	DelWordsStr string `protobuf:"bytes,2,opt,name=DelWordsStr,proto3" json:"DelWordsStr,omitempty"`
	IsAccurate  bool   `protobuf:"varint,3,opt,name=IsAccurate,proto3" json:"IsAccurate,omitempty"`
}

func (m *ImportWordArg) Reset()                    { *m = ImportWordArg{} }
func (m *ImportWordArg) String() string            { return proto.CompactTextString(m) }
func (*ImportWordArg) ProtoMessage()               {}
func (*ImportWordArg) Descriptor() ([]byte, []int) { return fileDescriptorSocial, []int{35} }

func (m *ImportWordArg) GetAddWordsStr() string {
	if m != nil {
		return m.AddWordsStr
	}
	return ""
}

func (m *ImportWordArg) GetDelWordsStr() string {
	if m != nil {
		return m.DelWordsStr
	}
	return ""
}

func (m *ImportWordArg) GetIsAccurate() bool {
	if m != nil {
		return m.IsAccurate
	}
	return false
}

func init() {
	proto.RegisterType((*TargetPlayer)(nil), "pb.TargetPlayer")
	proto.RegisterType((*PlayerInfo)(nil), "pb.PlayerInfo")
	proto.RegisterType((*FriendItem)(nil), "pb.FriendItem")
	proto.RegisterType((*FriendList)(nil), "pb.FriendList")
	proto.RegisterType((*FriendApply)(nil), "pb.FriendApply")
	proto.RegisterType((*FriendApplyList)(nil), "pb.FriendApplyList")
	proto.RegisterType((*ReplyFriendApplyArg)(nil), "pb.ReplyFriendApplyArg")
	proto.RegisterType((*FriendApplyNotifyArg)(nil), "pb.FriendApplyNotifyArg")
	proto.RegisterType((*FriendApplyResult)(nil), "pb.FriendApplyResult")
	proto.RegisterType((*PrivateChatMsg)(nil), "pb.PrivateChatMsg")
	proto.RegisterType((*PrivateChatItem)(nil), "pb.PrivateChatItem")
	proto.RegisterType((*PrivateChatList)(nil), "pb.PrivateChatList")
	proto.RegisterType((*FetchPrivateChatArg)(nil), "pb.FetchPrivateChatArg")
	proto.RegisterType((*SendPrivateChatArg)(nil), "pb.SendPrivateChatArg")
	proto.RegisterType((*TargetChatChannel)(nil), "pb.TargetChatChannel")
	proto.RegisterType((*ChatItem)(nil), "pb.ChatItem")
	proto.RegisterType((*Chatlet)(nil), "pb.Chatlet")
	proto.RegisterType((*ChatList)(nil), "pb.ChatList")
	proto.RegisterType((*ChatItemList)(nil), "pb.ChatItemList")
	proto.RegisterType((*ChatNotify)(nil), "pb.ChatNotify")
	proto.RegisterType((*SendChatArg)(nil), "pb.SendChatArg")
	proto.RegisterType((*BeInviteBattleArg)(nil), "pb.BeInviteBattleArg")
	proto.RegisterType((*ReplyInviteBattleArg)(nil), "pb.ReplyInviteBattleArg")
	proto.RegisterType((*InviteBattleResult)(nil), "pb.InviteBattleResult")
	proto.RegisterType((*CSendChatArg)(nil), "pb.CSendChatArg")
	proto.RegisterType((*G2GReplyInviteBattleArg)(nil), "pb.G2GReplyInviteBattleArg")
	proto.RegisterType((*WxInviteFriend)(nil), "pb.WxInviteFriend")
	proto.RegisterType((*WxInviteReward)(nil), "pb.WxInviteReward")
	proto.RegisterType((*WxInviteFriendsReply)(nil), "pb.WxInviteFriendsReply")
	proto.RegisterType((*GetWxInviteRewardArg)(nil), "pb.GetWxInviteRewardArg")
	proto.RegisterType((*GetWxInviteRewardReply)(nil), "pb.GetWxInviteRewardReply")
	proto.RegisterType((*SubscribeChatArg)(nil), "pb.SubscribeChatArg")
	proto.RegisterType((*ForbidChatArg)(nil), "pb.ForbidChatArg")
	proto.RegisterType((*OnSendAdvertChatArg)(nil), "pb.OnSendAdvertChatArg")
	proto.RegisterType((*IpAddrArg)(nil), "pb.IpAddrArg")
	proto.RegisterType((*ImportWordArg)(nil), "pb.ImportWordArg")
	proto.RegisterEnum("pb.ChatChannel", ChatChannel_name, ChatChannel_value)
	proto.RegisterEnum("pb.Chatlet_TypeEnum", Chatlet_TypeEnum_name, Chatlet_TypeEnum_value)
	proto.RegisterEnum("pb.InviteBattleResult_InviteResult", InviteBattleResult_InviteResult_name, InviteBattleResult_InviteResult_value)
}
func (m *TargetPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PvpScore != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.PvpScore))
	}
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if m.BattleAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.BattleAmount))
	}
	if m.BattleWinAmount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.BattleWinAmount))
	}
	if m.FirstHandWinRate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.FirstHandWinRate))
	}
	if m.BackHandWinRate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.BackHandWinRate))
	}
	if m.RankScore != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.RankScore))
	}
	if len(m.FavoriteCards) > 0 {
		for _, msg := range m.FavoriteCards {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FightCards) > 0 {
		for _, msg := range m.FightCards {
			dAtA[i] = 0x52
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsFriend {
		dAtA[i] = 0x58
		i++
		if m.IsFriend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsWechatFriend {
		dAtA[i] = 0x60
		i++
		if m.IsWechatFriend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanInviteBattle {
		dAtA[i] = 0x68
		i++
		if m.CanInviteBattle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CityID))
	}
	if m.CityJob != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CountryJob))
	}
	if len(m.CampaignCountry) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.CampaignCountry)))
		i += copy(dAtA[i:], m.CampaignCountry)
	}
	if len(m.StatusIDs) > 0 {
		for _, s := range m.StatusIDs {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CrossAreaHonor != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CrossAreaHonor))
	}
	if len(m.CountryFlag) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.CountryFlag)))
		i += copy(dAtA[i:], m.CountryFlag)
	}
	return i, nil
}

func (m *FriendItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PvpScore != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.PvpScore))
	}
	if m.IsOnline {
		dAtA[i] = 0x20
		i++
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsInBattle {
		dAtA[i] = 0x28
		i++
		if m.IsInBattle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if m.LastOnlineTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.LastOnlineTime))
	}
	if m.IsWechatFriend {
		dAtA[i] = 0x40
		i++
		if m.IsWechatFriend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PvpCamp != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.PvpCamp))
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if m.RebornCnt != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.RebornCnt))
	}
	if len(m.CountryFlag) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.CountryFlag)))
		i += copy(dAtA[i:], m.CountryFlag)
	}
	if m.RankScore != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.RankScore))
	}
	return i, nil
}

func (m *FriendList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastOpponent != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.LastOpponent.Size()))
		n1, err := m.LastOpponent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PvpScore != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.PvpScore))
	}
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if len(m.CountryFlag) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.CountryFlag)))
		i += copy(dAtA[i:], m.CountryFlag)
	}
	return i, nil
}

func (m *FriendApplyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendApplyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendApplys) > 0 {
		for _, msg := range m.FriendApplys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplyFriendApplyArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyFriendApplyArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	if m.IsAgree {
		dAtA[i] = 0x10
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FriendApplyNotifyArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendApplyNotifyArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FromName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.FromName)))
		i += copy(dAtA[i:], m.FromName)
	}
	if m.IsInvite {
		dAtA[i] = 0x10
		i++
		if m.IsInvite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FriendApplyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendApplyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.IsAgree {
		dAtA[i] = 0x10
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PrivateChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateChatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Time))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *PrivateChatItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateChatItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if len(m.Msgs) > 0 {
		for _, msg := range m.Msgs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.ID))
	}
	if m.PvpLevel != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.PvpLevel))
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if len(m.ChatPop) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.ChatPop)))
		i += copy(dAtA[i:], m.ChatPop)
	}
	if len(m.CountryFlag) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.CountryFlag)))
		i += copy(dAtA[i:], m.CountryFlag)
	}
	return i, nil
}

func (m *PrivateChatList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateChatList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PrivateChatItems) > 0 {
		for _, msg := range m.PrivateChatItems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FetchPrivateChatArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchPrivateChatArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.MaxID))
	}
	return i, nil
}

func (m *SendPrivateChatArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendPrivateChatArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ToUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.ToUid))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *TargetChatChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetChatChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *ChatItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if m.Time != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Time))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.PvpLevel != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.PvpLevel))
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if m.CityID != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CityID))
	}
	if m.CityJob != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CountryJob))
	}
	if len(m.ChatPop) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.ChatPop)))
		i += copy(dAtA[i:], m.ChatPop)
	}
	if len(m.CountryFlag) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.CountryFlag)))
		i += copy(dAtA[i:], m.CountryFlag)
	}
	return i, nil
}

func (m *Chatlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chatlet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Type))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ChatList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Chatlets) > 0 {
		for _, msg := range m.Chatlets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChatItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatItemList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatItems) > 0 {
		for _, msg := range m.ChatItems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChatNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Channel))
	}
	if m.Chat != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Chat.Size()))
		n2, err := m.Chat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SendChatArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendChatArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Channel))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *BeInviteBattleArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeInviteBattleArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ReplyInviteBattleArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyInviteBattleArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	if m.IsAgree {
		dAtA[i] = 0x10
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *InviteBattleResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteBattleResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *CSendChatArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSendChatArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Channel))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if m.PvpLevel != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.PvpLevel))
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.HeadFrame) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadFrame)))
		i += copy(dAtA[i:], m.HeadFrame)
	}
	if m.CountryID != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CountryID))
	}
	if m.CityID != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CityID))
	}
	if m.CityJob != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CountryJob))
	}
	if len(m.ChatPop) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.ChatPop)))
		i += copy(dAtA[i:], m.ChatPop)
	}
	if len(m.CountryFlag) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.CountryFlag)))
		i += copy(dAtA[i:], m.CountryFlag)
	}
	return i, nil
}

func (m *G2GReplyInviteBattleArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G2GReplyInviteBattleArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeInviter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.BeInviter.Size()))
		n3, err := m.BeInviter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.IsAgree {
		dAtA[i] = 0x10
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.TargetUid))
	}
	return i, nil
}

func (m *WxInviteFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxInviteFriend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeadImgUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.HeadImgUrl)))
		i += copy(dAtA[i:], m.HeadImgUrl)
	}
	if m.PvpLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.PvpLevel))
	}
	return i, nil
}

func (m *WxInviteReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxInviteReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.ID))
	}
	if m.CurCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CurCnt))
	}
	if m.RewardCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.RewardCnt))
	}
	return i, nil
}

func (m *WxInviteFriendsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxInviteFriendsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Rewards) > 0 {
		for _, msg := range m.Rewards {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetWxInviteRewardArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWxInviteRewardArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func (m *GetWxInviteRewardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWxInviteRewardReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Gold))
	}
	if m.Jade != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Jade))
	}
	if len(m.Cards) > 0 {
		dAtA5 := make([]byte, len(m.Cards)*10)
		var j4 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocial(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if m.Ticket != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Ticket))
	}
	return i, nil
}

func (m *SubscribeChatArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeChatArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Channel))
	}
	if m.CountryID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.CountryID))
	}
	if m.Area != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *ForbidChatArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidChatArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocial(dAtA, i, uint64(m.Uid))
	}
	if m.IsForbid {
		dAtA[i] = 0x10
		i++
		if m.IsForbid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *OnSendAdvertChatArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnSendAdvertChatArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *IpAddrArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpAddrArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IpAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.IpAddr)))
		i += copy(dAtA[i:], m.IpAddr)
	}
	if m.IsForbid {
		dAtA[i] = 0x10
		i++
		if m.IsForbid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ImportWordArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportWordArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AddWordsStr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.AddWordsStr)))
		i += copy(dAtA[i:], m.AddWordsStr)
	}
	if len(m.DelWordsStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocial(dAtA, i, uint64(len(m.DelWordsStr)))
		i += copy(dAtA[i:], m.DelWordsStr)
	}
	if m.IsAccurate {
		dAtA[i] = 0x18
		i++
		if m.IsAccurate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintSocial(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TargetPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.PvpScore != 0 {
		n += 1 + sovSocial(uint64(m.PvpScore))
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.BattleAmount != 0 {
		n += 1 + sovSocial(uint64(m.BattleAmount))
	}
	if m.BattleWinAmount != 0 {
		n += 1 + sovSocial(uint64(m.BattleWinAmount))
	}
	if m.FirstHandWinRate != 0 {
		n += 1 + sovSocial(uint64(m.FirstHandWinRate))
	}
	if m.BackHandWinRate != 0 {
		n += 1 + sovSocial(uint64(m.BackHandWinRate))
	}
	if m.RankScore != 0 {
		n += 1 + sovSocial(uint64(m.RankScore))
	}
	if len(m.FavoriteCards) > 0 {
		for _, e := range m.FavoriteCards {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	if len(m.FightCards) > 0 {
		for _, e := range m.FightCards {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	if m.IsFriend {
		n += 2
	}
	if m.IsWechatFriend {
		n += 2
	}
	if m.CanInviteBattle {
		n += 2
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.CityID != 0 {
		n += 2 + sovSocial(uint64(m.CityID))
	}
	if m.CityJob != 0 {
		n += 2 + sovSocial(uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		n += 2 + sovSocial(uint64(m.CountryJob))
	}
	l = len(m.CampaignCountry)
	if l > 0 {
		n += 2 + l + sovSocial(uint64(l))
	}
	if len(m.StatusIDs) > 0 {
		for _, s := range m.StatusIDs {
			l = len(s)
			n += 2 + l + sovSocial(uint64(l))
		}
	}
	if m.CrossAreaHonor != 0 {
		n += 2 + sovSocial(uint64(m.CrossAreaHonor))
	}
	l = len(m.CountryFlag)
	if l > 0 {
		n += 2 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *FriendItem) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.PvpScore != 0 {
		n += 1 + sovSocial(uint64(m.PvpScore))
	}
	if m.IsOnline {
		n += 2
	}
	if m.IsInBattle {
		n += 2
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.LastOnlineTime != 0 {
		n += 1 + sovSocial(uint64(m.LastOnlineTime))
	}
	if m.IsWechatFriend {
		n += 2
	}
	if m.PvpCamp != 0 {
		n += 1 + sovSocial(uint64(m.PvpCamp))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.RebornCnt != 0 {
		n += 1 + sovSocial(uint64(m.RebornCnt))
	}
	l = len(m.CountryFlag)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.RankScore != 0 {
		n += 1 + sovSocial(uint64(m.RankScore))
	}
	return n
}

func (m *FriendList) Size() (n int) {
	var l int
	_ = l
	if m.LastOpponent != nil {
		l = m.LastOpponent.Size()
		n += 1 + l + sovSocial(uint64(l))
	}
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	return n
}

func (m *FriendApply) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.PvpScore != 0 {
		n += 1 + sovSocial(uint64(m.PvpScore))
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.CountryFlag)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *FriendApplyList) Size() (n int) {
	var l int
	_ = l
	if len(m.FriendApplys) > 0 {
		for _, e := range m.FriendApplys {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	return n
}

func (m *ReplyFriendApplyArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	if m.IsAgree {
		n += 2
	}
	return n
}

func (m *FriendApplyNotifyArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.FromName)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.IsInvite {
		n += 2
	}
	return n
}

func (m *FriendApplyResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.IsAgree {
		n += 2
	}
	return n
}

func (m *PrivateChatMsg) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovSocial(uint64(m.Time))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *PrivateChatItem) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	if m.ID != 0 {
		n += 1 + sovSocial(uint64(m.ID))
	}
	if m.PvpLevel != 0 {
		n += 1 + sovSocial(uint64(m.PvpLevel))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.ChatPop)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.CountryFlag)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *PrivateChatList) Size() (n int) {
	var l int
	_ = l
	if len(m.PrivateChatItems) > 0 {
		for _, e := range m.PrivateChatItems {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	return n
}

func (m *FetchPrivateChatArg) Size() (n int) {
	var l int
	_ = l
	if m.MaxID != 0 {
		n += 1 + sovSocial(uint64(m.MaxID))
	}
	return n
}

func (m *SendPrivateChatArg) Size() (n int) {
	var l int
	_ = l
	if m.ToUid != 0 {
		n += 1 + sovSocial(uint64(m.ToUid))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *TargetChatChannel) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSocial(uint64(m.Channel))
	}
	return n
}

func (m *ChatItem) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovSocial(uint64(m.Time))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.PvpLevel != 0 {
		n += 1 + sovSocial(uint64(m.PvpLevel))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.CityID != 0 {
		n += 1 + sovSocial(uint64(m.CityID))
	}
	if m.CityJob != 0 {
		n += 1 + sovSocial(uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		n += 1 + sovSocial(uint64(m.CountryJob))
	}
	l = len(m.ChatPop)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.CountryFlag)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *Chatlet) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSocial(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *ChatList) Size() (n int) {
	var l int
	_ = l
	if len(m.Chatlets) > 0 {
		for _, e := range m.Chatlets {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	return n
}

func (m *ChatItemList) Size() (n int) {
	var l int
	_ = l
	if len(m.ChatItems) > 0 {
		for _, e := range m.ChatItems {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	return n
}

func (m *ChatNotify) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSocial(uint64(m.Channel))
	}
	if m.Chat != nil {
		l = m.Chat.Size()
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *SendChatArg) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSocial(uint64(m.Channel))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *BeInviteBattleArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *ReplyInviteBattleArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	if m.IsAgree {
		n += 2
	}
	return n
}

func (m *InviteBattleResult) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovSocial(uint64(m.Result))
	}
	return n
}

func (m *CSendChatArg) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSocial(uint64(m.Channel))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.PvpLevel != 0 {
		n += 1 + sovSocial(uint64(m.PvpLevel))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.HeadFrame)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.CountryID != 0 {
		n += 1 + sovSocial(uint64(m.CountryID))
	}
	if m.CityID != 0 {
		n += 1 + sovSocial(uint64(m.CityID))
	}
	if m.CityJob != 0 {
		n += 1 + sovSocial(uint64(m.CityJob))
	}
	if m.CountryJob != 0 {
		n += 1 + sovSocial(uint64(m.CountryJob))
	}
	l = len(m.ChatPop)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.CountryFlag)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *G2GReplyInviteBattleArg) Size() (n int) {
	var l int
	_ = l
	if m.BeInviter != nil {
		l = m.BeInviter.Size()
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.IsAgree {
		n += 2
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocial(uint64(m.TargetUid))
	}
	return n
}

func (m *WxInviteFriend) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.PvpLevel != 0 {
		n += 1 + sovSocial(uint64(m.PvpLevel))
	}
	return n
}

func (m *WxInviteReward) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSocial(uint64(m.ID))
	}
	if m.CurCnt != 0 {
		n += 1 + sovSocial(uint64(m.CurCnt))
	}
	if m.RewardCnt != 0 {
		n += 1 + sovSocial(uint64(m.RewardCnt))
	}
	return n
}

func (m *WxInviteFriendsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovSocial(uint64(l))
		}
	}
	return n
}

func (m *GetWxInviteRewardArg) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSocial(uint64(m.ID))
	}
	return n
}

func (m *GetWxInviteRewardReply) Size() (n int) {
	var l int
	_ = l
	if m.Gold != 0 {
		n += 1 + sovSocial(uint64(m.Gold))
	}
	if m.Jade != 0 {
		n += 1 + sovSocial(uint64(m.Jade))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovSocial(uint64(e))
		}
		n += 1 + sovSocial(uint64(l)) + l
	}
	if m.Ticket != 0 {
		n += 1 + sovSocial(uint64(m.Ticket))
	}
	return n
}

func (m *SubscribeChatArg) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSocial(uint64(m.Channel))
	}
	if m.CountryID != 0 {
		n += 1 + sovSocial(uint64(m.CountryID))
	}
	if m.Area != 0 {
		n += 1 + sovSocial(uint64(m.Area))
	}
	return n
}

func (m *ForbidChatArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocial(uint64(m.Uid))
	}
	if m.IsForbid {
		n += 2
	}
	return n
}

func (m *OnSendAdvertChatArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	return n
}

func (m *IpAddrArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.IsForbid {
		n += 2
	}
	return n
}

func (m *ImportWordArg) Size() (n int) {
	var l int
	_ = l
	l = len(m.AddWordsStr)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	l = len(m.DelWordsStr)
	if l > 0 {
		n += 1 + l + sovSocial(uint64(l))
	}
	if m.IsAccurate {
		n += 2
	}
	return n
}

func sovSocial(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSocial(x uint64) (n int) {
	return sovSocial(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TargetPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpScore", wireType)
			}
			m.PvpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleAmount", wireType)
			}
			m.BattleAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleWinAmount", wireType)
			}
			m.BattleWinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleWinAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstHandWinRate", wireType)
			}
			m.FirstHandWinRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstHandWinRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackHandWinRate", wireType)
			}
			m.BackHandWinRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackHandWinRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankScore", wireType)
			}
			m.RankScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavoriteCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FavoriteCards = append(m.FavoriteCards, &SkinGCard{})
			if err := m.FavoriteCards[len(m.FavoriteCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FightCards = append(m.FightCards, &SkinGCard{})
			if err := m.FightCards[len(m.FightCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFriend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFriend = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWechatFriend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWechatFriend = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanInviteBattle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanInviteBattle = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityJob", wireType)
			}
			m.CityJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryJob", wireType)
			}
			m.CountryJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignCountry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusIDs = append(m.StatusIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossAreaHonor", wireType)
			}
			m.CrossAreaHonor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossAreaHonor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpScore", wireType)
			}
			m.PvpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInBattle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInBattle = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOnlineTime", wireType)
			}
			m.LastOnlineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOnlineTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWechatFriend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWechatFriend = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpCamp", wireType)
			}
			m.PvpCamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpCamp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebornCnt", wireType)
			}
			m.RebornCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebornCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankScore", wireType)
			}
			m.RankScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOpponent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastOpponent == nil {
				m.LastOpponent = &FriendItem{}
			}
			if err := m.LastOpponent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &FriendItem{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpScore", wireType)
			}
			m.PvpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendApplyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendApplyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendApplyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendApplys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendApplys = append(m.FriendApplys, &FriendApply{})
			if err := m.FriendApplys[len(m.FriendApplys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyFriendApplyArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyFriendApplyArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyFriendApplyArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendApplyNotifyArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendApplyNotifyArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendApplyNotifyArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInvite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInvite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendApplyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendApplyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendApplyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateChatItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateChatItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateChatItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &PrivateChatMsg{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpLevel", wireType)
			}
			m.PvpLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatPop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatPop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateChatList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateChatList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateChatList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateChatItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateChatItems = append(m.PrivateChatItems, &PrivateChatItem{})
			if err := m.PrivateChatItems[len(m.PrivateChatItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchPrivateChatArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchPrivateChatArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchPrivateChatArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendPrivateChatArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendPrivateChatArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendPrivateChatArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUid", wireType)
			}
			m.ToUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetChatChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetChatChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetChatChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ChatChannel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpLevel", wireType)
			}
			m.PvpLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityJob", wireType)
			}
			m.CityJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryJob", wireType)
			}
			m.CountryJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatPop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatPop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chatlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chatlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chatlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Chatlet_TypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatlets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chatlets = append(m.Chatlets, &Chatlet{})
			if err := m.Chatlets[len(m.Chatlets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatItems = append(m.ChatItems, &ChatItem{})
			if err := m.ChatItems[len(m.ChatItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ChatChannel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chat == nil {
				m.Chat = &Chatlet{}
			}
			if err := m.Chat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendChatArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendChatArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendChatArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ChatChannel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeInviteBattleArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeInviteBattleArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeInviteBattleArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyInviteBattleArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyInviteBattleArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyInviteBattleArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteBattleResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteBattleResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteBattleResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (InviteBattleResult_InviteResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSendChatArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSendChatArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSendChatArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ChatChannel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpLevel", wireType)
			}
			m.PvpLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityJob", wireType)
			}
			m.CityJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryJob", wireType)
			}
			m.CountryJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryJob |= (CampaignJob(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatPop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatPop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G2GReplyInviteBattleArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G2GReplyInviteBattleArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G2GReplyInviteBattleArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeInviter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeInviter == nil {
				m.BeInviter = &FighterData{}
			}
			if err := m.BeInviter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxInviteFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxInviteFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxInviteFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpLevel", wireType)
			}
			m.PvpLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxInviteReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxInviteReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxInviteReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurCnt", wireType)
			}
			m.CurCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCnt", wireType)
			}
			m.RewardCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxInviteFriendsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxInviteFriendsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxInviteFriendsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &WxInviteFriend{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &WxInviteReward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWxInviteRewardArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWxInviteRewardArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWxInviteRewardArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWxInviteRewardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWxInviteRewardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWxInviteRewardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jade", wireType)
			}
			m.Jade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSocial
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSocial
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSocial
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSocial
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeChatArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeChatArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeChatArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ChatChannel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			m.CountryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidChatArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidChatArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidChatArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsForbid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsForbid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnSendAdvertChatArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnSendAdvertChatArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnSendAdvertChatArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpAddrArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpAddrArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpAddrArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsForbid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsForbid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportWordArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportWordArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportWordArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddWordsStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddWordsStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelWordsStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocial
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelWordsStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAccurate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAccurate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSocial(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSocial
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocial
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSocial
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSocial
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSocial(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSocial = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSocial   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("social.proto", fileDescriptorSocial) }

var fileDescriptorSocial = []byte{
	// 1625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xce, 0xf8, 0xdf, 0xe5, 0x9f, 0x38, 0x9d, 0x10, 0x46, 0x11, 0x0a, 0xd6, 0x20, 0x65, 0x4d,
	0x60, 0x83, 0x94, 0x48, 0x48, 0xfc, 0xae, 0x1c, 0x1b, 0x67, 0x27, 0x4a, 0xb2, 0xd1, 0x24, 0x4b,
	0xb8, 0xb6, 0x3d, 0xbd, 0xce, 0x90, 0xf1, 0x8c, 0xd5, 0xd3, 0x0e, 0x9b, 0x1b, 0x17, 0xde, 0x81,
	0x1b, 0xe2, 0xca, 0x81, 0xe7, 0x80, 0x1b, 0x8f, 0x80, 0x96, 0xb7, 0xe0, 0x84, 0xba, 0x7b, 0xda,
	0xf3, 0xe7, 0x78, 0x15, 0xb4, 0x1c, 0xb8, 0x75, 0x55, 0x7d, 0xd5, 0xee, 0xae, 0xfa, 0xaa, 0xba,
	0x3c, 0x50, 0x0f, 0xfc, 0x91, 0x83, 0xdd, 0xbd, 0x29, 0xf5, 0x99, 0x8f, 0x72, 0xd3, 0xe1, 0x56,
	0x7d, 0x88, 0x19, 0x73, 0x89, 0xd4, 0x6c, 0xc1, 0x08, 0x53, 0x3b, 0x5c, 0x37, 0x47, 0x78, 0x32,
	0xc5, 0xce, 0xd8, 0x93, 0xb2, 0xd1, 0x86, 0xfa, 0x25, 0xa6, 0x63, 0xc2, 0xce, 0x5d, 0x7c, 0x47,
	0x28, 0x6a, 0x41, 0xfe, 0xb9, 0x63, 0xeb, 0x5a, 0x5b, 0xeb, 0x14, 0x2c, 0xbe, 0x34, 0x7e, 0x2d,
	0x01, 0x48, 0xa3, 0xe9, 0xbd, 0xf0, 0x11, 0x82, 0xc2, 0x19, 0x9e, 0x10, 0x81, 0xa8, 0x5a, 0x62,
	0x8d, 0xb6, 0xa0, 0x72, 0x7e, 0x3b, 0xbd, 0x18, 0xf9, 0x94, 0xe8, 0xb9, 0xb6, 0xd6, 0x29, 0x5a,
	0x73, 0x19, 0x6d, 0x03, 0x3c, 0x25, 0xd8, 0x36, 0x27, 0xe3, 0xe7, 0xd4, 0xd5, 0xf3, 0xc2, 0x2b,
	0xa6, 0x41, 0x06, 0xd4, 0x0f, 0xc5, 0x61, 0xbb, 0x13, 0x7f, 0xe6, 0x31, 0xbd, 0x20, 0xfc, 0x13,
	0x3a, 0xd4, 0x81, 0x55, 0x29, 0x5f, 0x39, 0x5e, 0x08, 0x2b, 0x0a, 0x58, 0x5a, 0x8d, 0x76, 0xa1,
	0x35, 0x70, 0x68, 0xc0, 0x9e, 0x62, 0xcf, 0xbe, 0x72, 0x3c, 0x0b, 0x33, 0xa2, 0x97, 0x04, 0x34,
	0xa3, 0x97, 0xbb, 0x8e, 0x6e, 0xe2, 0xd0, 0xb2, 0xda, 0x35, 0xa1, 0x46, 0xef, 0x40, 0xd5, 0xc2,
	0xde, 0x8d, 0xbc, 0x60, 0x45, 0x60, 0x22, 0x05, 0x3a, 0x80, 0xc6, 0x00, 0xdf, 0xfa, 0xd4, 0x61,
	0xa4, 0x87, 0xa9, 0x1d, 0xe8, 0xd5, 0x76, 0xbe, 0x53, 0xdb, 0x6f, 0xec, 0x4d, 0x87, 0x7b, 0x17,
	0x37, 0x8e, 0x77, 0xc4, 0xb5, 0x56, 0x12, 0x83, 0x1e, 0x03, 0x0c, 0x9c, 0xf1, 0x35, 0x93, 0x1e,
	0xb0, 0xc8, 0x23, 0x06, 0xe0, 0x11, 0x36, 0x83, 0x01, 0x75, 0x88, 0x67, 0xeb, 0xb5, 0xb6, 0xd6,
	0xa9, 0x58, 0x73, 0x19, 0xed, 0x40, 0xd3, 0x0c, 0xae, 0xc8, 0xe8, 0x1a, 0xb3, 0x10, 0x51, 0x17,
	0x88, 0x94, 0x96, 0xdf, 0xb7, 0x87, 0x3d, 0xd3, 0xbb, 0x75, 0x18, 0x91, 0x71, 0xd3, 0x1b, 0x02,
	0x98, 0x56, 0x23, 0x1d, 0xca, 0x3d, 0x1e, 0x4e, 0x7a, 0xa7, 0x37, 0x45, 0xc2, 0x94, 0xc8, 0x23,
	0xc1, 0x73, 0x37, 0xa0, 0x9c, 0x02, 0xab, 0xc2, 0x16, 0x29, 0xd0, 0x26, 0x94, 0x7a, 0x0e, 0xbb,
	0x33, 0xfb, 0x7a, 0x4b, 0x04, 0x29, 0x94, 0xd0, 0xfb, 0x50, 0xe6, 0xab, 0x63, 0x7f, 0xa8, 0xaf,
	0xb5, 0xb5, 0x4e, 0x73, 0x7f, 0x95, 0xdf, 0xb4, 0x17, 0x32, 0xf1, 0xd8, 0x1f, 0x5a, 0xca, 0x8e,
	0x3e, 0x02, 0x08, 0x7f, 0x8b, 0xa3, 0xd1, 0x62, 0x74, 0x0c, 0x22, 0x6f, 0x25, 0x4d, 0xea, 0xcc,
	0xeb, 0xe2, 0x5c, 0x69, 0x35, 0x3f, 0xfb, 0x05, 0xc3, 0x6c, 0x16, 0x98, 0xfd, 0x40, 0xdf, 0x68,
	0xe7, 0xf9, 0xd9, 0xe7, 0x0a, 0x1e, 0xc5, 0x1e, 0xf5, 0x83, 0xa0, 0x4b, 0x09, 0x7e, 0xea, 0x7b,
	0x3e, 0xd5, 0xdf, 0x12, 0x77, 0x48, 0x69, 0x51, 0x1b, 0x6a, 0xe1, 0x86, 0x03, 0x17, 0x8f, 0xf5,
	0x4d, 0xf1, 0x5b, 0x71, 0x95, 0xf1, 0x4b, 0x1e, 0x40, 0x86, 0xdc, 0x64, 0x64, 0x92, 0xad, 0xa8,
	0x79, 0x09, 0xe5, 0xee, 0x29, 0xa1, 0x7c, 0xaa, 0x84, 0x44, 0xf2, 0x9f, 0x79, 0xae, 0xe3, 0x11,
	0x51, 0x1e, 0x22, 0xf9, 0x52, 0xe6, 0xe5, 0x65, 0x06, 0xa6, 0x17, 0xe6, 0xb3, 0x28, 0xac, 0x31,
	0x4d, 0xaa, 0xfc, 0x4a, 0x99, 0xf2, 0xdb, 0x81, 0xe6, 0x09, 0x0e, 0x98, 0xdc, 0xed, 0xd2, 0x99,
	0xa8, 0x1a, 0x48, 0x69, 0x17, 0x90, 0xac, 0xb2, 0x90, 0x64, 0x3a, 0x94, 0xcf, 0x6f, 0xa7, 0x3c,
	0xf4, 0x7a, 0x55, 0x6c, 0xa4, 0xc4, 0x38, 0xa9, 0x60, 0x09, 0xa9, 0x6a, 0x69, 0x52, 0xf1, 0xe2,
	0x23, 0x43, 0x9f, 0x7a, 0x3d, 0x8f, 0x09, 0x66, 0xf3, 0xe2, 0x53, 0x8a, 0x74, 0x3a, 0x1a, 0x99,
	0x74, 0x24, 0x8b, 0xb7, 0x99, 0x2a, 0x5e, 0xe3, 0x5b, 0x95, 0xab, 0x13, 0x27, 0x60, 0x68, 0x1f,
	0xea, 0xe2, 0xde, 0xd3, 0xa9, 0xef, 0x11, 0x8f, 0x89, 0xa4, 0xd5, 0xf6, 0x9b, 0x9c, 0x7f, 0x51,
	0x46, 0xad, 0x04, 0x06, 0x75, 0xa0, 0x2c, 0x6d, 0x81, 0x9e, 0x13, 0x65, 0x9c, 0x86, 0x2b, 0xb3,
	0xf1, 0xbb, 0x06, 0x35, 0xb9, 0xee, 0x4e, 0xa7, 0xee, 0xdd, 0x1b, 0x60, 0x46, 0x32, 0xbb, 0x85,
	0x4c, 0x76, 0x63, 0x31, 0x2f, 0x2e, 0x89, 0x79, 0x29, 0x1d, 0xf3, 0x54, 0x54, 0xcb, 0x59, 0x92,
	0x0f, 0x60, 0x35, 0x76, 0x15, 0x11, 0xbc, 0x03, 0xa8, 0xc7, 0x54, 0x81, 0xae, 0x89, 0x68, 0xac,
	0x46, 0xd1, 0x10, 0x7a, 0x2b, 0x01, 0x32, 0xba, 0xb0, 0x6e, 0x91, 0xa9, 0x7b, 0x17, 0x53, 0x76,
	0xe9, 0x78, 0x41, 0x68, 0x74, 0x28, 0x9b, 0x41, 0x77, 0x4c, 0x89, 0x8c, 0x4e, 0xc5, 0x52, 0xa2,
	0x71, 0x06, 0x1b, 0x31, 0xef, 0x33, 0x9f, 0x39, 0x2f, 0xc4, 0x1e, 0x5b, 0x50, 0x19, 0x50, 0x7f,
	0x12, 0x7b, 0xad, 0xe6, 0xb2, 0x2c, 0x29, 0xd9, 0xf3, 0xc2, 0xed, 0xe6, 0xb2, 0xd1, 0x85, 0xb5,
	0xf8, 0x79, 0x49, 0x30, 0x73, 0xd9, 0xc2, 0x67, 0xef, 0xfe, 0x23, 0x7d, 0x0c, 0xcd, 0x73, 0xea,
	0xdc, 0x62, 0x46, 0x7a, 0xd7, 0x98, 0x9d, 0x06, 0x63, 0xee, 0x2f, 0xaa, 0x4b, 0x13, 0x19, 0x14,
	0x6b, 0x7e, 0xc9, 0xd3, 0x60, 0x1c, 0x26, 0x9b, 0x2f, 0x8d, 0x9f, 0x72, 0xb0, 0x1a, 0x73, 0x7c,
	0x40, 0xff, 0x78, 0xdd, 0x33, 0xbb, 0x03, 0x85, 0xd3, 0x60, 0x1c, 0xe8, 0x05, 0x91, 0x14, 0xc4,
	0x93, 0x92, 0x3c, 0xa1, 0x25, 0xec, 0xa8, 0x09, 0x39, 0xb3, 0x1f, 0xbe, 0xae, 0x39, 0xb3, 0x1f,
	0xb2, 0xef, 0x84, 0xdc, 0x12, 0x37, 0x7c, 0x48, 0xe7, 0x72, 0x9c, 0x5d, 0xe5, 0x25, 0xec, 0xaa,
	0xa4, 0xd9, 0xc5, 0xfd, 0xae, 0x31, 0x3b, 0xf7, 0x65, 0x8f, 0xe0, 0x7e, 0x52, 0x4c, 0xf3, 0x0e,
	0xb2, 0xbc, 0xb3, 0x12, 0x01, 0x12, 0xbc, 0x7b, 0x02, 0xad, 0x54, 0xcc, 0x14, 0xf7, 0xd6, 0x53,
	0xd7, 0x14, 0xe5, 0x98, 0x01, 0x1b, 0x1f, 0xc0, 0xfa, 0x80, 0xb0, 0xd1, 0x75, 0xcc, 0xc0, 0xf9,
	0xb3, 0x01, 0xc5, 0x53, 0xfc, 0xd2, 0xec, 0x87, 0x39, 0x93, 0x82, 0xf1, 0x39, 0xa0, 0x0b, 0xe2,
	0xd9, 0x59, 0xec, 0xa5, 0x1f, 0xa5, 0x49, 0x0a, 0x0b, 0x12, 0xfc, 0x25, 0xac, 0xc9, 0x71, 0x8b,
	0x3b, 0xf6, 0xae, 0xb1, 0xe7, 0x11, 0x57, 0x3c, 0x8f, 0x72, 0x29, 0xdc, 0xd5, 0x83, 0x17, 0x21,
	0x2c, 0x65, 0x37, 0xfe, 0xce, 0x41, 0xe5, 0x0d, 0x33, 0x43, 0x31, 0xb3, 0x90, 0x65, 0x66, 0x71,
	0x7e, 0xf0, 0xff, 0x84, 0x07, 0xd1, 0xb8, 0x50, 0xbd, 0x6f, 0x5c, 0x80, 0x07, 0x8d, 0x0b, 0xb5,
	0xd7, 0x8f, 0x0b, 0x31, 0xee, 0xd5, 0x97, 0x72, 0x2f, 0xfb, 0x92, 0x18, 0x81, 0xf4, 0x75, 0x09,
	0x6f, 0xfa, 0x85, 0xcb, 0xbb, 0x29, 0x09, 0xf3, 0xb5, 0xa1, 0xf2, 0xe5, 0x12, 0xb6, 0xc7, 0xf5,
	0x5f, 0x79, 0xb3, 0x89, 0x25, 0x10, 0x3c, 0xbc, 0x7d, 0xcc, 0xb0, 0x48, 0x49, 0xdd, 0x12, 0x6b,
	0x63, 0x17, 0x2a, 0x0a, 0x85, 0x00, 0x4a, 0x67, 0x3e, 0x9d, 0x60, 0xb7, 0xb5, 0x82, 0x10, 0x34,
	0xd5, 0xb9, 0x79, 0x1b, 0x1b, 0x91, 0x96, 0x66, 0x1c, 0xc8, 0x84, 0x0b, 0xa6, 0x3f, 0x92, 0x6b,
	0x97, 0x30, 0xc5, 0xf0, 0x5a, 0xec, 0x97, 0xad, 0xb9, 0xd1, 0xf8, 0x14, 0xea, 0x8a, 0x25, 0xc2,
	0x71, 0x17, 0xaa, 0xe9, 0xda, 0xa8, 0x2b, 0x4f, 0x51, 0x14, 0x91, 0xd9, 0xf8, 0x06, 0x80, 0x0b,
	0xb2, 0x8f, 0x3e, 0x80, 0x9b, 0xe8, 0x5d, 0x28, 0x70, 0xbd, 0xb8, 0x69, 0xea, 0x64, 0xc2, 0x60,
	0x1c, 0x43, 0x8d, 0x97, 0x8e, 0xaa, 0x99, 0x07, 0x6c, 0x9d, 0x2d, 0xa4, 0x4f, 0x60, 0xed, 0x90,
	0xc4, 0x87, 0xd6, 0xc5, 0xaf, 0xc6, 0x82, 0x82, 0x30, 0x0e, 0x61, 0x43, 0x3c, 0x39, 0xaf, 0xf7,
	0xbe, 0xbf, 0xc1, 0xff, 0xa0, 0x01, 0x8a, 0xfb, 0x87, 0xaf, 0xc4, 0x67, 0x50, 0x92, 0xab, 0xf0,
	0x46, 0xef, 0xf1, 0x1b, 0x65, 0x71, 0xa1, 0x4a, 0x0a, 0x56, 0xe8, 0x62, 0xec, 0x43, 0x3d, 0xae,
	0x47, 0x55, 0x28, 0x8a, 0x1f, 0x6b, 0xad, 0x70, 0x92, 0x58, 0xe4, 0xc5, 0x2c, 0x20, 0x2d, 0x0d,
	0xd5, 0xa0, 0xcc, 0x6b, 0xd4, 0x9f, 0xb1, 0x56, 0xce, 0xf8, 0x39, 0x0f, 0xf5, 0xde, 0x9b, 0x0a,
	0xea, 0x3c, 0x5a, 0xf9, 0x7b, 0xdb, 0x47, 0x76, 0xc4, 0x88, 0x37, 0x86, 0xe2, 0xfd, 0x8d, 0xa1,
	0xb4, 0xa4, 0x31, 0x94, 0x17, 0x8c, 0x7c, 0x21, 0xd0, 0xec, 0x8b, 0xb6, 0xd1, 0xb0, 0x22, 0xc5,
	0xff, 0xae, 0x6d, 0x7c, 0xaf, 0xc1, 0xdb, 0x47, 0xfb, 0x47, 0x0b, 0x39, 0xf7, 0x18, 0xaa, 0x8a,
	0xc6, 0x34, 0x9c, 0x36, 0xe5, 0xc0, 0xc4, 0xff, 0xfa, 0x11, 0xca, 0xbb, 0x85, 0x15, 0x21, 0xee,
	0x27, 0x24, 0x0f, 0x99, 0x7c, 0x58, 0x38, 0x85, 0xf3, 0x82, 0xc2, 0x91, 0xc2, 0x38, 0x81, 0xe6,
	0xd5, 0x4b, 0xb9, 0x49, 0x38, 0xa7, 0x27, 0xd3, 0xaa, 0x2d, 0x4d, 0x6b, 0x2e, 0x99, 0x56, 0xe3,
	0xeb, 0x68, 0x37, 0x8b, 0x7c, 0x87, 0xa9, 0x1d, 0x4e, 0x0d, 0xda, 0x7c, 0x6a, 0xe0, 0x29, 0x9a,
	0x51, 0x3e, 0xb0, 0xe7, 0xc2, 0x14, 0x09, 0x49, 0xce, 0xf2, 0xdc, 0x83, 0x9b, 0xf2, 0x6a, 0x96,
	0x0f, 0x15, 0x06, 0x85, 0x8d, 0xe4, 0x29, 0x03, 0x11, 0x33, 0xf4, 0x61, 0x34, 0x61, 0x6b, 0xd1,
	0xf8, 0x92, 0x84, 0xce, 0xa7, 0x6c, 0x8e, 0x96, 0x5b, 0xaa, 0x79, 0x3c, 0x81, 0x96, 0x26, 0x4b,
	0x41, 0x8c, 0x1d, 0xd8, 0x38, 0x22, 0x2c, 0x69, 0xe5, 0x89, 0x49, 0xdd, 0xc8, 0xf0, 0x60, 0x33,
	0x83, 0x93, 0xa7, 0x43, 0x50, 0x38, 0xf2, 0x5d, 0x5b, 0x4d, 0x76, 0x7c, 0xcd, 0x75, 0xc7, 0xd8,
	0x56, 0x1f, 0x43, 0xc4, 0x9a, 0x8f, 0x08, 0xf2, 0xcf, 0x7e, 0xbe, 0x9d, 0xef, 0x34, 0x2c, 0x29,
	0xf0, 0x48, 0x5d, 0x3a, 0xa3, 0x1b, 0xa2, 0x3e, 0x7c, 0x84, 0x92, 0xe1, 0x43, 0xeb, 0x62, 0x36,
	0x0c, 0x46, 0xd4, 0x19, 0x92, 0x7f, 0x51, 0xdb, 0x89, 0x0a, 0xca, 0xa5, 0x2b, 0x08, 0x41, 0x81,
	0xff, 0xa1, 0x0d, 0x33, 0x20, 0xd6, 0xc6, 0x17, 0xd0, 0x18, 0xf8, 0x74, 0xe8, 0xcc, 0x3b, 0x49,
	0xb6, 0x1d, 0xca, 0x8f, 0x10, 0x02, 0x14, 0x0d, 0xcd, 0x52, 0x36, 0x1e, 0xc1, 0xfa, 0x33, 0x8f,
	0x37, 0xa2, 0xae, 0x7d, 0x4b, 0x28, 0x8b, 0x6d, 0xc2, 0x7b, 0x8c, 0x16, 0x35, 0xee, 0x27, 0x50,
	0x35, 0xa7, 0x5d, 0xdb, 0xa6, 0xdc, 0xbc, 0x09, 0x25, 0x29, 0x84, 0x88, 0x50, 0x5a, 0xfa, 0x4b,
	0x01, 0x34, 0xcc, 0xc9, 0xd4, 0xa7, 0xec, 0xca, 0x97, 0xa9, 0x6a, 0x43, 0xad, 0x6b, 0xdb, 0x5c,
	0x0a, 0x2e, 0x98, 0xda, 0x29, 0xae, 0xe2, 0x88, 0x3e, 0x71, 0xe7, 0x08, 0xd9, 0xf1, 0xe2, 0x2a,
	0xf9, 0x37, 0xba, 0x3b, 0x1a, 0xcd, 0x28, 0x66, 0xb2, 0xff, 0x89, 0xbf, 0xd1, 0x4a, 0xb3, 0xfb,
	0x18, 0x6a, 0xf1, 0x89, 0xad, 0x0a, 0xc5, 0x2b, 0x9f, 0xba, 0x76, 0x6b, 0x05, 0xad, 0x67, 0xbe,
	0x3f, 0xb4, 0xb4, 0xc3, 0xd6, 0x6f, 0xaf, 0xb6, 0xb5, 0x3f, 0x5e, 0x6d, 0x6b, 0x7f, 0xbe, 0xda,
	0xd6, 0x7e, 0xfc, 0x6b, 0x7b, 0x65, 0x58, 0x12, 0x9f, 0xdb, 0x0e, 0xfe, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xc5, 0x27, 0xa8, 0x3f, 0xac, 0x13, 0x00, 0x00,
}
