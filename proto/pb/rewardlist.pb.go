// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rewardlist.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RewardList struct {
	StuffList      map[string]int32     `protobuf:"bytes,1,rep,name=StuffList" json:"StuffList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TreasureReward []*OpenTreasureReply `protobuf:"bytes,2,rep,name=TreasureReward" json:"TreasureReward,omitempty"`
}

func (m *RewardList) Reset()                    { *m = RewardList{} }
func (m *RewardList) String() string            { return proto.CompactTextString(m) }
func (*RewardList) ProtoMessage()               {}
func (*RewardList) Descriptor() ([]byte, []int) { return fileDescriptorRewardlist, []int{0} }

func (m *RewardList) GetStuffList() map[string]int32 {
	if m != nil {
		return m.StuffList
	}
	return nil
}

func (m *RewardList) GetTreasureReward() []*OpenTreasureReply {
	if m != nil {
		return m.TreasureReward
	}
	return nil
}

func init() {
	proto.RegisterType((*RewardList)(nil), "pb.RewardList")
}
func (m *RewardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StuffList) > 0 {
		for k, _ := range m.StuffList {
			dAtA[i] = 0xa
			i++
			v := m.StuffList[k]
			mapSize := 1 + len(k) + sovRewardlist(uint64(len(k))) + 1 + sovRewardlist(uint64(v))
			i = encodeVarintRewardlist(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRewardlist(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintRewardlist(dAtA, i, uint64(v))
		}
	}
	if len(m.TreasureReward) > 0 {
		for _, msg := range m.TreasureReward {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRewardlist(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintRewardlist(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RewardList) Size() (n int) {
	var l int
	_ = l
	if len(m.StuffList) > 0 {
		for k, v := range m.StuffList {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRewardlist(uint64(len(k))) + 1 + sovRewardlist(uint64(v))
			n += mapEntrySize + 1 + sovRewardlist(uint64(mapEntrySize))
		}
	}
	if len(m.TreasureReward) > 0 {
		for _, e := range m.TreasureReward {
			l = e.Size()
			n += 1 + l + sovRewardlist(uint64(l))
		}
	}
	return n
}

func sovRewardlist(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRewardlist(x uint64) (n int) {
	return sovRewardlist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewardlist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StuffList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardlist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewardlist
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StuffList == nil {
				m.StuffList = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRewardlist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRewardlist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRewardlist
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRewardlist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRewardlist(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRewardlist
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StuffList[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasureReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardlist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewardlist
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreasureReward = append(m.TreasureReward, &OpenTreasureReply{})
			if err := m.TreasureReward[len(m.TreasureReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewardlist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRewardlist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewardlist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewardlist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewardlist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewardlist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRewardlist
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRewardlist
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRewardlist(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRewardlist = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewardlist   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rewardlist.proto", fileDescriptorRewardlist) }

var fileDescriptorRewardlist = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4a, 0x2d, 0x4f,
	0x2c, 0x4a, 0xc9, 0xc9, 0x2c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x92, 0xe2, 0x2b, 0x29, 0x4a, 0x4d, 0x2c, 0x2e, 0x2d, 0x4a, 0x85, 0x88, 0x29, 0x1d, 0x63, 0xe4,
	0xe2, 0x0a, 0x02, 0x2b, 0xf4, 0xc9, 0x2c, 0x2e, 0x11, 0xb2, 0xe6, 0xe2, 0x0c, 0x2e, 0x29, 0x4d,
	0x4b, 0x03, 0x71, 0x24, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x64, 0xf5, 0x0a, 0x92, 0xf4, 0x10,
	0x4a, 0xf4, 0xe0, 0xf2, 0xae, 0x79, 0x25, 0x45, 0x95, 0x41, 0x08, 0xf5, 0x42, 0xb6, 0x5c, 0x7c,
	0x21, 0x50, 0xd3, 0x21, 0xea, 0x25, 0x98, 0xc0, 0x26, 0x88, 0x82, 0x4c, 0xf0, 0x2f, 0x48, 0xcd,
	0x43, 0xc8, 0x16, 0xe4, 0x54, 0x06, 0xa1, 0x29, 0x96, 0xb2, 0xe1, 0xe2, 0x43, 0x35, 0x5b, 0x48,
	0x80, 0x8b, 0x39, 0x3b, 0xb5, 0x52, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x14, 0x12,
	0xe1, 0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0x70,
	0xac, 0x98, 0x2c, 0x18, 0x9d, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x3e, 0x34, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0x9c, 0x1c, 0xc3, 0x09, 0x01, 0x00, 0x00,
}
