// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rank.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RankType int32

const (
	RankType_RtUnknow    RankType = 0
	RankType_RtLadder    RankType = 1
	RankType_RtSeason    RankType = 2
	RankType_RtCrossArea RankType = 3
)

var RankType_name = map[int32]string{
	0: "RtUnknow",
	1: "RtLadder",
	2: "RtSeason",
	3: "RtCrossArea",
}
var RankType_value = map[string]int32{
	"RtUnknow":    0,
	"RtLadder":    1,
	"RtSeason":    2,
	"RtCrossArea": 3,
}

func (x RankType) String() string {
	return proto.EnumName(RankType_name, int32(x))
}
func (RankType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRank, []int{0} }

type FetchRankArg struct {
	Type RankType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.RankType" json:"Type,omitempty"`
}

func (m *FetchRankArg) Reset()                    { *m = FetchRankArg{} }
func (m *FetchRankArg) String() string            { return proto.CompactTextString(m) }
func (*FetchRankArg) ProtoMessage()               {}
func (*FetchRankArg) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{0} }

func (m *FetchRankArg) GetType() RankType {
	if m != nil {
		return m.Type
	}
	return RankType_RtUnknow
}

type RankItem struct {
	Uid            uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	PvpScore       int32  `protobuf:"varint,3,opt,name=PvpScore,proto3" json:"PvpScore,omitempty"`
	Rank           int32  `protobuf:"varint,4,opt,name=Rank,proto3" json:"Rank,omitempty"`
	LastRank       int32  `protobuf:"varint,5,opt,name=LastRank,proto3" json:"LastRank,omitempty"`
	Camp           int32  `protobuf:"varint,6,opt,name=Camp,proto3" json:"Camp,omitempty"`
	WinDiff        int32  `protobuf:"varint,7,opt,name=WinDiff,proto3" json:"WinDiff,omitempty"`
	CrossAreaHonor int32  `protobuf:"varint,8,opt,name=CrossAreaHonor,proto3" json:"CrossAreaHonor,omitempty"`
	// int32 CrossAreaBlotHonor = 9;  // 跨区耻辱勋章
	RankScore int32 `protobuf:"varint,9,opt,name=RankScore,proto3" json:"RankScore,omitempty"`
}

func (m *RankItem) Reset()                    { *m = RankItem{} }
func (m *RankItem) String() string            { return proto.CompactTextString(m) }
func (*RankItem) ProtoMessage()               {}
func (*RankItem) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{1} }

func (m *RankItem) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RankItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RankItem) GetPvpScore() int32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *RankItem) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RankItem) GetLastRank() int32 {
	if m != nil {
		return m.LastRank
	}
	return 0
}

func (m *RankItem) GetCamp() int32 {
	if m != nil {
		return m.Camp
	}
	return 0
}

func (m *RankItem) GetWinDiff() int32 {
	if m != nil {
		return m.WinDiff
	}
	return 0
}

func (m *RankItem) GetCrossAreaHonor() int32 {
	if m != nil {
		return m.CrossAreaHonor
	}
	return 0
}

func (m *RankItem) GetRankScore() int32 {
	if m != nil {
		return m.RankScore
	}
	return 0
}

type RankInfo struct {
	UpdateTime int32       `protobuf:"varint,1,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	Items      []*RankItem `protobuf:"bytes,2,rep,name=Items" json:"Items,omitempty"`
}

func (m *RankInfo) Reset()                    { *m = RankInfo{} }
func (m *RankInfo) String() string            { return proto.CompactTextString(m) }
func (*RankInfo) ProtoMessage()               {}
func (*RankInfo) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{2} }

func (m *RankInfo) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *RankInfo) GetItems() []*RankItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type FetchRankUserArg struct {
	Uid uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (m *FetchRankUserArg) Reset()                    { *m = FetchRankUserArg{} }
func (m *FetchRankUserArg) String() string            { return proto.CompactTextString(m) }
func (*FetchRankUserArg) ProtoMessage()               {}
func (*FetchRankUserArg) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{3} }

func (m *FetchRankUserArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type RankUser struct {
	FightCards []*SkinGCard `protobuf:"bytes,1,rep,name=FightCards" json:"FightCards,omitempty"`
}

func (m *RankUser) Reset()                    { *m = RankUser{} }
func (m *RankUser) String() string            { return proto.CompactTextString(m) }
func (*RankUser) ProtoMessage()               {}
func (*RankUser) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{4} }

func (m *RankUser) GetFightCards() []*SkinGCard {
	if m != nil {
		return m.FightCards
	}
	return nil
}

type UpdatePvpScoreArg struct {
	Uid            uint64       `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name           string       `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	HandCards      []*SkinGCard `protobuf:"bytes,3,rep,name=HandCards" json:"HandCards,omitempty"`
	Camp           int32        `protobuf:"varint,4,opt,name=Camp,proto3" json:"Camp,omitempty"`
	PvpScore       int32        `protobuf:"varint,5,opt,name=PvpScore,proto3" json:"PvpScore,omitempty"`
	WinDiff        int32        `protobuf:"varint,6,opt,name=WinDiff,proto3" json:"WinDiff,omitempty"`
	WinCnt         int32        `protobuf:"varint,7,opt,name=WinCnt,proto3" json:"WinCnt,omitempty"`
	RebornCnt      int32        `protobuf:"varint,8,opt,name=RebornCnt,proto3" json:"RebornCnt,omitempty"`
	Area           int32        `protobuf:"varint,9,opt,name=Area,proto3" json:"Area,omitempty"`
	CrossAreaHonor int32        `protobuf:"varint,10,opt,name=CrossAreaHonor,proto3" json:"CrossAreaHonor,omitempty"`
	// int32 CrossAreaBlotHonor = 11;  // 跨区耻辱勋章
	RankScore int32 `protobuf:"varint,11,opt,name=RankScore,proto3" json:"RankScore,omitempty"`
}

func (m *UpdatePvpScoreArg) Reset()                    { *m = UpdatePvpScoreArg{} }
func (m *UpdatePvpScoreArg) String() string            { return proto.CompactTextString(m) }
func (*UpdatePvpScoreArg) ProtoMessage()               {}
func (*UpdatePvpScoreArg) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{5} }

func (m *UpdatePvpScoreArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdatePvpScoreArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePvpScoreArg) GetHandCards() []*SkinGCard {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *UpdatePvpScoreArg) GetCamp() int32 {
	if m != nil {
		return m.Camp
	}
	return 0
}

func (m *UpdatePvpScoreArg) GetPvpScore() int32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *UpdatePvpScoreArg) GetWinDiff() int32 {
	if m != nil {
		return m.WinDiff
	}
	return 0
}

func (m *UpdatePvpScoreArg) GetWinCnt() int32 {
	if m != nil {
		return m.WinCnt
	}
	return 0
}

func (m *UpdatePvpScoreArg) GetRebornCnt() int32 {
	if m != nil {
		return m.RebornCnt
	}
	return 0
}

func (m *UpdatePvpScoreArg) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *UpdatePvpScoreArg) GetCrossAreaHonor() int32 {
	if m != nil {
		return m.CrossAreaHonor
	}
	return 0
}

func (m *UpdatePvpScoreArg) GetRankScore() int32 {
	if m != nil {
		return m.RankScore
	}
	return 0
}

type G2RSeasonPvpEndReply struct {
	RankUids []uint64 `protobuf:"varint,1,rep,packed,name=RankUids" json:"RankUids,omitempty"`
}

func (m *G2RSeasonPvpEndReply) Reset()                    { *m = G2RSeasonPvpEndReply{} }
func (m *G2RSeasonPvpEndReply) String() string            { return proto.CompactTextString(m) }
func (*G2RSeasonPvpEndReply) ProtoMessage()               {}
func (*G2RSeasonPvpEndReply) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{6} }

func (m *G2RSeasonPvpEndReply) GetRankUids() []uint64 {
	if m != nil {
		return m.RankUids
	}
	return nil
}

type GFetchRankUserArg struct {
	Uid  uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Area int32  `protobuf:"varint,2,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *GFetchRankUserArg) Reset()                    { *m = GFetchRankUserArg{} }
func (m *GFetchRankUserArg) String() string            { return proto.CompactTextString(m) }
func (*GFetchRankUserArg) ProtoMessage()               {}
func (*GFetchRankUserArg) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{7} }

func (m *GFetchRankUserArg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GFetchRankUserArg) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type GFetchRankArg struct {
	Type RankType `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.RankType" json:"Type,omitempty"`
	Area int32    `protobuf:"varint,2,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *GFetchRankArg) Reset()                    { *m = GFetchRankArg{} }
func (m *GFetchRankArg) String() string            { return proto.CompactTextString(m) }
func (*GFetchRankArg) ProtoMessage()               {}
func (*GFetchRankArg) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{8} }

func (m *GFetchRankArg) GetType() RankType {
	if m != nil {
		return m.Type
	}
	return RankType_RtUnknow
}

func (m *GFetchRankArg) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type RankHonorInfo struct {
	Uids   []uint64 `protobuf:"varint,1,rep,packed,name=Uids" json:"Uids,omitempty"`
	Honors []int32  `protobuf:"varint,2,rep,packed,name=Honors" json:"Honors,omitempty"`
}

func (m *RankHonorInfo) Reset()                    { *m = RankHonorInfo{} }
func (m *RankHonorInfo) String() string            { return proto.CompactTextString(m) }
func (*RankHonorInfo) ProtoMessage()               {}
func (*RankHonorInfo) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{9} }

func (m *RankHonorInfo) GetUids() []uint64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

func (m *RankHonorInfo) GetHonors() []int32 {
	if m != nil {
		return m.Honors
	}
	return nil
}

type UserRankingInfo struct {
	Uids []uint64 `protobuf:"varint,1,rep,packed,name=Uids" json:"Uids,omitempty"`
}

func (m *UserRankingInfo) Reset()                    { *m = UserRankingInfo{} }
func (m *UserRankingInfo) String() string            { return proto.CompactTextString(m) }
func (*UserRankingInfo) ProtoMessage()               {}
func (*UserRankingInfo) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{10} }

func (m *UserRankingInfo) GetUids() []uint64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

type Area2UserRanking struct {
	Areas       []int32            `protobuf:"varint,1,rep,packed,name=Areas" json:"Areas,omitempty"`
	UserRanking []*UserRankingInfo `protobuf:"bytes,2,rep,name=UserRanking" json:"UserRanking,omitempty"`
}

func (m *Area2UserRanking) Reset()                    { *m = Area2UserRanking{} }
func (m *Area2UserRanking) String() string            { return proto.CompactTextString(m) }
func (*Area2UserRanking) ProtoMessage()               {}
func (*Area2UserRanking) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{11} }

func (m *Area2UserRanking) GetAreas() []int32 {
	if m != nil {
		return m.Areas
	}
	return nil
}

func (m *Area2UserRanking) GetUserRanking() []*UserRankingInfo {
	if m != nil {
		return m.UserRanking
	}
	return nil
}

type MaxRankArg struct {
	MaxRank int32 `protobuf:"varint,1,opt,name=MaxRank,proto3" json:"MaxRank,omitempty"`
}

func (m *MaxRankArg) Reset()                    { *m = MaxRankArg{} }
func (m *MaxRankArg) String() string            { return proto.CompactTextString(m) }
func (*MaxRankArg) ProtoMessage()               {}
func (*MaxRankArg) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{12} }

func (m *MaxRankArg) GetMaxRank() int32 {
	if m != nil {
		return m.MaxRank
	}
	return 0
}

func init() {
	proto.RegisterType((*FetchRankArg)(nil), "pb.FetchRankArg")
	proto.RegisterType((*RankItem)(nil), "pb.RankItem")
	proto.RegisterType((*RankInfo)(nil), "pb.RankInfo")
	proto.RegisterType((*FetchRankUserArg)(nil), "pb.FetchRankUserArg")
	proto.RegisterType((*RankUser)(nil), "pb.RankUser")
	proto.RegisterType((*UpdatePvpScoreArg)(nil), "pb.UpdatePvpScoreArg")
	proto.RegisterType((*G2RSeasonPvpEndReply)(nil), "pb.G2RSeasonPvpEndReply")
	proto.RegisterType((*GFetchRankUserArg)(nil), "pb.GFetchRankUserArg")
	proto.RegisterType((*GFetchRankArg)(nil), "pb.GFetchRankArg")
	proto.RegisterType((*RankHonorInfo)(nil), "pb.RankHonorInfo")
	proto.RegisterType((*UserRankingInfo)(nil), "pb.UserRankingInfo")
	proto.RegisterType((*Area2UserRanking)(nil), "pb.Area2UserRanking")
	proto.RegisterType((*MaxRankArg)(nil), "pb.MaxRankArg")
	proto.RegisterEnum("pb.RankType", RankType_name, RankType_value)
}
func (m *FetchRankArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchRankArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *RankItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRank(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PvpScore != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.PvpScore))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Rank))
	}
	if m.LastRank != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.LastRank))
	}
	if m.Camp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Camp))
	}
	if m.WinDiff != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.WinDiff))
	}
	if m.CrossAreaHonor != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.CrossAreaHonor))
	}
	if m.RankScore != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.RankScore))
	}
	return i, nil
}

func (m *RankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.UpdateTime))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FetchRankUserArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchRankUserArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *RankUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FightCards) > 0 {
		for _, msg := range m.FightCards {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdatePvpScoreArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePvpScoreArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRank(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.HandCards) > 0 {
		for _, msg := range m.HandCards {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Camp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Camp))
	}
	if m.PvpScore != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.PvpScore))
	}
	if m.WinDiff != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.WinDiff))
	}
	if m.WinCnt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.WinCnt))
	}
	if m.RebornCnt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.RebornCnt))
	}
	if m.Area != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Area))
	}
	if m.CrossAreaHonor != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.CrossAreaHonor))
	}
	if m.RankScore != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.RankScore))
	}
	return i, nil
}

func (m *G2RSeasonPvpEndReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G2RSeasonPvpEndReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RankUids) > 0 {
		dAtA2 := make([]byte, len(m.RankUids)*10)
		var j1 int
		for _, num := range m.RankUids {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *GFetchRankUserArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GFetchRankUserArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Uid))
	}
	if m.Area != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *GFetchRankArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GFetchRankArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Type))
	}
	if m.Area != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *RankHonorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankHonorInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA4 := make([]byte, len(m.Uids)*10)
		var j3 int
		for _, num := range m.Uids {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Honors) > 0 {
		dAtA6 := make([]byte, len(m.Honors)*10)
		var j5 int
		for _, num1 := range m.Honors {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintRank(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *UserRankingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRankingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA8 := make([]byte, len(m.Uids)*10)
		var j7 int
		for _, num := range m.Uids {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *Area2UserRanking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Area2UserRanking) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Areas) > 0 {
		dAtA10 := make([]byte, len(m.Areas)*10)
		var j9 int
		for _, num1 := range m.Areas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.UserRanking) > 0 {
		for _, msg := range m.UserRanking {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MaxRankArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxRankArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxRank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.MaxRank))
	}
	return i, nil
}

func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FetchRankArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRank(uint64(m.Type))
	}
	return n
}

func (m *RankItem) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRank(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.PvpScore != 0 {
		n += 1 + sovRank(uint64(m.PvpScore))
	}
	if m.Rank != 0 {
		n += 1 + sovRank(uint64(m.Rank))
	}
	if m.LastRank != 0 {
		n += 1 + sovRank(uint64(m.LastRank))
	}
	if m.Camp != 0 {
		n += 1 + sovRank(uint64(m.Camp))
	}
	if m.WinDiff != 0 {
		n += 1 + sovRank(uint64(m.WinDiff))
	}
	if m.CrossAreaHonor != 0 {
		n += 1 + sovRank(uint64(m.CrossAreaHonor))
	}
	if m.RankScore != 0 {
		n += 1 + sovRank(uint64(m.RankScore))
	}
	return n
}

func (m *RankInfo) Size() (n int) {
	var l int
	_ = l
	if m.UpdateTime != 0 {
		n += 1 + sovRank(uint64(m.UpdateTime))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	return n
}

func (m *FetchRankUserArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRank(uint64(m.Uid))
	}
	return n
}

func (m *RankUser) Size() (n int) {
	var l int
	_ = l
	if len(m.FightCards) > 0 {
		for _, e := range m.FightCards {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	return n
}

func (m *UpdatePvpScoreArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRank(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if len(m.HandCards) > 0 {
		for _, e := range m.HandCards {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if m.Camp != 0 {
		n += 1 + sovRank(uint64(m.Camp))
	}
	if m.PvpScore != 0 {
		n += 1 + sovRank(uint64(m.PvpScore))
	}
	if m.WinDiff != 0 {
		n += 1 + sovRank(uint64(m.WinDiff))
	}
	if m.WinCnt != 0 {
		n += 1 + sovRank(uint64(m.WinCnt))
	}
	if m.RebornCnt != 0 {
		n += 1 + sovRank(uint64(m.RebornCnt))
	}
	if m.Area != 0 {
		n += 1 + sovRank(uint64(m.Area))
	}
	if m.CrossAreaHonor != 0 {
		n += 1 + sovRank(uint64(m.CrossAreaHonor))
	}
	if m.RankScore != 0 {
		n += 1 + sovRank(uint64(m.RankScore))
	}
	return n
}

func (m *G2RSeasonPvpEndReply) Size() (n int) {
	var l int
	_ = l
	if len(m.RankUids) > 0 {
		l = 0
		for _, e := range m.RankUids {
			l += sovRank(uint64(e))
		}
		n += 1 + sovRank(uint64(l)) + l
	}
	return n
}

func (m *GFetchRankUserArg) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRank(uint64(m.Uid))
	}
	if m.Area != 0 {
		n += 1 + sovRank(uint64(m.Area))
	}
	return n
}

func (m *GFetchRankArg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRank(uint64(m.Type))
	}
	if m.Area != 0 {
		n += 1 + sovRank(uint64(m.Area))
	}
	return n
}

func (m *RankHonorInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovRank(uint64(e))
		}
		n += 1 + sovRank(uint64(l)) + l
	}
	if len(m.Honors) > 0 {
		l = 0
		for _, e := range m.Honors {
			l += sovRank(uint64(e))
		}
		n += 1 + sovRank(uint64(l)) + l
	}
	return n
}

func (m *UserRankingInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovRank(uint64(e))
		}
		n += 1 + sovRank(uint64(l)) + l
	}
	return n
}

func (m *Area2UserRanking) Size() (n int) {
	var l int
	_ = l
	if len(m.Areas) > 0 {
		l = 0
		for _, e := range m.Areas {
			l += sovRank(uint64(e))
		}
		n += 1 + sovRank(uint64(l)) + l
	}
	if len(m.UserRanking) > 0 {
		for _, e := range m.UserRanking {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	return n
}

func (m *MaxRankArg) Size() (n int) {
	var l int
	_ = l
	if m.MaxRank != 0 {
		n += 1 + sovRank(uint64(m.MaxRank))
	}
	return n
}

func sovRank(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FetchRankArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchRankArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchRankArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RankType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpScore", wireType)
			}
			m.PvpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRank", wireType)
			}
			m.LastRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Camp", wireType)
			}
			m.Camp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Camp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinDiff", wireType)
			}
			m.WinDiff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinDiff |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossAreaHonor", wireType)
			}
			m.CrossAreaHonor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossAreaHonor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankScore", wireType)
			}
			m.RankScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RankItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchRankUserArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchRankUserArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchRankUserArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FightCards = append(m.FightCards, &SkinGCard{})
			if err := m.FightCards[len(m.FightCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePvpScoreArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePvpScoreArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePvpScoreArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandCards = append(m.HandCards, &SkinGCard{})
			if err := m.HandCards[len(m.HandCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Camp", wireType)
			}
			m.Camp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Camp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpScore", wireType)
			}
			m.PvpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinDiff", wireType)
			}
			m.WinDiff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinDiff |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCnt", wireType)
			}
			m.WinCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebornCnt", wireType)
			}
			m.RebornCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebornCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossAreaHonor", wireType)
			}
			m.CrossAreaHonor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossAreaHonor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankScore", wireType)
			}
			m.RankScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G2RSeasonPvpEndReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G2RSeasonPvpEndReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G2RSeasonPvpEndReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RankUids = append(m.RankUids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRank
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RankUids = append(m.RankUids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RankUids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GFetchRankUserArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GFetchRankUserArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GFetchRankUserArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GFetchRankArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GFetchRankArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GFetchRankArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RankType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankHonorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankHonorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankHonorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRank
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Honors = append(m.Honors, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRank
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Honors = append(m.Honors, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Honors", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRankingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRankingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRankingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRank
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Area2UserRanking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Area2UserRanking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Area2UserRanking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Areas = append(m.Areas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRank
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Areas = append(m.Areas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Areas", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRanking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRanking = append(m.UserRanking, &UserRankingInfo{})
			if err := m.UserRanking[len(m.UserRanking)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxRankArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxRankArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxRankArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRank", wireType)
			}
			m.MaxRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRank
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRank(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRank = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rank.proto", fileDescriptorRank) }

var fileDescriptorRank = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x5e, 0xd2, 0xa4, 0x6b, 0x4f, 0xf7, 0x93, 0x99, 0x09, 0x45, 0x13, 0xaa, 0x2a, 0x0b, 0xa6,
	0x0a, 0xc4, 0x84, 0x8a, 0xb8, 0x98, 0xb8, 0x1a, 0xa5, 0xeb, 0x90, 0xc6, 0x34, 0xb9, 0xab, 0x76,
	0x89, 0xdc, 0xc6, 0xed, 0xa2, 0x52, 0x27, 0x72, 0xa2, 0xc1, 0xde, 0x84, 0xc7, 0xe1, 0x92, 0x4b,
	0x1e, 0x01, 0x95, 0x17, 0xe0, 0x11, 0xd0, 0xb1, 0x93, 0x34, 0x94, 0xa2, 0x89, 0xbb, 0xf3, 0x7d,
	0xfe, 0x7a, 0xce, 0xf1, 0xf7, 0xc5, 0x05, 0x50, 0x5c, 0xce, 0x8e, 0x62, 0x15, 0xa5, 0x11, 0xb1,
	0xe3, 0xd1, 0x01, 0x8c, 0xb9, 0x0a, 0x0c, 0xa6, 0x2f, 0x60, 0xeb, 0x54, 0xa4, 0xe3, 0x1b, 0xc6,
	0xe5, 0xec, 0x44, 0x4d, 0x49, 0x0b, 0x9c, 0xab, 0xbb, 0x58, 0xf8, 0x56, 0xcb, 0x6a, 0xef, 0x74,
	0xb6, 0x8e, 0xe2, 0xd1, 0x11, 0x1e, 0x21, 0xc7, 0xf4, 0x09, 0xfd, 0x65, 0x41, 0x0d, 0xa9, 0x77,
	0xa9, 0x98, 0x13, 0x0f, 0x2a, 0xc3, 0x30, 0xd0, 0x6a, 0x87, 0x61, 0x49, 0x08, 0x38, 0x17, 0x7c,
	0x2e, 0x7c, 0xbb, 0x65, 0xb5, 0xeb, 0x4c, 0xd7, 0xe4, 0x00, 0x6a, 0x97, 0xb7, 0xf1, 0x60, 0x1c,
	0x29, 0xe1, 0x57, 0x5a, 0x56, 0xdb, 0x65, 0x05, 0x46, 0x3d, 0x76, 0xf3, 0x1d, 0xcd, 0xeb, 0x1a,
	0xf5, 0xe7, 0x3c, 0x49, 0x35, 0xef, 0x1a, 0x7d, 0x8e, 0x51, 0xdf, 0xe5, 0xf3, 0xd8, 0xaf, 0x1a,
	0x3d, 0xd6, 0xc4, 0x87, 0xcd, 0xeb, 0x50, 0xbe, 0x0d, 0x27, 0x13, 0x7f, 0x53, 0xd3, 0x39, 0x24,
	0x87, 0xb0, 0xd3, 0x55, 0x51, 0x92, 0x9c, 0x28, 0xc1, 0xcf, 0x22, 0x19, 0x29, 0xbf, 0xa6, 0x05,
	0x2b, 0x2c, 0x79, 0x04, 0x75, 0xec, 0x6e, 0x56, 0xac, 0x6b, 0xc9, 0x92, 0xa0, 0x17, 0xd9, 0x8d,
	0xe5, 0x24, 0x22, 0x4d, 0x80, 0x61, 0x1c, 0xf0, 0x54, 0x5c, 0x85, 0x73, 0x63, 0x93, 0xcb, 0x4a,
	0x0c, 0xa1, 0xe0, 0xa2, 0x33, 0x89, 0x6f, 0xb7, 0x2a, 0xed, 0xc6, 0xd2, 0x41, 0x24, 0x99, 0x39,
	0xa2, 0x8f, 0xc1, 0x2b, 0x4c, 0x1f, 0x26, 0x42, 0xa1, 0xf1, 0x7f, 0x39, 0x49, 0x8f, 0xcd, 0x54,
	0x14, 0x90, 0xe7, 0x00, 0xa7, 0xe1, 0xf4, 0x26, 0xed, 0x72, 0x15, 0x24, 0xbe, 0xa5, 0x5b, 0x6f,
	0x63, 0xeb, 0xc1, 0x2c, 0x94, 0x7d, 0x64, 0x59, 0x49, 0x40, 0xbf, 0xda, 0xb0, 0x67, 0x76, 0xca,
	0x7d, 0x5e, 0x3b, 0x62, 0x6d, 0x58, 0xcf, 0xa0, 0x7e, 0xc6, 0x65, 0x60, 0x26, 0x55, 0xd6, 0x4d,
	0x5a, 0x9e, 0x17, 0x69, 0x38, 0xa5, 0x34, 0xca, 0x69, 0xbb, 0x2b, 0x69, 0x97, 0x92, 0xaa, 0xfe,
	0x99, 0xd4, 0x43, 0xa8, 0x5e, 0x87, 0xb2, 0x2b, 0xd3, 0x2c, 0xc2, 0x0c, 0xe9, 0x64, 0xc4, 0x28,
	0x52, 0xfa, 0xa8, 0x96, 0x25, 0x93, 0x13, 0x38, 0x1f, 0x43, 0xcc, 0x22, 0xd3, 0xf5, 0x9a, 0xcc,
	0xe1, 0xfe, 0xcc, 0x1b, 0xab, 0x99, 0x77, 0x60, 0xbf, 0xdf, 0x61, 0x03, 0xc1, 0x93, 0x48, 0x5e,
	0xde, 0xc6, 0x3d, 0x19, 0x30, 0x11, 0x7f, 0xbc, 0xc3, 0xdb, 0xe9, 0x54, 0xc2, 0x2c, 0x07, 0x87,
	0x15, 0x98, 0x1e, 0xc3, 0x5e, 0xff, 0xfe, 0x60, 0x8b, 0xa5, 0xed, 0xe5, 0xd2, 0xb4, 0x07, 0xdb,
	0xfd, 0xff, 0x7b, 0x88, 0x6b, 0xdb, 0xbc, 0x86, 0x6d, 0x54, 0xe9, 0x0b, 0xea, 0xcf, 0x95, 0x80,
	0x53, 0x5a, 0x55, 0xd7, 0x68, 0xb5, 0x16, 0x98, 0x6f, 0xd4, 0x65, 0x19, 0xa2, 0x4f, 0x60, 0x17,
	0x97, 0xc6, 0x06, 0xa1, 0x9c, 0xfe, 0xeb, 0xe7, 0xf4, 0x03, 0x78, 0x38, 0xab, 0x53, 0xd2, 0x92,
	0x7d, 0x70, 0x91, 0x33, 0x42, 0x97, 0x19, 0x40, 0x5e, 0x41, 0xa3, 0x24, 0xca, 0x5e, 0xc4, 0x03,
	0xbc, 0xca, 0xca, 0x1c, 0x56, 0xd6, 0xd1, 0x43, 0x80, 0xf7, 0xfc, 0x73, 0x6e, 0x84, 0x0f, 0x9b,
	0x19, 0xca, 0x5e, 0x5b, 0x0e, 0x9f, 0xf6, 0x4c, 0x14, 0xda, 0x8c, 0x2d, 0xa8, 0xb1, 0x74, 0x28,
	0x67, 0x32, 0xfa, 0xe4, 0x6d, 0x18, 0x74, 0xce, 0x83, 0x40, 0x28, 0xcf, 0x32, 0xc8, 0x24, 0xe9,
	0xd9, 0x64, 0x17, 0x1a, 0x2c, 0x2d, 0x3e, 0x05, 0xaf, 0xf2, 0xc6, 0xfb, 0xb6, 0x68, 0x5a, 0xdf,
	0x17, 0x4d, 0xeb, 0xc7, 0xa2, 0x69, 0x7d, 0xf9, 0xd9, 0xdc, 0x18, 0x55, 0xf5, 0x7f, 0xe3, 0xcb,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x91, 0x6a, 0x3a, 0x39, 0x05, 0x00, 0x00,
}
