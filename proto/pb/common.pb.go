// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServerStatus_StatusEnum int32

const (
	ServerStatus_Normal   ServerStatus_StatusEnum = 0
	ServerStatus_Maintain ServerStatus_StatusEnum = 1
)

var ServerStatus_StatusEnum_name = map[int32]string{
	0: "Normal",
	1: "Maintain",
}
var ServerStatus_StatusEnum_value = map[string]int32{
	"Normal":   0,
	"Maintain": 1,
}

func (x ServerStatus_StatusEnum) String() string {
	return proto.EnumName(ServerStatus_StatusEnum_name, int32(x))
}
func (ServerStatus_StatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCommon, []int{3, 0}
}

type Resource struct {
	Type   int32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Amount int32 `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func (m *Resource) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Resource) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type DailyTreasureShareInfo struct {
	HelperUid       uint64 `protobuf:"varint,1,opt,name=HelperUid,proto3" json:"HelperUid,omitempty"`
	HelperHeadImg   string `protobuf:"bytes,2,opt,name=HelperHeadImg,proto3" json:"HelperHeadImg,omitempty"`
	HelperHeadFrame string `protobuf:"bytes,3,opt,name=HelperHeadFrame,proto3" json:"HelperHeadFrame,omitempty"`
	HelperName      string `protobuf:"bytes,4,opt,name=HelperName,proto3" json:"HelperName,omitempty"`
}

func (m *DailyTreasureShareInfo) Reset()                    { *m = DailyTreasureShareInfo{} }
func (m *DailyTreasureShareInfo) String() string            { return proto.CompactTextString(m) }
func (*DailyTreasureShareInfo) ProtoMessage()               {}
func (*DailyTreasureShareInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

func (m *DailyTreasureShareInfo) GetHelperUid() uint64 {
	if m != nil {
		return m.HelperUid
	}
	return 0
}

func (m *DailyTreasureShareInfo) GetHelperHeadImg() string {
	if m != nil {
		return m.HelperHeadImg
	}
	return ""
}

func (m *DailyTreasureShareInfo) GetHelperHeadFrame() string {
	if m != nil {
		return m.HelperHeadFrame
	}
	return ""
}

func (m *DailyTreasureShareInfo) GetHelperName() string {
	if m != nil {
		return m.HelperName
	}
	return ""
}

type TargetArea struct {
	Area int32 `protobuf:"varint,1,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *TargetArea) Reset()                    { *m = TargetArea{} }
func (m *TargetArea) String() string            { return proto.CompactTextString(m) }
func (*TargetArea) ProtoMessage()               {}
func (*TargetArea) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

func (m *TargetArea) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type ServerStatus struct {
	Status  ServerStatus_StatusEnum `protobuf:"varint,1,opt,name=Status,proto3,enum=pb.ServerStatus_StatusEnum" json:"Status,omitempty"`
	Message string                  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *ServerStatus) Reset()                    { *m = ServerStatus{} }
func (m *ServerStatus) String() string            { return proto.CompactTextString(m) }
func (*ServerStatus) ProtoMessage()               {}
func (*ServerStatus) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{3} }

func (m *ServerStatus) GetStatus() ServerStatus_StatusEnum {
	if m != nil {
		return m.Status
	}
	return ServerStatus_Normal
}

func (m *ServerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Resource)(nil), "pb.Resource")
	proto.RegisterType((*DailyTreasureShareInfo)(nil), "pb.DailyTreasureShareInfo")
	proto.RegisterType((*TargetArea)(nil), "pb.TargetArea")
	proto.RegisterType((*ServerStatus)(nil), "pb.ServerStatus")
	proto.RegisterEnum("pb.ServerStatus_StatusEnum", ServerStatus_StatusEnum_name, ServerStatus_StatusEnum_value)
}
func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *DailyTreasureShareInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyTreasureShareInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HelperUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.HelperUid))
	}
	if len(m.HelperHeadImg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.HelperHeadImg)))
		i += copy(dAtA[i:], m.HelperHeadImg)
	}
	if len(m.HelperHeadFrame) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.HelperHeadFrame)))
		i += copy(dAtA[i:], m.HelperHeadFrame)
	}
	if len(m.HelperName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.HelperName)))
		i += copy(dAtA[i:], m.HelperName)
	}
	return i, nil
}

func (m *TargetArea) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetArea) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Area != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *ServerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Resource) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	if m.Amount != 0 {
		n += 1 + sovCommon(uint64(m.Amount))
	}
	return n
}

func (m *DailyTreasureShareInfo) Size() (n int) {
	var l int
	_ = l
	if m.HelperUid != 0 {
		n += 1 + sovCommon(uint64(m.HelperUid))
	}
	l = len(m.HelperHeadImg)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.HelperHeadFrame)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.HelperName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *TargetArea) Size() (n int) {
	var l int
	_ = l
	if m.Area != 0 {
		n += 1 + sovCommon(uint64(m.Area))
	}
	return n
}

func (m *ServerStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCommon(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyTreasureShareInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyTreasureShareInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyTreasureShareInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperUid", wireType)
			}
			m.HelperUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelperUid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperHeadImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperHeadImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperHeadFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperHeadFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelperName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetArea) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetArea: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetArea: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ServerStatus_StatusEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("common.proto", fileDescriptorCommon) }

var fileDescriptorCommon = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0x02, 0x51,
	0x14, 0x86, 0xbd, 0x66, 0x93, 0x1e, 0xac, 0xe4, 0x2c, 0x64, 0xa0, 0x18, 0x64, 0x88, 0x70, 0x35,
	0x8b, 0x84, 0xf6, 0x46, 0x85, 0x2e, 0x74, 0x31, 0xda, 0x03, 0x1c, 0xf5, 0x64, 0x03, 0xde, 0xb9,
	0xc3, 0x99, 0x99, 0xc0, 0x07, 0xe8, 0x1d, 0x7a, 0x82, 0x9e, 0xa5, 0x65, 0x8f, 0x10, 0xf6, 0x22,
	0x31, 0x77, 0x14, 0xad, 0xd5, 0xfd, 0xff, 0x8f, 0x8f, 0x03, 0x3f, 0x17, 0x9a, 0x73, 0xa3, 0xb5,
	0x89, 0x83, 0x44, 0x4c, 0x66, 0xb0, 0x9a, 0xcc, 0xfc, 0x5b, 0xa8, 0x87, 0x9c, 0x9a, 0x5c, 0xe6,
	0x8c, 0x08, 0xb5, 0xe9, 0x3a, 0x61, 0x57, 0x75, 0x54, 0xf7, 0x38, 0xb4, 0x19, 0xdb, 0xe0, 0xf4,
	0xb5, 0xc9, 0xe3, 0xcc, 0xad, 0x5a, 0xba, 0x6d, 0xfe, 0x87, 0x82, 0xf6, 0x3d, 0x45, 0xab, 0xf5,
	0x54, 0x98, 0xd2, 0x5c, 0x78, 0xf2, 0x42, 0xc2, 0xc3, 0xf8, 0xd9, 0xe0, 0x25, 0x34, 0x06, 0xbc,
	0x4a, 0x58, 0x9e, 0xa2, 0x85, 0xbd, 0x55, 0x0b, 0xf7, 0x00, 0xaf, 0xe0, 0xb4, 0x2c, 0x03, 0xa6,
	0xc5, 0x50, 0x2f, 0xed, 0xdd, 0x46, 0xf8, 0x17, 0x62, 0x17, 0xce, 0xf7, 0xe0, 0x51, 0x48, 0xb3,
	0x7b, 0x64, 0xbd, 0xff, 0x18, 0x3d, 0x80, 0x12, 0x8d, 0x0b, 0xa9, 0x66, 0xa5, 0x03, 0xe2, 0x77,
	0x00, 0xa6, 0x24, 0x4b, 0xce, 0xfa, 0xc2, 0x54, 0x4c, 0x2c, 0xde, 0xdd, 0xc4, 0x22, 0xfb, 0x6f,
	0x0a, 0x9a, 0x13, 0x96, 0x57, 0x96, 0x49, 0x46, 0x59, 0x9e, 0x62, 0x0f, 0x9c, 0x32, 0x59, 0xed,
	0xec, 0xe6, 0x22, 0x48, 0x66, 0xc1, 0xa1, 0x11, 0x94, 0xcf, 0x43, 0x9c, 0xeb, 0x70, 0xab, 0xa2,
	0x0b, 0x27, 0x23, 0x4e, 0x53, 0x5a, 0xf2, 0x76, 0xd1, 0xae, 0xfa, 0xd7, 0x00, 0x7b, 0x1f, 0x01,
	0x9c, 0xb1, 0x11, 0x4d, 0xab, 0x56, 0x05, 0x9b, 0x50, 0x1f, 0x51, 0x14, 0x67, 0x14, 0xc5, 0x2d,
	0x75, 0xd7, 0xfa, 0xdc, 0x78, 0xea, 0x6b, 0xe3, 0xa9, 0xef, 0x8d, 0xa7, 0xde, 0x7f, 0xbc, 0xca,
	0xcc, 0xb1, 0xff, 0xd4, 0xfb, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x56, 0x73, 0xc9, 0x41, 0xb7, 0x01,
	0x00, 0x00,
}
