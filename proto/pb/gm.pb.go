// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gm.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AreaAccountTypeOnlineInfo struct {
	AccountType     AccountTypeEnum `protobuf:"varint,1,opt,name=AccountType,proto3,enum=pb.AccountTypeEnum" json:"AccountType,omitempty"`
	PlayerAmount    int32           `protobuf:"varint,2,opt,name=PlayerAmount,proto3" json:"PlayerAmount,omitempty"`
	TotalOnlineTime int32           `protobuf:"varint,3,opt,name=TotalOnlineTime,proto3" json:"TotalOnlineTime,omitempty"`
	Area            int32           `protobuf:"varint,4,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *AreaAccountTypeOnlineInfo) Reset()                    { *m = AreaAccountTypeOnlineInfo{} }
func (m *AreaAccountTypeOnlineInfo) String() string            { return proto.CompactTextString(m) }
func (*AreaAccountTypeOnlineInfo) ProtoMessage()               {}
func (*AreaAccountTypeOnlineInfo) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{0} }

func (m *AreaAccountTypeOnlineInfo) GetAccountType() AccountTypeEnum {
	if m != nil {
		return m.AccountType
	}
	return AccountTypeEnum_UnknowAccountType
}

func (m *AreaAccountTypeOnlineInfo) GetPlayerAmount() int32 {
	if m != nil {
		return m.PlayerAmount
	}
	return 0
}

func (m *AreaAccountTypeOnlineInfo) GetTotalOnlineTime() int32 {
	if m != nil {
		return m.TotalOnlineTime
	}
	return 0
}

func (m *AreaAccountTypeOnlineInfo) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type OnlineInfo struct {
	Infos []*AreaAccountTypeOnlineInfo `protobuf:"bytes,1,rep,name=Infos" json:"Infos,omitempty"`
}

func (m *OnlineInfo) Reset()                    { *m = OnlineInfo{} }
func (m *OnlineInfo) String() string            { return proto.CompactTextString(m) }
func (*OnlineInfo) ProtoMessage()               {}
func (*OnlineInfo) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{1} }

func (m *OnlineInfo) GetInfos() []*AreaAccountTypeOnlineInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type GetCardAmountLogArg struct {
	AccountType AccountTypeEnum `protobuf:"varint,1,opt,name=AccountType,proto3,enum=pb.AccountTypeEnum" json:"AccountType,omitempty"`
	Area        int32           `protobuf:"varint,2,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *GetCardAmountLogArg) Reset()                    { *m = GetCardAmountLogArg{} }
func (m *GetCardAmountLogArg) String() string            { return proto.CompactTextString(m) }
func (*GetCardAmountLogArg) ProtoMessage()               {}
func (*GetCardAmountLogArg) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{2} }

func (m *GetCardAmountLogArg) GetAccountType() AccountTypeEnum {
	if m != nil {
		return m.AccountType
	}
	return AccountTypeEnum_UnknowAccountType
}

func (m *GetCardAmountLogArg) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type CardAmountLog struct {
	CardID   uint32 `protobuf:"varint,1,opt,name=CardID,proto3" json:"CardID,omitempty"`
	Amount   int32  `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CardName string `protobuf:"bytes,3,opt,name=CardName,proto3" json:"CardName,omitempty"`
}

func (m *CardAmountLog) Reset()                    { *m = CardAmountLog{} }
func (m *CardAmountLog) String() string            { return proto.CompactTextString(m) }
func (*CardAmountLog) ProtoMessage()               {}
func (*CardAmountLog) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{3} }

func (m *CardAmountLog) GetCardID() uint32 {
	if m != nil {
		return m.CardID
	}
	return 0
}

func (m *CardAmountLog) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CardAmountLog) GetCardName() string {
	if m != nil {
		return m.CardName
	}
	return ""
}

type CardsAmountLog struct {
	AccountType AccountTypeEnum  `protobuf:"varint,1,opt,name=AccountType,proto3,enum=pb.AccountTypeEnum" json:"AccountType,omitempty"`
	Logs        []*CardAmountLog `protobuf:"bytes,2,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *CardsAmountLog) Reset()                    { *m = CardsAmountLog{} }
func (m *CardsAmountLog) String() string            { return proto.CompactTextString(m) }
func (*CardsAmountLog) ProtoMessage()               {}
func (*CardsAmountLog) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{4} }

func (m *CardsAmountLog) GetAccountType() AccountTypeEnum {
	if m != nil {
		return m.AccountType
	}
	return AccountTypeEnum_UnknowAccountType
}

func (m *CardsAmountLog) GetLogs() []*CardAmountLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type GetCardAmountLogReply struct {
	Logs []*CardsAmountLog `protobuf:"bytes,1,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *GetCardAmountLogReply) Reset()                    { *m = GetCardAmountLogReply{} }
func (m *GetCardAmountLogReply) String() string            { return proto.CompactTextString(m) }
func (*GetCardAmountLogReply) ProtoMessage()               {}
func (*GetCardAmountLogReply) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{5} }

func (m *GetCardAmountLogReply) GetLogs() []*CardsAmountLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type GetCardLevelLogArg struct {
	AccountType AccountTypeEnum `protobuf:"varint,1,opt,name=AccountType,proto3,enum=pb.AccountTypeEnum" json:"AccountType,omitempty"`
	CardID      uint32          `protobuf:"varint,2,opt,name=CardID,proto3" json:"CardID,omitempty"`
	Area        int32           `protobuf:"varint,3,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *GetCardLevelLogArg) Reset()                    { *m = GetCardLevelLogArg{} }
func (m *GetCardLevelLogArg) String() string            { return proto.CompactTextString(m) }
func (*GetCardLevelLogArg) ProtoMessage()               {}
func (*GetCardLevelLogArg) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{6} }

func (m *GetCardLevelLogArg) GetAccountType() AccountTypeEnum {
	if m != nil {
		return m.AccountType
	}
	return AccountTypeEnum_UnknowAccountType
}

func (m *GetCardLevelLogArg) GetCardID() uint32 {
	if m != nil {
		return m.CardID
	}
	return 0
}

func (m *GetCardLevelLogArg) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type CardLevelLog struct {
	CardID   uint32                      `protobuf:"varint,1,opt,name=CardID,proto3" json:"CardID,omitempty"`
	Levels   []*CardLevelLog_LevelAmount `protobuf:"bytes,2,rep,name=Levels" json:"Levels,omitempty"`
	CardName string                      `protobuf:"bytes,3,opt,name=CardName,proto3" json:"CardName,omitempty"`
}

func (m *CardLevelLog) Reset()                    { *m = CardLevelLog{} }
func (m *CardLevelLog) String() string            { return proto.CompactTextString(m) }
func (*CardLevelLog) ProtoMessage()               {}
func (*CardLevelLog) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{7} }

func (m *CardLevelLog) GetCardID() uint32 {
	if m != nil {
		return m.CardID
	}
	return 0
}

func (m *CardLevelLog) GetLevels() []*CardLevelLog_LevelAmount {
	if m != nil {
		return m.Levels
	}
	return nil
}

func (m *CardLevelLog) GetCardName() string {
	if m != nil {
		return m.CardName
	}
	return ""
}

type CardLevelLog_LevelAmount struct {
	Level  int32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Amount int32 `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *CardLevelLog_LevelAmount) Reset()                    { *m = CardLevelLog_LevelAmount{} }
func (m *CardLevelLog_LevelAmount) String() string            { return proto.CompactTextString(m) }
func (*CardLevelLog_LevelAmount) ProtoMessage()               {}
func (*CardLevelLog_LevelAmount) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{7, 0} }

func (m *CardLevelLog_LevelAmount) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CardLevelLog_LevelAmount) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CardsLevelLog struct {
	AccountType AccountTypeEnum `protobuf:"varint,1,opt,name=AccountType,proto3,enum=pb.AccountTypeEnum" json:"AccountType,omitempty"`
	Logs        []*CardLevelLog `protobuf:"bytes,2,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *CardsLevelLog) Reset()                    { *m = CardsLevelLog{} }
func (m *CardsLevelLog) String() string            { return proto.CompactTextString(m) }
func (*CardsLevelLog) ProtoMessage()               {}
func (*CardsLevelLog) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{8} }

func (m *CardsLevelLog) GetAccountType() AccountTypeEnum {
	if m != nil {
		return m.AccountType
	}
	return AccountTypeEnum_UnknowAccountType
}

func (m *CardsLevelLog) GetLogs() []*CardLevelLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type GetCardLevelLogReply struct {
	Logs []*CardsLevelLog `protobuf:"bytes,1,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *GetCardLevelLogReply) Reset()                    { *m = GetCardLevelLogReply{} }
func (m *GetCardLevelLogReply) String() string            { return proto.CompactTextString(m) }
func (*GetCardLevelLogReply) ProtoMessage()               {}
func (*GetCardLevelLogReply) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{9} }

func (m *GetCardLevelLogReply) GetLogs() []*CardsLevelLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type GetCardPoolLogArg struct {
	AccountType AccountTypeEnum `protobuf:"varint,1,opt,name=AccountType,proto3,enum=pb.AccountTypeEnum" json:"AccountType,omitempty"`
	PvpLevel    int32           `protobuf:"varint,2,opt,name=PvpLevel,proto3" json:"PvpLevel,omitempty"`
	Area        int32           `protobuf:"varint,3,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *GetCardPoolLogArg) Reset()                    { *m = GetCardPoolLogArg{} }
func (m *GetCardPoolLogArg) String() string            { return proto.CompactTextString(m) }
func (*GetCardPoolLogArg) ProtoMessage()               {}
func (*GetCardPoolLogArg) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{10} }

func (m *GetCardPoolLogArg) GetAccountType() AccountTypeEnum {
	if m != nil {
		return m.AccountType
	}
	return AccountTypeEnum_UnknowAccountType
}

func (m *GetCardPoolLogArg) GetPvpLevel() int32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

func (m *GetCardPoolLogArg) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type CardPoolLog struct {
	PvpLevel     int32                  `protobuf:"varint,1,opt,name=PvpLevel,proto3" json:"PvpLevel,omitempty"`
	BattleAmount int32                  `protobuf:"varint,2,opt,name=BattleAmount,proto3" json:"BattleAmount,omitempty"`
	CardLogs     []*CardPoolLog_CardLog `protobuf:"bytes,3,rep,name=CardLogs" json:"CardLogs,omitempty"`
}

func (m *CardPoolLog) Reset()                    { *m = CardPoolLog{} }
func (m *CardPoolLog) String() string            { return proto.CompactTextString(m) }
func (*CardPoolLog) ProtoMessage()               {}
func (*CardPoolLog) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{11} }

func (m *CardPoolLog) GetPvpLevel() int32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

func (m *CardPoolLog) GetBattleAmount() int32 {
	if m != nil {
		return m.BattleAmount
	}
	return 0
}

func (m *CardPoolLog) GetCardLogs() []*CardPoolLog_CardLog {
	if m != nil {
		return m.CardLogs
	}
	return nil
}

type CardPoolLog_CardLog struct {
	CardID   uint32 `protobuf:"varint,1,opt,name=CardID,proto3" json:"CardID,omitempty"`
	Amount   int32  `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CardName string `protobuf:"bytes,3,opt,name=CardName,proto3" json:"CardName,omitempty"`
}

func (m *CardPoolLog_CardLog) Reset()                    { *m = CardPoolLog_CardLog{} }
func (m *CardPoolLog_CardLog) String() string            { return proto.CompactTextString(m) }
func (*CardPoolLog_CardLog) ProtoMessage()               {}
func (*CardPoolLog_CardLog) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{11, 0} }

func (m *CardPoolLog_CardLog) GetCardID() uint32 {
	if m != nil {
		return m.CardID
	}
	return 0
}

func (m *CardPoolLog_CardLog) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CardPoolLog_CardLog) GetCardName() string {
	if m != nil {
		return m.CardName
	}
	return ""
}

type CardPoolsLog struct {
	AccountType AccountTypeEnum `protobuf:"varint,1,opt,name=AccountType,proto3,enum=pb.AccountTypeEnum" json:"AccountType,omitempty"`
	Logs        []*CardPoolLog  `protobuf:"bytes,2,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *CardPoolsLog) Reset()                    { *m = CardPoolsLog{} }
func (m *CardPoolsLog) String() string            { return proto.CompactTextString(m) }
func (*CardPoolsLog) ProtoMessage()               {}
func (*CardPoolsLog) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{12} }

func (m *CardPoolsLog) GetAccountType() AccountTypeEnum {
	if m != nil {
		return m.AccountType
	}
	return AccountTypeEnum_UnknowAccountType
}

func (m *CardPoolsLog) GetLogs() []*CardPoolLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type GetCardPoolLogReply struct {
	Logs []*CardPoolsLog `protobuf:"bytes,1,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *GetCardPoolLogReply) Reset()                    { *m = GetCardPoolLogReply{} }
func (m *GetCardPoolLogReply) String() string            { return proto.CompactTextString(m) }
func (*GetCardPoolLogReply) ProtoMessage()               {}
func (*GetCardPoolLogReply) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{13} }

func (m *GetCardPoolLogReply) GetLogs() []*CardPoolsLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type GmLoginNotice struct {
	Channel string       `protobuf:"bytes,1,opt,name=Channel,proto3" json:"Channel,omitempty"`
	Notice  *LoginNotice `protobuf:"bytes,2,opt,name=Notice" json:"Notice,omitempty"`
}

func (m *GmLoginNotice) Reset()                    { *m = GmLoginNotice{} }
func (m *GmLoginNotice) String() string            { return proto.CompactTextString(m) }
func (*GmLoginNotice) ProtoMessage()               {}
func (*GmLoginNotice) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{14} }

func (m *GmLoginNotice) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *GmLoginNotice) GetNotice() *LoginNotice {
	if m != nil {
		return m.Notice
	}
	return nil
}

func init() {
	proto.RegisterType((*AreaAccountTypeOnlineInfo)(nil), "pb.AreaAccountTypeOnlineInfo")
	proto.RegisterType((*OnlineInfo)(nil), "pb.OnlineInfo")
	proto.RegisterType((*GetCardAmountLogArg)(nil), "pb.GetCardAmountLogArg")
	proto.RegisterType((*CardAmountLog)(nil), "pb.CardAmountLog")
	proto.RegisterType((*CardsAmountLog)(nil), "pb.CardsAmountLog")
	proto.RegisterType((*GetCardAmountLogReply)(nil), "pb.GetCardAmountLogReply")
	proto.RegisterType((*GetCardLevelLogArg)(nil), "pb.GetCardLevelLogArg")
	proto.RegisterType((*CardLevelLog)(nil), "pb.CardLevelLog")
	proto.RegisterType((*CardLevelLog_LevelAmount)(nil), "pb.CardLevelLog.LevelAmount")
	proto.RegisterType((*CardsLevelLog)(nil), "pb.CardsLevelLog")
	proto.RegisterType((*GetCardLevelLogReply)(nil), "pb.GetCardLevelLogReply")
	proto.RegisterType((*GetCardPoolLogArg)(nil), "pb.GetCardPoolLogArg")
	proto.RegisterType((*CardPoolLog)(nil), "pb.CardPoolLog")
	proto.RegisterType((*CardPoolLog_CardLog)(nil), "pb.CardPoolLog.CardLog")
	proto.RegisterType((*CardPoolsLog)(nil), "pb.CardPoolsLog")
	proto.RegisterType((*GetCardPoolLogReply)(nil), "pb.GetCardPoolLogReply")
	proto.RegisterType((*GmLoginNotice)(nil), "pb.GmLoginNotice")
}
func (m *AreaAccountTypeOnlineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AreaAccountTypeOnlineInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.AccountType))
	}
	if m.PlayerAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.PlayerAmount))
	}
	if m.TotalOnlineTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.TotalOnlineTime))
	}
	if m.Area != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *OnlineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnlineInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCardAmountLogArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCardAmountLogArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.AccountType))
	}
	if m.Area != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *CardAmountLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardAmountLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.CardID))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Amount))
	}
	if len(m.CardName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.CardName)))
		i += copy(dAtA[i:], m.CardName)
	}
	return i, nil
}

func (m *CardsAmountLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardsAmountLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.AccountType))
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCardAmountLogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCardAmountLogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCardLevelLogArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCardLevelLogArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.AccountType))
	}
	if m.CardID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.CardID))
	}
	if m.Area != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *CardLevelLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardLevelLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.CardID))
	}
	if len(m.Levels) > 0 {
		for _, msg := range m.Levels {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CardName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.CardName)))
		i += copy(dAtA[i:], m.CardName)
	}
	return i, nil
}

func (m *CardLevelLog_LevelAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardLevelLog_LevelAmount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Level))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *CardsLevelLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardsLevelLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.AccountType))
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCardLevelLogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCardLevelLogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCardPoolLogArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCardPoolLogArg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.AccountType))
	}
	if m.PvpLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.PvpLevel))
	}
	if m.Area != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *CardPoolLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardPoolLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PvpLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.PvpLevel))
	}
	if m.BattleAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.BattleAmount))
	}
	if len(m.CardLogs) > 0 {
		for _, msg := range m.CardLogs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CardPoolLog_CardLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardPoolLog_CardLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.CardID))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Amount))
	}
	if len(m.CardName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.CardName)))
		i += copy(dAtA[i:], m.CardName)
	}
	return i, nil
}

func (m *CardPoolsLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardPoolsLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.AccountType))
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCardPoolLogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCardPoolLogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GmLoginNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GmLoginNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if m.Notice != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.Notice.Size()))
		n1, err := m.Notice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintGm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AreaAccountTypeOnlineInfo) Size() (n int) {
	var l int
	_ = l
	if m.AccountType != 0 {
		n += 1 + sovGm(uint64(m.AccountType))
	}
	if m.PlayerAmount != 0 {
		n += 1 + sovGm(uint64(m.PlayerAmount))
	}
	if m.TotalOnlineTime != 0 {
		n += 1 + sovGm(uint64(m.TotalOnlineTime))
	}
	if m.Area != 0 {
		n += 1 + sovGm(uint64(m.Area))
	}
	return n
}

func (m *OnlineInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *GetCardAmountLogArg) Size() (n int) {
	var l int
	_ = l
	if m.AccountType != 0 {
		n += 1 + sovGm(uint64(m.AccountType))
	}
	if m.Area != 0 {
		n += 1 + sovGm(uint64(m.Area))
	}
	return n
}

func (m *CardAmountLog) Size() (n int) {
	var l int
	_ = l
	if m.CardID != 0 {
		n += 1 + sovGm(uint64(m.CardID))
	}
	if m.Amount != 0 {
		n += 1 + sovGm(uint64(m.Amount))
	}
	l = len(m.CardName)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *CardsAmountLog) Size() (n int) {
	var l int
	_ = l
	if m.AccountType != 0 {
		n += 1 + sovGm(uint64(m.AccountType))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *GetCardAmountLogReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *GetCardLevelLogArg) Size() (n int) {
	var l int
	_ = l
	if m.AccountType != 0 {
		n += 1 + sovGm(uint64(m.AccountType))
	}
	if m.CardID != 0 {
		n += 1 + sovGm(uint64(m.CardID))
	}
	if m.Area != 0 {
		n += 1 + sovGm(uint64(m.Area))
	}
	return n
}

func (m *CardLevelLog) Size() (n int) {
	var l int
	_ = l
	if m.CardID != 0 {
		n += 1 + sovGm(uint64(m.CardID))
	}
	if len(m.Levels) > 0 {
		for _, e := range m.Levels {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	l = len(m.CardName)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *CardLevelLog_LevelAmount) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovGm(uint64(m.Level))
	}
	if m.Amount != 0 {
		n += 1 + sovGm(uint64(m.Amount))
	}
	return n
}

func (m *CardsLevelLog) Size() (n int) {
	var l int
	_ = l
	if m.AccountType != 0 {
		n += 1 + sovGm(uint64(m.AccountType))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *GetCardLevelLogReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *GetCardPoolLogArg) Size() (n int) {
	var l int
	_ = l
	if m.AccountType != 0 {
		n += 1 + sovGm(uint64(m.AccountType))
	}
	if m.PvpLevel != 0 {
		n += 1 + sovGm(uint64(m.PvpLevel))
	}
	if m.Area != 0 {
		n += 1 + sovGm(uint64(m.Area))
	}
	return n
}

func (m *CardPoolLog) Size() (n int) {
	var l int
	_ = l
	if m.PvpLevel != 0 {
		n += 1 + sovGm(uint64(m.PvpLevel))
	}
	if m.BattleAmount != 0 {
		n += 1 + sovGm(uint64(m.BattleAmount))
	}
	if len(m.CardLogs) > 0 {
		for _, e := range m.CardLogs {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *CardPoolLog_CardLog) Size() (n int) {
	var l int
	_ = l
	if m.CardID != 0 {
		n += 1 + sovGm(uint64(m.CardID))
	}
	if m.Amount != 0 {
		n += 1 + sovGm(uint64(m.Amount))
	}
	l = len(m.CardName)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *CardPoolsLog) Size() (n int) {
	var l int
	_ = l
	if m.AccountType != 0 {
		n += 1 + sovGm(uint64(m.AccountType))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *GetCardPoolLogReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *GmLoginNotice) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	if m.Notice != nil {
		l = m.Notice.Size()
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func sovGm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGm(x uint64) (n int) {
	return sovGm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AreaAccountTypeOnlineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AreaAccountTypeOnlineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AreaAccountTypeOnlineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= (AccountTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAmount", wireType)
			}
			m.PlayerAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOnlineTime", wireType)
			}
			m.TotalOnlineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOnlineTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnlineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnlineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnlineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &AreaAccountTypeOnlineInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCardAmountLogArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCardAmountLogArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCardAmountLogArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= (AccountTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardAmountLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardAmountLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardAmountLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID", wireType)
			}
			m.CardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardsAmountLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardsAmountLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardsAmountLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= (AccountTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &CardAmountLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCardAmountLogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCardAmountLogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCardAmountLogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &CardsAmountLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCardLevelLogArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCardLevelLogArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCardLevelLogArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= (AccountTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID", wireType)
			}
			m.CardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardLevelLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardLevelLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardLevelLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID", wireType)
			}
			m.CardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Levels = append(m.Levels, &CardLevelLog_LevelAmount{})
			if err := m.Levels[len(m.Levels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardLevelLog_LevelAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardsLevelLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardsLevelLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardsLevelLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= (AccountTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &CardLevelLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCardLevelLogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCardLevelLogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCardLevelLogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &CardsLevelLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCardPoolLogArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCardPoolLogArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCardPoolLogArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= (AccountTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpLevel", wireType)
			}
			m.PvpLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardPoolLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardPoolLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardPoolLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvpLevel", wireType)
			}
			m.PvpLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvpLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleAmount", wireType)
			}
			m.BattleAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardLogs = append(m.CardLogs, &CardPoolLog_CardLog{})
			if err := m.CardLogs[len(m.CardLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardPoolLog_CardLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID", wireType)
			}
			m.CardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardPoolsLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardPoolsLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardPoolsLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= (AccountTypeEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &CardPoolLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCardPoolLogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCardPoolLogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCardPoolLogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &CardPoolsLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GmLoginNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GmLoginNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GmLoginNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notice == nil {
				m.Notice = &LoginNotice{}
			}
			if err := m.Notice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gm.proto", fileDescriptorGm) }

var fileDescriptorGm = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x65, 0x93, 0x26, 0x4d, 0x27, 0x49, 0x9b, 0x6e, 0x0b, 0x18, 0x0b, 0xa2, 0xc8, 0xb4, 0x90,
	0x93, 0x0f, 0x0d, 0x9c, 0x2a, 0x84, 0xdc, 0x82, 0xaa, 0x4a, 0x51, 0x89, 0x56, 0xe1, 0xc4, 0x05,
	0x27, 0x2c, 0x26, 0xc8, 0xf6, 0x5a, 0xb6, 0x5b, 0x14, 0xbe, 0x84, 0x0f, 0x81, 0x7f, 0xe0, 0xc8,
	0x95, 0x1b, 0x0a, 0x3f, 0x82, 0xbc, 0xbb, 0x76, 0x76, 0x2d, 0xc2, 0x21, 0xe1, 0xd4, 0x9d, 0xd9,
	0x79, 0x3b, 0x6f, 0xde, 0x9b, 0x3a, 0xd0, 0xf0, 0x02, 0x3b, 0x8a, 0x59, 0xca, 0x70, 0x25, 0x9a,
	0x98, 0xad, 0xc8, 0x77, 0xe7, 0x34, 0x16, 0x19, 0xeb, 0x2b, 0x82, 0x7b, 0x4e, 0x4c, 0x5d, 0x67,
	0x3a, 0x65, 0xd7, 0x61, 0x3a, 0x9e, 0x47, 0xf4, 0x55, 0xe8, 0xcf, 0x42, 0x7a, 0x19, 0xbe, 0x67,
	0xf8, 0x29, 0x34, 0x95, 0x0b, 0x03, 0xf5, 0x50, 0x7f, 0xf7, 0xe4, 0xc0, 0x8e, 0x26, 0xb6, 0x92,
	0x7e, 0x19, 0x5e, 0x07, 0x44, 0xad, 0xc3, 0x16, 0xb4, 0x46, 0xbc, 0x89, 0x13, 0x64, 0x39, 0xa3,
	0xd2, 0x43, 0xfd, 0x1a, 0xd1, 0x72, 0xb8, 0x0f, 0x7b, 0x63, 0x96, 0xba, 0xbe, 0xe8, 0x36, 0x9e,
	0x05, 0xd4, 0xa8, 0xf2, 0xb2, 0x72, 0x1a, 0x63, 0xd8, 0xca, 0x18, 0x1a, 0x5b, 0xfc, 0x9a, 0x9f,
	0x2d, 0x07, 0x40, 0xa1, 0x39, 0x80, 0x5a, 0xf6, 0x37, 0x31, 0x50, 0xaf, 0xda, 0x6f, 0x9e, 0x3c,
	0xe0, 0x04, 0x57, 0x0d, 0x45, 0x44, 0xad, 0xf5, 0x16, 0x0e, 0x2e, 0x68, 0x7a, 0xee, 0xc6, 0xef,
	0x04, 0xa3, 0x21, 0xf3, 0x9c, 0xd8, 0x5b, 0x77, 0xe4, 0x9c, 0x64, 0x45, 0x21, 0xf9, 0x06, 0xda,
	0xda, 0xf3, 0xf8, 0x0e, 0xd4, 0xb3, 0xc4, 0xe5, 0x0b, 0xfe, 0x6c, 0x9b, 0xc8, 0x28, 0xcb, 0x6b,
	0x4a, 0xc9, 0x08, 0x9b, 0xd0, 0xc8, 0x2a, 0xae, 0x5c, 0x29, 0xce, 0x0e, 0x29, 0x62, 0x2b, 0x84,
	0xdd, 0xec, 0x9c, 0x2c, 0x5f, 0x5f, 0x93, 0xf9, 0x31, 0x6c, 0x0d, 0x99, 0x97, 0x18, 0x15, 0xae,
	0xdd, 0x7e, 0x56, 0xaf, 0xb1, 0x26, 0xfc, 0xda, 0x7a, 0x0e, 0xb7, 0xcb, 0x72, 0x11, 0x1a, 0xf9,
	0x73, 0xfc, 0x48, 0xe2, 0x85, 0xf6, 0x38, 0xc7, 0x27, 0xe5, 0x07, 0x3e, 0x01, 0x96, 0x0f, 0x0c,
	0xe9, 0x0d, 0xf5, 0x37, 0x93, 0x7b, 0xa9, 0x64, 0x45, 0x53, 0x32, 0xb7, 0xa1, 0xaa, 0xd8, 0xf0,
	0x0d, 0x41, 0x4b, 0x6d, 0xbb, 0xd2, 0x86, 0x27, 0x50, 0xe7, 0x35, 0xb9, 0x16, 0xf7, 0xf3, 0x59,
	0x72, 0xa4, 0xcd, 0x0f, 0x62, 0x30, 0x22, 0x6b, 0xff, 0x65, 0x92, 0x79, 0x0a, 0x4d, 0x05, 0x82,
	0x0f, 0xa1, 0xc6, 0x43, 0xde, 0xb7, 0x46, 0x44, 0xb0, 0xca, 0x7d, 0xcb, 0x17, 0xeb, 0x93, 0x14,
	0xbc, 0xd7, 0xd4, 0xea, 0x48, 0x33, 0xb8, 0x53, 0x1e, 0x4a, 0xda, 0xf3, 0x0c, 0x0e, 0x4b, 0xf6,
	0x08, 0x7b, 0x8f, 0x35, 0x7b, 0x8b, 0xf5, 0x48, 0x4a, 0xf0, 0xcf, 0xb0, 0x2f, 0xe1, 0x23, 0xc6,
	0x36, 0x34, 0xd7, 0x84, 0xc6, 0xe8, 0x26, 0x12, 0x4a, 0x09, 0x49, 0x8a, 0xf8, 0xaf, 0x06, 0xff,
	0x44, 0xd0, 0x54, 0x3a, 0x6b, 0x78, 0x54, 0xc2, 0x5b, 0xd0, 0x3a, 0x73, 0xd3, 0xd4, 0xa7, 0xfa,
	0xa7, 0x49, 0xcd, 0xe1, 0x81, 0x70, 0x94, 0x8f, 0x5d, 0xe5, 0x63, 0xdf, 0xcd, 0xc7, 0x96, 0x2d,
	0x6c, 0x79, 0x4f, 0x8a, 0x42, 0xf3, 0x35, 0x6c, 0xcb, 0xf3, 0x7f, 0xfd, 0x37, 0xff, 0x28, 0x76,
	0x37, 0xeb, 0x9b, 0x6c, 0xb0, 0x03, 0x0f, 0xb5, 0x1d, 0xd8, 0x2b, 0x8d, 0x23, 0x3d, 0x3c, 0x2d,
	0xbe, 0x88, 0x79, 0x9e, 0x6f, 0xc0, 0x91, 0xb6, 0x01, 0x1d, 0x15, 0x9b, 0x2c, 0xc1, 0x04, 0xda,
	0x17, 0xc1, 0x90, 0x79, 0xb3, 0xf0, 0x8a, 0xa5, 0xb3, 0x29, 0xc5, 0x06, 0x6c, 0x9f, 0x7f, 0x70,
	0xc3, 0x50, 0x9a, 0xb0, 0x43, 0xf2, 0x10, 0x3f, 0x86, 0xba, 0xa8, 0xe1, 0x3a, 0x48, 0x3a, 0x0a,
	0x94, 0xc8, 0xeb, 0xb3, 0xce, 0xf7, 0x45, 0x17, 0xfd, 0x58, 0x74, 0xd1, 0xaf, 0x45, 0x17, 0x7d,
	0xf9, 0xdd, 0xbd, 0x35, 0xa9, 0xf3, 0x5f, 0xad, 0xc1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x72,
	0x80, 0xe9, 0x47, 0xd3, 0x06, 0x00, 0x00,
}
